{
  "version": 3,
  "sources": ["../../../packages/staark-common/src/marker.ts", "../../../packages/staark-common/src/node.ts", "../../../packages/staark-common/src/array.ts", "../../../packages/staark-common/src/element.ts", "../../../packages/staark-patch/src/library/patch.ts"],
  "sourcesContent": ["export const marker = 'n'\n", "import {\n  marker,\n} from './marker.js'\nimport {\n  MemoAbstract,\n} from './memo.js'\n\ntype _NodeAttributeListener = {\n  (event: Event, state: Record<string, any>): unknown\n  (event: Event): unknown\n  (): unknown\n}\n\nexport interface NodeAttributeListener extends _NodeAttributeListener {\n  f?: _NodeAttributeListener\n}\n\nexport type NodeAttributes =\n  Record<string,\n    boolean |\n    null |\n    number |\n    string |\n    (number | string)[] |\n    NodeAttributeListener |\n    Record<string,\n      boolean | number | string\n    >\n  >\n\nexport type NodeContent =\n  string |\n  MemoAbstract |\n  NodeAbstract\n\nexport type NodeAbstract = {\n  // Discriminator\n  _: string,\n  // Attributes\n  a?: NodeAttributes\n  // Content\n  c?: NodeContent[]\n  // Node type\n  t: string\n}\n\nexport const node = (\n  type: string,\n  attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n  contents?: NodeContent[] | NodeContent,\n): NodeAbstract => {\n  if (\n    typeof (attributesOrContents) !== 'object'\n    || (attributesOrContents as NodeAbstract)._ === marker\n    || Array.isArray(attributesOrContents)\n  ) {\n    contents = attributesOrContents as NodeContent\n    attributesOrContents = undefined\n  }\n\n  return {\n    _: marker,\n    a: attributesOrContents as (NodeAttributes | undefined),\n    c: (\n      contents\n        ? Array.isArray(contents)\n          ? contents\n          : [contents] as NodeContent[]\n        : []\n    ),\n    t: type.toUpperCase(),\n  }\n}\n", "export const arrayify = <T>(\n  data: T[] | T,\n): T[] => (\n  Array.isArray(data)\n    ? data :\n    [data,]\n)\n", "import {\n  node,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\n\nexport const childrenToNodes = (\n  element: Element | ChildNode,\n) => {\n  const abstractChildNodes: NodeContent[] = []\n  for (let i = 0; i < element.childNodes.length; i++) {\n    const childNode = element.childNodes[i]\n    if (childNode instanceof Text) {\n      abstractChildNodes.push(\n        childNode.textContent ?? ''\n      )\n    } else {\n      let attributes: NodeAttributes = {}\n      for (let i = 0; i < (childNode as Element).attributes.length; i++) {\n        const attribute = (childNode as Element).attributes[i]\n        attributes[attribute.name] = attribute.value\n      }\n\n      abstractChildNodes.push(\n        node(\n          childNode.nodeName,\n          attributes,\n          childrenToNodes(childNode),\n        )\n      )\n    }\n  }\n  return abstractChildNodes\n}\n", "import {\n  arrayify,\n} from '@doars/staark-common/src/array.js'\nimport {\n  childrenToNodes,\n} from '@doars/staark-common/src/element.js'\nimport {\n  NodeAbstract,\n  NodeAttributes,\n  NodeAttributeListener,\n  NodeContent,\n} from '@doars/staark-common/src/node.js'\n\nexport type PatchFunction = (\n  newAbstractTree: NodeContent[] | NodeContent,\n) => void\n\nconst MATCH_CAPITALS = /[A-Z]+(?![a-z])|[A-Z]/g\nconst HYPHENATE = (\n  part: string,\n  offset: number,\n) => (offset ? '-' : '') + part\n\nconst updateAttributes = (\n  element: Element,\n  newAttributes?: NodeAttributes,\n  oldAttributes?: NodeAttributes,\n): void => {\n  if (newAttributes) {\n    for (const name in newAttributes) {\n      let value = newAttributes[name]\n      if (value) {\n        const type = typeof (value)\n        if (type === 'function') {\n          if (\n            oldAttributes\n            && oldAttributes[name]\n          ) {\n            if (oldAttributes[name] === value) {\n              continue\n            } else {\n              element.removeEventListener(\n                name,\n                oldAttributes[name] as NodeAttributeListener,\n              )\n            }\n          }\n\n          element.addEventListener(\n            name,\n            value as NodeAttributeListener,\n          )\n        } else {\n          if (name === 'class') {\n            if (typeof (value) === 'object') {\n              if (Array.isArray(value)) {\n                value = value.join(' ')\n              } else {\n                let classNames: string = ''\n                for (const className in value) {\n                  if (value[className]) {\n                    classNames += ' ' + className\n                  }\n                }\n                value = classNames\n              }\n            }\n            element.className = value as string\n          } else if (name === 'style') {\n            if (typeof (value) === 'object') {\n              if (Array.isArray(value)) {\n                for (const style of value) {\n                  const [styleProperty, ...styleValue] = (style as string).split(':');\n                  (element as HTMLElement).style.setProperty(\n                    styleProperty,\n                    styleValue.join(':'),\n                  )\n                }\n              } else {\n                for (let styleProperty in value) {\n                  let styleValue: boolean | string | number | (boolean | string | number)[] = value[styleProperty]\n\n                  // Convert to kebab case.\n                  styleProperty = styleProperty\n                    .replace(MATCH_CAPITALS, HYPHENATE)\n                    .toLowerCase()\n\n                  if (Array.isArray(styleValue)) {\n                    styleValue = styleValue.join(' ')\n                  }\n\n                  (element as HTMLElement).style.setProperty(\n                    styleProperty,\n                    styleValue.toString(),\n                  )\n                }\n              }\n            }\n          } else {\n            // Ensure it is of type string.\n            if (type === 'boolean') {\n              if (!value) {\n                element.removeAttribute(name)\n                continue\n              }\n              value = 'true'\n            } else if (type !== 'string') {\n              value = value.toString()\n            }\n\n            if (\n              name === 'value'\n              && (element as HTMLInputElement).value !== value\n            ) {\n              // Update value separately as well.\n              (element as HTMLInputElement).value = value as string\n              // Don't dispatch a change event, the re-rendering should update everything: element.dispatchEvent(new Event('change'))\n            } else if (name === 'checked') {\n              (element as HTMLInputElement).checked = newAttributes[name] as boolean\n              // Don't dispatch a change event, the re-rendering should update everything: element.dispatchEvent(new Event('change'))\n            }\n\n            element.setAttribute(name, (value as string))\n          }\n        }\n      }\n    }\n  }\n\n  // Cleanup old attributes.\n  if (oldAttributes) {\n    for (const name in oldAttributes) {\n      if (\n        !newAttributes\n        || !newAttributes[name]\n      ) {\n        if (typeof (oldAttributes[name]) === 'function') {\n          element.removeEventListener(\n            name,\n            oldAttributes[name] as NodeAttributeListener,\n          )\n        } else {\n          if (name === 'value') {\n            // Reset value separately.\n            (element as HTMLInputElement).value = ''\n            // Don't dispatch the input change event, the rerendering should update everything: element.dispatchEvent(new Event('change'))\n          } else if (name === 'checked') {\n            (element as HTMLInputElement).checked = false\n          }\n          element.removeAttribute(name)\n        }\n      }\n    }\n  }\n}\n\nexport const prepare = (\n  rootElement: HTMLElement | Element | string,\n  oldAbstractTree?: NodeContent[] | string,\n): PatchFunction => {\n  const updateElementTree = (\n    element: Element,\n    newChildAbstracts?: NodeContent[],\n    oldChildAbstracts?: NodeContent[],\n    elementAbstract?: NodeContent,\n  ): void => {\n    let newIndex = 0\n    let newCount = 0\n    if (newChildAbstracts) {\n      for (; newIndex < newChildAbstracts.length; newIndex++) {\n        const newAbstract = newChildAbstracts[newIndex]\n\n        // Try to find the matching old abstract.\n        let matched = false\n        if (oldChildAbstracts) {\n          for (let oldIndex = newIndex - newCount; oldIndex < oldChildAbstracts.length; oldIndex++) {\n            const oldAbstract = oldChildAbstracts[oldIndex];\n            if (\n              (\n                (oldAbstract as NodeAbstract).t\n                && (newAbstract as NodeAbstract).t === (oldAbstract as NodeAbstract).t\n              )\n              || (\n                !(oldAbstract as NodeAbstract).t\n                && !(newAbstract as NodeAbstract).t\n              )\n            ) {\n              matched = true\n\n              if (newIndex !== (oldIndex + newCount)) {\n                // Move node in dom.\n                element.insertBefore(\n                  element.childNodes[oldIndex + newCount],\n                  element.childNodes[newIndex],\n                )\n                // Move node in abstract tree.\n                oldChildAbstracts.splice(\n                  newIndex - newCount,\n                  0,\n                  ...oldChildAbstracts.splice(\n                    oldIndex,\n                    1,\n                  )\n                )\n              }\n\n              if ((newAbstract as NodeAbstract).t) {\n                updateAttributes(\n                  (element.childNodes[newIndex] as Element),\n                  (newAbstract as NodeAbstract).a,\n                  (oldAbstract as NodeAbstract).a,\n                )\n                updateElementTree(\n                  (element.childNodes[newIndex] as Element),\n                  (newAbstract as NodeAbstract).c,\n                  (oldAbstract as NodeAbstract).c,\n                  oldAbstract,\n                )\n              } else if (oldAbstract !== newAbstract) {\n                element.childNodes[newIndex].textContent = newAbstract as string\n              }\n              break\n            }\n          }\n        }\n\n        if (!matched) {\n          let childElement: Element | string\n          if ((newAbstract as NodeAbstract).t) {\n            childElement = document.createElement(\n              (newAbstract as NodeAbstract).t\n            )\n\n            if ((newAbstract as NodeAbstract).a) {\n              updateAttributes(\n                childElement,\n                (newAbstract as NodeAbstract).a,\n              )\n            }\n            if ((newAbstract as NodeAbstract).c) {\n              updateElementTree(\n                childElement,\n                (newAbstract as NodeAbstract).c,\n              )\n            }\n\n            const insertAdjacentElement = (\n              element: Node,\n              elementAbstract?: NodeContent | null,\n              position?: InsertPosition,\n            ) => {\n              if (\n                position &&\n                (\n                  !elementAbstract\n                  || (elementAbstract as NodeAbstract).t\n                )\n              ) {\n                (element as Element)\n                  .insertAdjacentElement(\n                    position,\n                    childElement as Element,\n                  )\n              } else {\n                // Otherwise the position is always 'beforebegin'.\n                (element.parentNode as Element)\n                  .insertBefore(\n                    childElement as Element,\n                    element,\n                  )\n              }\n            }\n            if (newIndex === 0) {\n              insertAdjacentElement(\n                element,\n                elementAbstract,\n                'afterbegin',\n              )\n            } else if ((oldChildAbstracts?.length ?? 0) + newCount > newIndex) {\n              insertAdjacentElement(\n                (element.childNodes[newIndex] as Node),\n                // (oldChildAbstracts as NodeContent[])[newIndex + newCount],\n                // 'beforebegin',\n              )\n            } else {\n              insertAdjacentElement(\n                element,\n                elementAbstract,\n                'beforeend',\n              )\n            }\n          } else {\n            const insertAdjacentText = (\n              element: Node,\n              elementAbstract?: NodeContent | null,\n              position?: InsertPosition,\n            ) => {\n              if (\n                position &&\n                (\n                  !elementAbstract\n                  || (elementAbstract as NodeAbstract).t\n                )\n              ) {\n                (element as Element)\n                  .insertAdjacentText(\n                    position,\n                    newAbstract as string,\n                  )\n              } else {\n                // Otherwise the position is always 'beforebegin'.\n                (element.parentNode as Element)\n                  .insertBefore(\n                    document.createTextNode(newAbstract as string),\n                    element,\n                  )\n              }\n            }\n            if (newIndex === 0) {\n              insertAdjacentText(\n                element,\n                elementAbstract,\n                'afterbegin',\n              )\n            } else if ((oldChildAbstracts?.length ?? 0) + newCount > newIndex) {\n              insertAdjacentText(\n                element.childNodes[newIndex] as Node,\n                // (oldChildAbstracts as NodeContent[])[newIndex + newCount],\n                // 'beforebegin',\n              )\n            } else {\n              insertAdjacentText(\n                element,\n                elementAbstract,\n                'beforeend',\n              )\n            }\n          }\n          newCount++\n        }\n      }\n    }\n\n    // Remove old elements.\n    const elementLength = (oldChildAbstracts?.length ?? 0) + newCount\n    if (elementLength >= newIndex) {\n      for (let i = elementLength - 1; i >= newIndex; i--) {\n        element.childNodes[i].remove()\n      }\n    }\n  }\n\n  const _rootElement = (\n    typeof (rootElement) === 'string'\n      ? (\n        document.querySelector(rootElement)\n        || document.body.appendChild(\n          document.createElement('div')\n        )\n      )\n      : rootElement\n  )\n\n  if (typeof (oldAbstractTree) === 'string') {\n    try {\n      oldAbstractTree = JSON.parse(oldAbstractTree) as NodeContent[]\n    } catch (error) {\n      oldAbstractTree = undefined\n    }\n  }\n  oldAbstractTree ??= childrenToNodes(_rootElement)\n\n  return (\n    newAbstractTree: NodeContent[] | NodeContent,\n  ): void => {\n    newAbstractTree = arrayify(newAbstractTree)\n    updateElementTree(\n      _rootElement,\n      newAbstractTree,\n      oldAbstractTree as NodeContent[],\n    )\n    oldAbstractTree = newAbstractTree\n  }\n}\n"],
  "mappings": "AAAO,IAAMA,EAAS,IC8Cf,IAAMC,EAAO,CAClBC,EACAC,EACAC,MAGE,OAAQD,GAA0B,UAC9BA,EAAsC,IAAME,GAC7C,MAAM,QAAQF,CAAoB,KAErCC,EAAWD,EACXA,EAAuB,QAGlB,CACL,EAAGE,EACH,EAAGF,EACH,EACEC,EACI,MAAM,QAAQA,CAAQ,EACpBA,EACA,CAACA,CAAQ,EACX,CAAC,EAEP,EAAGF,EAAK,YAAY,CACtB,GCvEK,IAAMI,EACXC,GAEA,MAAM,QAAQA,CAAI,EACdA,EACF,CAACA,CAAK,ECCH,IAAMC,EACXC,GACG,CARL,IAAAC,EASE,IAAMC,EAAoC,CAAC,EAC3C,QAASC,EAAI,EAAGA,EAAIH,EAAQ,WAAW,OAAQG,IAAK,CAClD,IAAMC,EAAYJ,EAAQ,WAAWG,CAAC,EACtC,GAAIC,aAAqB,KACvBF,EAAmB,MACjBD,EAAAG,EAAU,cAAV,KAAAH,EAAyB,EAC3B,MACK,CACL,IAAII,EAA6B,CAAC,EAClC,QAASF,EAAI,EAAGA,EAAKC,EAAsB,WAAW,OAAQD,IAAK,CACjE,IAAMG,EAAaF,EAAsB,WAAWD,CAAC,EACrDE,EAAWC,EAAU,IAAI,EAAIA,EAAU,KACzC,CAEAJ,EAAmB,KACjBK,EACEH,EAAU,SACVC,EACAN,EAAgBK,CAAS,CAC3B,CACF,CACF,CACF,CACA,OAAOF,CACT,EChBA,IAAMM,EAAiB,yBACjBC,EAAY,CAChBC,EACAC,KACIA,EAAS,IAAM,IAAMD,EAErBE,EAAmB,CACvBC,EACAC,EACAC,IACS,CACT,GAAID,EACF,QAAWE,KAAQF,EAAe,CAChC,IAAIG,EAAQH,EAAcE,CAAI,EAC9B,GAAIC,EAAO,CACT,IAAMC,EAAO,OAAQD,EACrB,GAAIC,IAAS,WAAY,CACvB,GACEH,GACGA,EAAcC,CAAI,EACrB,CACA,GAAID,EAAcC,CAAI,IAAMC,EAC1B,SAEAJ,EAAQ,oBACNG,EACAD,EAAcC,CAAI,CACpB,CAEJ,CAEAH,EAAQ,iBACNG,EACAC,CACF,CACF,SACMD,IAAS,QAAS,CACpB,GAAI,OAAQC,GAAW,SACrB,GAAI,MAAM,QAAQA,CAAK,EACrBA,EAAQA,EAAM,KAAK,GAAG,MACjB,CACL,IAAIE,EAAqB,GACzB,QAAWC,KAAaH,EAClBA,EAAMG,CAAS,IACjBD,GAAc,IAAMC,GAGxBH,EAAQE,CACV,CAEFN,EAAQ,UAAYI,CACtB,SAAWD,IAAS,SAClB,GAAI,OAAQC,GAAW,SACrB,GAAI,MAAM,QAAQA,CAAK,EACrB,QAAWI,KAASJ,EAAO,CACzB,GAAM,CAACK,EAAe,GAAGC,CAAU,EAAKF,EAAiB,MAAM,GAAG,EACjER,EAAwB,MAAM,YAC7BS,EACAC,EAAW,KAAK,GAAG,CACrB,CACF,KAEA,SAASD,KAAiBL,EAAO,CAC/B,IAAIM,EAAwEN,EAAMK,CAAa,EAG/FA,EAAgBA,EACb,QAAQd,EAAgBC,CAAS,EACjC,YAAY,EAEX,MAAM,QAAQc,CAAU,IAC1BA,EAAaA,EAAW,KAAK,GAAG,GAGjCV,EAAwB,MAAM,YAC7BS,EACAC,EAAW,SAAS,CACtB,CACF,MAGC,CAEL,GAAIL,IAAS,UAAW,CACtB,GAAI,CAACD,EAAO,CACVJ,EAAQ,gBAAgBG,CAAI,EAC5B,QACF,CACAC,EAAQ,MACV,MAAWC,IAAS,WAClBD,EAAQA,EAAM,SAAS,GAIvBD,IAAS,SACLH,EAA6B,QAAUI,EAG1CJ,EAA6B,MAAQI,EAE7BD,IAAS,YACjBH,EAA6B,QAAUC,EAAcE,CAAI,GAI5DH,EAAQ,aAAaG,EAAOC,CAAgB,CAC9C,CAEJ,CACF,CAIF,GAAIF,EACF,QAAWC,KAAQD,GAEf,CAACD,GACE,CAACA,EAAcE,CAAI,KAElB,OAAQD,EAAcC,CAAI,GAAO,WACnCH,EAAQ,oBACNG,EACAD,EAAcC,CAAI,CACpB,GAEIA,IAAS,QAEVH,EAA6B,MAAQ,GAE7BG,IAAS,YACjBH,EAA6B,QAAU,IAE1CA,EAAQ,gBAAgBG,CAAI,GAKtC,EAEaQ,EAAU,CACrBC,EACAC,IACkB,CAClB,IAAMC,EAAoB,CACxBd,EACAe,EACAC,EACAC,IACS,CArKb,IAAAC,EAAAC,EAAAC,EAsKI,IAAIC,EAAW,EACXC,EAAW,EACf,GAAIP,EACF,KAAOM,EAAWN,EAAkB,OAAQM,IAAY,CACtD,IAAME,EAAcR,EAAkBM,CAAQ,EAG1CG,EAAU,GACd,GAAIR,EACF,QAASS,EAAWJ,EAAWC,EAAUG,EAAWT,EAAkB,OAAQS,IAAY,CACxF,IAAMC,EAAcV,EAAkBS,CAAQ,EAC9C,GAEKC,EAA6B,GAC1BH,EAA6B,IAAOG,EAA6B,GAGrE,CAAEA,EAA6B,GAC5B,CAAEH,EAA6B,EAEpC,CACAC,EAAU,GAENH,IAAcI,EAAWH,IAE3BtB,EAAQ,aACNA,EAAQ,WAAWyB,EAAWH,CAAQ,EACtCtB,EAAQ,WAAWqB,CAAQ,CAC7B,EAEAL,EAAkB,OAChBK,EAAWC,EACX,EACA,GAAGN,EAAkB,OACnBS,EACA,CACF,CACF,GAGGF,EAA6B,GAChCxB,EACGC,EAAQ,WAAWqB,CAAQ,EAC3BE,EAA6B,EAC7BG,EAA6B,CAChC,EACAZ,EACGd,EAAQ,WAAWqB,CAAQ,EAC3BE,EAA6B,EAC7BG,EAA6B,EAC9BA,CACF,GACSA,IAAgBH,IACzBvB,EAAQ,WAAWqB,CAAQ,EAAE,YAAcE,GAE7C,KACF,CACF,CAGF,GAAI,CAACC,EAAS,CACZ,IAAIG,EACJ,GAAKJ,EAA6B,EAAG,CACnCI,EAAe,SAAS,cACrBJ,EAA6B,CAChC,EAEKA,EAA6B,GAChCxB,EACE4B,EACCJ,EAA6B,CAChC,EAEGA,EAA6B,GAChCT,EACEa,EACCJ,EAA6B,CAChC,EAGF,IAAMK,EAAwB,CAC5B5B,EACAiB,EACAY,IACG,CAEDA,IAEE,CAACZ,GACGA,EAAiC,GAGtCjB,EACE,sBACC6B,EACAF,CACF,EAGD3B,EAAQ,WACN,aACC2B,EACA3B,CACF,CAEN,EACIqB,IAAa,EACfO,EACE5B,EACAiB,EACA,YACF,IACUC,EAAAF,GAAA,YAAAA,EAAmB,SAAnB,KAAAE,EAA6B,GAAKI,EAAWD,EACvDO,EACG5B,EAAQ,WAAWqB,CAAQ,CAG9B,EAEAO,EACE5B,EACAiB,EACA,WACF,CAEJ,KAAO,CACL,IAAMa,EAAqB,CACzB9B,EACAiB,EACAY,IACG,CAEDA,IAEE,CAACZ,GACGA,EAAiC,GAGtCjB,EACE,mBACC6B,EACAN,CACF,EAGDvB,EAAQ,WACN,aACC,SAAS,eAAeuB,CAAqB,EAC7CvB,CACF,CAEN,EACIqB,IAAa,EACfS,EACE9B,EACAiB,EACA,YACF,IACUE,EAAAH,GAAA,YAAAA,EAAmB,SAAnB,KAAAG,EAA6B,GAAKG,EAAWD,EACvDS,EACE9B,EAAQ,WAAWqB,CAAQ,CAG7B,EAEAS,EACE9B,EACAiB,EACA,WACF,CAEJ,CACAK,GACF,CACF,CAIF,IAAMS,IAAiBX,EAAAJ,GAAA,YAAAA,EAAmB,SAAnB,KAAAI,EAA6B,GAAKE,EACzD,GAAIS,GAAiBV,EACnB,QAASW,EAAID,EAAgB,EAAGC,GAAKX,EAAUW,IAC7ChC,EAAQ,WAAWgC,CAAC,EAAE,OAAO,CAGnC,EAEMC,EACJ,OAAQrB,GAAiB,SAErB,SAAS,cAAcA,CAAW,GAC/B,SAAS,KAAK,YACf,SAAS,cAAc,KAAK,CAC9B,EAEAA,EAGN,GAAI,OAAQC,GAAqB,SAC/B,GAAI,CACFA,EAAkB,KAAK,MAAMA,CAAe,CAC9C,OAASqB,EAAO,CACdrB,EAAkB,MACpB,CAEF,OAAAA,GAAA,OAAAA,EAAoBsB,EAAgBF,CAAY,GAG9CG,GACS,CACTA,EAAkBC,EAASD,CAAe,EAC1CtB,EACEmB,EACAG,EACAvB,CACF,EACAA,EAAkBuB,CACpB,CACF",
  "names": ["marker", "node", "type", "attributesOrContents", "contents", "marker", "arrayify", "data", "childrenToNodes", "element", "_a", "abstractChildNodes", "i", "childNode", "attributes", "attribute", "node", "MATCH_CAPITALS", "HYPHENATE", "part", "offset", "updateAttributes", "element", "newAttributes", "oldAttributes", "name", "value", "type", "classNames", "className", "style", "styleProperty", "styleValue", "prepare", "rootElement", "oldAbstractTree", "updateElementTree", "newChildAbstracts", "oldChildAbstracts", "elementAbstract", "_a", "_b", "_c", "newIndex", "newCount", "newAbstract", "matched", "oldIndex", "oldAbstract", "childElement", "insertAdjacentElement", "position", "insertAdjacentText", "elementLength", "i", "_rootElement", "error", "childrenToNodes", "newAbstractTree", "arrayify"]
}
