{
  "version": 3,
  "sources": ["../../../packages/staark/src/library/marker.ts", "../../../packages/staark/src/library/memo.ts", "../../../packages/staark-common/src/array.ts", "../../../packages/staark-common/src/clone.ts", "../../../packages/staark-common/src/compare.ts", "../../../packages/staark-common/src/element.ts", "../../../packages/staark/src/utilities/proxy.ts", "../../../packages/staark/src/library/mount.ts", "../../../packages/staark/src/library/node.ts"],
  "sourcesContent": ["export const marker = Symbol()\n", "import {\n  marker,\n} from './marker.js'\nimport { NodeContent } from './node.js'\n\nexport type MemoFunction = (\n  state: Record<string, any>,\n  memory: any,\n) => NodeContent | NodeContent[]\n\nexport type MemoAbstract = {\n  _: Symbol,\n  // Compare data\n  m: any,\n  // Render function\n  r: MemoFunction,\n}\n\nexport const memo = (\n  render: MemoFunction,\n  memory: any,\n) => ({\n  _: marker,\n  r: render,\n  m: memory,\n})\n", "export const arrayify = function <T>(\n  data: T[] | T,\n): T[] {\n  if (Array.isArray(data)) {\n    return data\n  }\n  return [\n    data,\n  ]\n}\n", "export const cloneRecursive = (\n  value: any,\n) => {\n  if (typeof (value) === 'object') {\n    if (Array.isArray(value)) {\n      const clone: any[] = []\n      for (let i = 0; i < value.length; i++) {\n        clone.push(cloneRecursive(value[i]))\n      }\n      value = clone\n    } else {\n      const clone: Record<string, any> = {}\n      for (const key in value) {\n        clone[key] = cloneRecursive(value[key])\n      }\n      value = clone\n    }\n  }\n  return value\n}\n", "export const equalRecursive = (\n  valueA: any,\n  valueB: any,\n): boolean => {\n  if (valueA === valueB) {\n    return true\n  }\n  if (\n    valueA instanceof Date\n    && valueB instanceof Date\n  ) {\n    return valueA.getTime() === valueB.getTime()\n  }\n  if (\n    !valueA\n    || !valueB\n    || (\n      typeof valueA !== 'object' && typeof valueB !== 'object'\n    )\n  ) {\n    return valueA === valueB\n  }\n  if (\n    valueA === null\n    || valueA === undefined\n    || valueB === null\n    || valueB === undefined\n  ) {\n    return false\n  }\n  if (valueA.prototype !== valueB.prototype) {\n    return false\n  }\n  let keys = Object.keys(valueA)\n  if (keys.length !== Object.keys(valueB).length) {\n    return false\n  }\n  return keys.every(\n    (key: string): boolean => equalRecursive(valueA[key], valueB[key]),\n  )\n}\n", "export const CREATED_EVENT = 'staark-created'\n\nexport type CustomEventListener = (\n  event: CustomEvent,\n) => unknown\n\nexport const onCreated = (\n  id: string,\n  callback: CustomEventListener,\n) => {\n  const handleEvent = (\n    event: Event,\n  ) => {\n    if ((event as CustomEvent).detail.target.getAttribute('id') === id) {\n      document.body.removeEventListener(\n        CREATED_EVENT,\n        handleEvent,\n      )\n\n      callback(event as CustomEvent)\n    }\n  }\n\n  document.body.addEventListener(\n    CREATED_EVENT,\n    handleEvent,\n  )\n}\n", "export const proxify = (\n  root: Record<string, any>,\n  onChange: () => void,\n): Record<string, any> => {\n  // Setup WeakMap to keep track of created proxies.\n  const map = new WeakMap()\n\n  /**\n   * Remove object from being kept track of.\n   * @param {Record<string, any>} target Object that is being kept track of.\n   */\n  const remove = (\n    target: Record<string, any>,\n  ): void => {\n    // Check if target exists in case of recursion.\n    if (map.has(target)) {\n      // Remove target from the map.\n      const revocable = map.get(target)\n      map.delete(revocable)\n\n      // Recursively remove properties as well.\n      for (const property in revocable.proxy) {\n        if (typeof (revocable.proxy[property]) === 'object') {\n          remove(revocable.proxy[property])\n        }\n      }\n\n      revocable.revoke()\n    }\n  }\n\n  /**\n   * Add object to start keeping track of it.\n   * @param {Object} target Object that is being kept track of.\n   * @returns {Proxy} Object to access and mutate.\n   */\n  const add = (\n    target: Record<string, any>,\n  ): Record<string, any> => {\n    // Exit early if proxy already exists prevent recursion.\n    if (map.has(target)) {\n      return map.get(target)\n    }\n\n    // Recursively create proxies for each property.\n    for (const key in target) {\n      if (target[key] && typeof (target[key]) === 'object') {\n        target[key] = add(target[key])\n      }\n    }\n\n    const revocable = Proxy.revocable(target, {\n      deleteProperty: (\n        target: Record<string, any>,\n        key: string,\n      ): boolean => {\n        if (Reflect.has(target, key)) {\n          remove(target)\n\n          const deleted = Reflect.deleteProperty(target, key)\n\n          if (deleted) {\n            onChange()\n          }\n\n          return deleted\n        }\n        return true\n      },\n\n      set: (\n        target: Record<string, any>,\n        key: string,\n        value: any,\n      ): boolean => {\n        const existingValue = target[key]\n        if (existingValue !== value) {\n          // Remove existing value if value is an object.\n          if (typeof (existingValue) === 'object') {\n            remove(existingValue)\n          }\n\n          // Add proxy if value is an object.\n          if (value && typeof (value) === 'object') {\n            value = add(value)\n          }\n          target[key] = value\n\n          // Dispatch set event. If the target is an array and a new item has been pushed then the length has also changed, therefore a more generalizable path will be dispatched.\n          onChange()\n        }\n        return true\n      },\n    })\n\n    map.set(revocable, target)\n\n    return revocable.proxy\n  }\n\n  return add(root)\n}\n", "import {\n  arrayify,\n} from '@doars/staark-common/src/array.js'\nimport {\n  cloneRecursive,\n} from '@doars/staark-common/src/clone.js'\nimport {\n  equalRecursive,\n} from '@doars/staark-common/src/compare.js'\nimport {\n  CREATED_EVENT,\n} from '@doars/staark-common/src/element.js'\nimport {\n  proxify,\n} from '../utilities/proxy.js'\n\nimport {\n  MemoAbstract,\n  MemoFunction,\n} from './memo.js'\nimport {\n  NodeAbstract,\n  NodeAttributes,\n  NodeAttributeListener,\n  NodeContent,\n} from './node.js'\nimport {\n  TextAbstract,\n} from './text.js'\n\nexport type GenericFunction<DataType, ReturnType> = (\n  argument: DataType\n) => ReturnType\n\nexport type GenericFunctionUnknown = (\n) => unknown\n\ntype MemoData = {\n  c: NodeContent[],\n  m: any,\n  r: MemoFunction,\n}\n\nexport type ViewFunction = (\n  state: Record<string, any>,\n) => NodeContent | NodeContent[]\n\nconst MATCH_CAPITALS = /[A-Z]+(?![a-z])|[A-Z]/g\nconst HYPHENATE = (\n  part: string,\n  offset: number,\n) => (offset ? '-' : '') + part\n\nexport const mount = (\n  rootNode: Element | string,\n  renderView: ViewFunction,\n  initialState?: Record<string, any>,\n): undefined | [GenericFunction<string[], void>, GenericFunctionUnknown, Record<string, any>] => {\n  if (!initialState) {\n    initialState = {}\n  }\n\n  let active: boolean = true,\n    updating: boolean = false\n  let _rootNode = typeof (rootNode) === 'string'\n    ? (\n      document.querySelector(rootNode)\n      || document.body.appendChild(\n        document.createElement('div')\n      )\n    )\n    : rootNode\n\n  const unmount = (\n  ): void => {\n    if (active) {\n      active = false\n\n      for (let i = _rootNode.childNodes.length - 1; i >= 0; i--) {\n        _rootNode.childNodes[i].remove()\n      }\n    }\n  }\n  unmount()\n  active = true\n\n  // Track amount of listeners running.\n  let listenerCount = 0\n\n  const updateAttributes = (\n    element: Element,\n    newAttributes: NodeAttributes | null = null,\n    oldAttributes: NodeAttributes | null = null,\n  ): void => {\n    if (newAttributes) {\n      for (const name in newAttributes) {\n        let value = newAttributes[name]\n        if (\n          value !== null\n          && value !== undefined\n        ) {\n          const type = typeof (value)\n          if (type === 'function') {\n            // Wrap the listener so we can prevent re-renders during handling.\n            const listener = newAttributes[name] = (\n              event: Event,\n            ): void => {\n              listenerCount++;\n              try {\n                (value as NodeAttributeListener)(event)\n              } catch (error) {\n                console.warn('listener error', error)\n              }\n              listenerCount--\n              updateAbstracts()\n            }\n            element.addEventListener(name, listener)\n            continue\n          } else {\n            if (name === 'class') {\n              if (typeof (value) === 'object') {\n                if (Array.isArray(value)) {\n                  value = value.join(' ')\n                } else {\n                  let classNames: string = ''\n                  for (const className in value) {\n                    if (value[className]) {\n                      classNames += ' ' + className\n                    }\n                  }\n                  value = classNames\n                }\n              }\n            } else if (name === 'style') {\n              if (typeof (value) === 'object') {\n                if (Array.isArray(value)) {\n                  value = value.join(';')\n                } else {\n                  let styles: string = ''\n                  for (let styleProperty in value) {\n                    let styleValue: boolean | string | number | (boolean | string | number)[] = value[styleProperty]\n\n                    // Convert to kebab case.\n                    styleProperty = styleProperty\n                      .replace(MATCH_CAPITALS, HYPHENATE)\n                      .toLowerCase()\n\n                    if (Array.isArray(styleValue)) {\n                      styles += ';' + styleProperty + ':' + styleValue.join(' ')\n                    } else if (styleValue) {\n                      styles += ';' + styleProperty + ':' + styleValue\n                    }\n                  }\n                  value = styles\n                }\n              }\n            } else {\n              // Ensure it is of type string.\n              if (type === 'boolean') {\n                value = value ? 'true' : 'false'\n              } else if (type !== 'string') {\n                value = value.toString()\n              }\n\n              if (\n                name === 'value'\n                && (element as HTMLInputElement).value !== value\n              ) {\n                // Update value separately as well.\n                (element as HTMLInputElement).value = value as string\n                // Don't dispatch a change event, the re-rendering should update everything: element.dispatchEvent(new Event('change'))\n              } else if (name === 'checked') {\n                (element as HTMLInputElement).checked = newAttributes[name] as boolean\n                // Don't dispatch a change event, the re-rendering should update everything: element.dispatchEvent(new Event('change'))\n              }\n            }\n\n            element.setAttribute(name, (value as string))\n          }\n        }\n      }\n    }\n\n    // Cleanup old attributes.\n    if (oldAttributes) {\n      for (const name in oldAttributes) {\n        if (typeof (oldAttributes[name]) === 'function') {\n          element.removeEventListener(\n            name,\n            oldAttributes[name] as NodeAttributeListener,\n          )\n        } else if (\n          !newAttributes\n          || !(name in newAttributes)\n          || (newAttributes[name] === null)\n          || (newAttributes[name] === undefined)\n        ) {\n          if (name === 'value') {\n            // Reset value separately.\n            (element as HTMLInputElement).value = ''\n            // Don't dispatch the input change event, the rerendering should update everything: element.dispatchEvent(new Event('change'))\n          } else if (name === 'checked') {\n            (element as HTMLInputElement).checked = false\n          }\n          element.removeAttribute(name)\n        }\n      }\n    }\n  }\n\n  let oldMemoList: MemoData[] = []\n  let newMemoList: MemoData[] = []\n  const resolveMemoization = (\n    memoAbstract: MemoAbstract,\n  ): NodeContent[] => {\n    // Try and get the data from memory.\n    let match: MemoData | undefined = oldMemoList.find((oldMemo) => (\n      oldMemo.r === memoAbstract.r\n      && equalRecursive(oldMemo.m, memoAbstract.m)\n    ))\n    // If not found create it.\n    if (!match) {\n      match = {\n        c: arrayify(\n          memoAbstract.r(\n            state,\n            memoAbstract.m,\n          )\n        ),\n        m: memoAbstract.m,\n        r: memoAbstract.r,\n      }\n    }\n    // Store it in the list.\n    if (!newMemoList.includes(match)) {\n      newMemoList.push(match)\n    }\n    // Return the resulting nodes.\n    return cloneRecursive(\n      match.c,\n    )\n  }\n\n  const updateElementTree = (\n    element: Element,\n    newChildAbstracts: NodeContent[] | null | undefined,\n    oldChildAbstracts: NodeContent[] | null | undefined = null,\n    elementAbstract: NodeContent | null | undefined = null,\n  ): void => {\n    let newIndex = 0\n    let newCount = 0\n    if (newChildAbstracts) {\n      for (; newIndex < newChildAbstracts.length; newIndex++) {\n        const newAbstract = newChildAbstracts[newIndex]\n\n        // Handle memoization.\n        if ((newAbstract as MemoAbstract).r) {\n          const memoAbstracts = resolveMemoization(\n            (newAbstract as MemoAbstract)\n          )\n          // Splice nodes into the tree and re-run the loop again.\n          newChildAbstracts.splice(\n            newIndex,\n            1,\n            ...memoAbstracts,\n          )\n          // NOTE: Preferably we would skip re-rendering when the nodes were memoized, but because those nodes might have morphed we'll have to check. So we re-process the node again that as just inserted in.\n          newIndex--\n          continue\n        }\n\n        // Try to find the matching old abstract.\n        let matched = false\n        if (oldChildAbstracts) {\n          for (let oldIndex = newIndex - newCount; oldIndex < oldChildAbstracts.length; oldIndex++) {\n            const oldAbstract = oldChildAbstracts[oldIndex];\n            if (\n              (\n                (oldAbstract as NodeAbstract).t\n                && (newAbstract as NodeAbstract).t === (oldAbstract as NodeAbstract).t\n              )\n              || (\n                !(oldAbstract as NodeAbstract).t\n                && !(newAbstract as NodeAbstract).t\n              )\n            ) {\n              matched = true\n\n              if (newIndex !== oldIndex) {\n                // Move node in dom.\n                element.insertBefore(\n                  element.childNodes[oldIndex + newCount],\n                  element.childNodes[newIndex],\n                )\n                // Move node in abstract tree.\n                oldAbstractTree.splice(\n                  newIndex - newCount,\n                  0,\n                  ...oldAbstractTree.splice(\n                    oldIndex,\n                    1,\n                  )\n                )\n              }\n              if ((newAbstract as NodeAbstract).t) {\n                updateAttributes(\n                  (element.childNodes[newIndex] as Element),\n                  (newAbstract as NodeAbstract).a,\n                  (oldAbstract as NodeAbstract).a,\n                )\n                updateElementTree(\n                  (element.childNodes[newIndex] as Element),\n                  (newAbstract as NodeAbstract).c,\n                  (oldAbstract as NodeAbstract).c,\n                  oldAbstract,\n                )\n              } else {\n                element.childNodes[newIndex].textContent = (\n                  typeof (newAbstract) === 'string'\n                    ? newAbstract\n                    : (newAbstract as TextAbstract).c\n                )\n              }\n              break\n            }\n          }\n        }\n\n        if (!matched) {\n          let childElement: Element | string\n          if ((newAbstract as NodeAbstract).t) {\n            childElement = document.createElement(\n              (newAbstract as NodeAbstract).t\n            )\n\n            if ((newAbstract as NodeAbstract).a) {\n              updateAttributes(\n                childElement,\n                (newAbstract as NodeAbstract).a,\n              )\n            }\n            if ((newAbstract as NodeAbstract).c) {\n              updateElementTree(\n                childElement,\n                (newAbstract as NodeAbstract).c,\n              )\n            }\n\n            const insertAdjacentElement = (\n              element: Node,\n              elementAbstract: NodeContent | null | undefined,\n              position: InsertPosition,\n            ) => {\n              if (\n                !elementAbstract\n                || (elementAbstract as NodeAbstract).t\n              ) {\n                (element as Element)\n                  .insertAdjacentElement(\n                    position,\n                    childElement as Element,\n                  )\n              } else {\n                // Otherwise the position is always 'beforebegin'.\n                (element.parentNode as Element)\n                  .insertBefore(\n                    childElement as Element,\n                    element,\n                  )\n              }\n            }\n            if (newIndex === 0) {\n              insertAdjacentElement(\n                element,\n                elementAbstract,\n                'afterbegin',\n              )\n            } else if ((oldChildAbstracts?.length ?? 0) + newCount > newIndex) {\n              insertAdjacentElement(\n                (element.childNodes[newIndex] as Node),\n                (oldChildAbstracts as NodeContent[])[newIndex + newCount],\n                'beforebegin',\n              )\n            } else {\n              insertAdjacentElement(\n                element,\n                elementAbstract,\n                'beforeend',\n              )\n            }\n            newCount++\n          } else {\n            childElement = (\n              typeof (newAbstract) === 'string'\n                ? newAbstract\n                : (newAbstract as TextAbstract).c\n            )\n\n            const insertAdjacentText = (\n              element: Node,\n              elementAbstract: NodeContent | null | undefined,\n              position: InsertPosition,\n            ) => {\n              if (\n                !elementAbstract\n                || (elementAbstract as NodeAbstract).t\n              ) {\n                (element as Element)\n                  .insertAdjacentText(\n                    position,\n                    childElement as string,\n                  )\n              } else {\n                // Otherwise the position is always 'beforebegin'.\n                (element.parentNode as Element)\n                  .insertBefore(\n                    document.createTextNode(childElement as string),\n                    element.nextSibling,\n                  )\n              }\n            }\n            if (newIndex === 0) {\n              insertAdjacentText(\n                element,\n                elementAbstract,\n                'afterbegin',\n              )\n            } else if ((oldChildAbstracts?.length ?? 0) + newCount > newIndex) {\n              insertAdjacentText(\n                element.childNodes[newIndex] as Node,\n                (oldChildAbstracts as NodeContent[])[newIndex + newCount],\n                'beforebegin',\n              )\n            } else {\n              insertAdjacentText(\n                element,\n                elementAbstract,\n                'beforeend',\n              )\n            }\n            newCount++\n          }\n\n          _rootNode.dispatchEvent(\n            new CustomEvent(CREATED_EVENT, {\n              detail: {\n                target: childElement,\n              }\n            })\n          )\n        }\n      }\n    }\n\n    // Remove old elements.\n    const elementLength = (oldChildAbstracts?.length ?? 0) + newCount\n    if (elementLength >= newIndex) {\n      for (let i = elementLength - 1; i >= newIndex; i--) {\n        element.childNodes[i].remove()\n      }\n    }\n  }\n\n  let proxyChanged = true\n  let state = (\n    Object.getPrototypeOf(initialState) === Proxy.prototype\n      ? initialState\n      : proxify(\n        initialState,\n        (): void => {\n          proxyChanged = true\n          requestAnimationFrame(\n            updateAbstracts,\n          )\n        },\n      )\n  )\n\n  let oldAbstractTree: NodeContent[] = []\n  const updateAbstracts = (\n  ): void => {\n    if (\n      active &&\n      !updating &&\n      // Only update if changes to the state have been made.\n      proxyChanged &&\n      // Don't update while handling listeners.\n      listenerCount <= 0\n    ) {\n      updating = true\n      proxyChanged = false\n\n      let newAbstractTree = arrayify(\n        renderView(state),\n      )\n      updateElementTree(\n        _rootNode,\n        newAbstractTree,\n        oldAbstractTree,\n      )\n      // Store tree for next update\n      oldAbstractTree = newAbstractTree\n      oldMemoList = newMemoList\n      newMemoList = []\n\n      updating = false\n      if (proxyChanged) {\n        throw new Error('update during render')\n      }\n    }\n  }\n  updateAbstracts()\n\n  return [\n    (): void => {\n      proxyChanged = true\n      requestAnimationFrame(\n        updateAbstracts,\n      )\n    },\n    unmount,\n    state,\n  ]\n}\n", "import {\n  marker,\n} from './marker.js'\nimport {\n  MemoAbstract,\n} from './memo.js'\nimport {\n  TextAbstract,\n} from './text.js'\n\nexport type NodeAttributeListener = (\n  event: Event\n) => unknown\n\nexport type NodeAttributes =\n  Record<string,\n    boolean |\n    null |\n    number |\n    string |\n    (number | string)[] |\n    NodeAttributeListener |\n    Record<string,\n      boolean | number | string\n    >\n  >\n\nexport type NodeContent =\n  string |\n  MemoAbstract |\n  NodeAbstract |\n  TextAbstract\n\nexport type NodeAbstract = {\n  _: Symbol\n  // Attributes\n  a?: NodeAttributes\n  // Content\n  c?: NodeContent[]\n  // Node type\n  t: string\n}\n\nexport const node = (\n  type: string,\n  attributesOrContents?: NodeAttributes | NodeContent | NodeContent[],\n  contents?: NodeContent | NodeContent[],\n): NodeAbstract => {\n  if (\n    typeof (attributesOrContents) !== 'object'\n    || (attributesOrContents as NodeAbstract)._ === marker\n    || Array.isArray(attributesOrContents)\n  ) {\n    contents = attributesOrContents as NodeContent\n    attributesOrContents = undefined\n  }\n\n  return {\n    _: marker,\n    a: attributesOrContents as (NodeAttributes | undefined),\n    c: (\n      contents\n        ? Array.isArray(contents)\n          ? contents\n          : [contents] as NodeContent[]\n        : []\n    ),\n    t: type.toUpperCase(),\n  }\n}\n"],
  "mappings": "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",
  "names": ["marker", "memo", "render", "memory", "marker", "arrayify", "data", "cloneRecursive", "value", "clone", "i", "key", "equalRecursive", "valueA", "valueB", "keys", "key", "CREATED_EVENT", "proxify", "root", "onChange", "map", "remove", "target", "revocable", "property", "add", "key", "deleted", "value", "existingValue", "MATCH_CAPITALS", "HYPHENATE", "part", "offset", "mount", "rootNode", "renderView", "initialState", "active", "updating", "_rootNode", "unmount", "i", "listenerCount", "updateAttributes", "element", "newAttributes", "oldAttributes", "name", "value", "type", "listener", "event", "error", "updateAbstracts", "classNames", "className", "styles", "styleProperty", "styleValue", "oldMemoList", "newMemoList", "resolveMemoization", "memoAbstract", "match", "oldMemo", "equalRecursive", "arrayify", "state", "cloneRecursive", "updateElementTree", "newChildAbstracts", "oldChildAbstracts", "elementAbstract", "_a", "_b", "_c", "newIndex", "newCount", "newAbstract", "memoAbstracts", "matched", "oldIndex", "oldAbstract", "oldAbstractTree", "childElement", "insertAdjacentElement", "position", "insertAdjacentText", "CREATED_EVENT", "elementLength", "proxyChanged", "proxify", "newAbstractTree", "node", "type", "attributesOrContents", "contents", "marker"]
}
