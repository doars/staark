{
  "version": 3,
  "sources": ["../../staark-common/src/array.ts", "../../staark-common/src/conditional.ts", "../../staark-common/src/marker.ts", "../../staark-common/src/node.ts", "../../staark-common/src/factory.ts", "../../staark-common/src/selector.ts", "../../staark-common/src/fctory.ts", "../../staark-common/src/identifier.ts", "../../staark-common/src/match.ts", "../../staark-common/src/nde.ts", "../../staark-common/src/element.ts", "../src/library/patch.ts"],
  "sourcesContent": ["export const arrayify = <T>(\n  data: T[] | T,\n): T[] => (\n  Array.isArray(data)\n    ? data :\n    [data,]\n)\n", "import { arrayify } from './array.js'\nimport { NodeAbstract } from './node.js'\n\ntype ResolveFunction = () => NodeAbstract[] | NodeAbstract | null | undefined\n\nexport const conditional = (\n  condition: any,\n  onTruth: NodeAbstract[] | NodeAbstract | ResolveFunction,\n  onFalse?: NodeAbstract[] | NodeAbstract | ResolveFunction,\n): NodeAbstract[] => {\n  let result: NodeAbstract[] | NodeAbstract | ResolveFunction | null | undefined = (\n    condition\n      ? onTruth\n      : onFalse\n  )\n  if (typeof (result) === 'function') {\n    result = result()\n  }\n  if (result) {\n    return arrayify(result)\n  }\n  return []\n}\n", "export const marker = 'n'\n", "import {\n  marker,\n} from './marker.js'\nimport {\n  MemoAbstract,\n} from './memo.js'\n\ntype _NodeAttributeListener = {\n  (event: Event, state: Record<string, any>): unknown\n  (event: Event): unknown\n  (): unknown\n}\n\nexport interface NodeAttributeListener extends _NodeAttributeListener {\n  f?: _NodeAttributeListener\n}\n\nexport type NodeAttributes =\n  Record<string,\n    boolean |\n    null |\n    number |\n    string |\n    (number | string)[] |\n    NodeAttributeListener |\n    Record<string,\n      boolean | number | string\n    >\n  >\n\nexport type NodeContent =\n  string |\n  MemoAbstract |\n  NodeAbstract\n\nexport type NodeAbstract = {\n  // Discriminator\n  _: string,\n  // Attributes\n  a?: NodeAttributes\n  // Content\n  c?: NodeContent[]\n  // Node type\n  t: string\n}\n\nexport const node = (\n  type: string,\n  attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n  contents?: NodeContent[] | NodeContent,\n): NodeAbstract => {\n  if (\n    typeof (attributesOrContents) !== 'object'\n    || (attributesOrContents as NodeAbstract)._ === marker\n    || Array.isArray(attributesOrContents)\n  ) {\n    contents = attributesOrContents as NodeContent\n    attributesOrContents = undefined\n  }\n\n  return {\n    _: marker,\n    a: attributesOrContents as (NodeAttributes | undefined),\n    c: (\n      contents\n        ? Array.isArray(contents)\n          ? contents\n          : [contents] as NodeContent[]\n        : []\n    ),\n    t: type.toUpperCase(),\n  }\n}\n", "import {\n  node,\n  NodeAbstract,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\n\nexport type Factory = (\n  attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n  contents?: NodeContent[] | NodeContent,\n) => NodeAbstract\n\nexport type FactoryCache = {\n  [key: string]: Factory,\n}\n\nexport const factory = new Proxy({}, {\n  get: (\n    target: FactoryCache,\n    type: string,\n  ): Factory => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n      contents?: NodeContent[] | NodeContent,\n    ): NodeAbstract => node(\n      typeConverted,\n      attributesOrContents,\n      contents,\n    )\n  },\n})\n", "const BRACKET_CLOSE = ']'\nconst BRACKET_OPEN = '['\nconst DOT = '.'\nconst EQUAL = '='\nconst HASH = '#'\nconst QUOTE_SINGLE = '\\''\nconst QUOTE_DOUBLE = '\"'\n\nenum TokenTypes {\n  attribute = 0,\n  class = 1,\n  id = 2,\n  type = 3,\n}\n\nexport const selectorToTokenizer = (\n  selector: string,\n): [string, Record<string, any>] => {\n  const length: number = selector.length\n  let i: number = 0\n\n  let type: string = ''\n  const attributes: Record<string, any> = {}\n\n  let tokenA: string = ''\n  let tokenB: string | true = true\n  let tokenType: TokenTypes = TokenTypes.type\n  const storeToken = () => {\n    if (tokenA) {\n      switch (tokenType) {\n        case TokenTypes.attribute:\n          attributes[tokenA] = tokenB === true ? true : tokenB\n          tokenB = true\n          break\n\n        case TokenTypes.class:\n          if (!attributes.class) {\n            attributes.class = tokenA\n            break\n          }\n          attributes.class += ' ' + tokenA\n          break\n\n        case TokenTypes.id:\n          attributes.id = tokenA\n          break\n\n        case TokenTypes.type:\n          type = tokenA\n          break\n      }\n      tokenA = ''\n    }\n  }\n\n  let character: string\n\n  let attributeBracketCount: number\n  const parseAttribute = (\n  ): void => {\n    attributeBracketCount = 0\n\n    while (i < length) {\n      character = selector[i]\n      i++\n      if (character === EQUAL) {\n        // Parse attribute value.\n        tokenB = ''\n        character = selector[i]\n        const endOnDoubleQuote = character === QUOTE_DOUBLE\n        const endOnSingleQuote = character === QUOTE_SINGLE\n        if (endOnDoubleQuote || endOnSingleQuote) {\n          tokenB += character\n          i++\n        }\n\n        while (i < length) {\n          character = selector[i]\n          if (\n            (endOnDoubleQuote && character === QUOTE_DOUBLE) ||\n            (endOnSingleQuote && character === QUOTE_SINGLE)\n          ) {\n            tokenB += character\n            i++\n            break\n          } else if (\n            !endOnDoubleQuote &&\n            !endOnSingleQuote &&\n            character === BRACKET_CLOSE\n          ) {\n            break\n          }\n          tokenB += character\n          i++\n        }\n\n        if (\n          (\n            tokenB[0] === QUOTE_DOUBLE &&\n            tokenB[tokenB.length - 1] === QUOTE_DOUBLE\n          ) ||\n          (\n            tokenB[0] === QUOTE_SINGLE &&\n            tokenB[tokenB.length - 1] === QUOTE_SINGLE\n          )\n        ) {\n          tokenB = tokenB.substring(1, tokenB.length - 1)\n        }\n\n\n        // Consume until closing bracket, but don't store the tokes since these are invalid.\n        while (i < length) {\n          character = selector[i]\n          i++\n          if (character === BRACKET_CLOSE) {\n            break\n          }\n        }\n        break\n      } else if (character === BRACKET_OPEN) {\n        attributeBracketCount++\n        continue\n      } else if (character === BRACKET_CLOSE) {\n        attributeBracketCount--\n        if (attributeBracketCount < 0) {\n          break\n        }\n        continue\n      }\n\n      tokenA += character\n    }\n    storeToken()\n  }\n\n  while (i < length) {\n    character = selector[i]\n    i++\n\n    if (character === HASH) {\n      storeToken()\n      tokenType = TokenTypes.id\n      continue\n    } else if (character === DOT) {\n      storeToken()\n      tokenType = TokenTypes.class\n      continue\n    } else if (character === BRACKET_OPEN) {\n      storeToken()\n      tokenType = TokenTypes.attribute\n      parseAttribute()\n      continue\n    }\n\n    tokenA += character\n  }\n\n  return [type, attributes]\n}\n", "\nimport {\n  node,\n  NodeAbstract,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\nimport {\n  selectorToTokenizer,\n} from './selector.js'\n\nexport type Fctory = (\n  attributes?: string,\n  contents?: NodeContent[] | NodeContent,\n) => NodeAbstract\n\nexport type FctoryCache = {\n  [key: string]: Fctory,\n}\n\nexport const fctory = new Proxy({}, {\n  get: (\n    target: FctoryCache,\n    type: string,\n  ): Fctory => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      selector?: string,\n      contents?: NodeContent[] | NodeContent,\n    ): NodeAbstract => {\n      let attributes: NodeAttributes | undefined\n      if (selector) {\n        const [_, _attributes] = selectorToTokenizer(selector)\n        attributes = _attributes\n      }\n      return node(\n        typeConverted,\n        attributes,\n        contents,\n      )\n    }\n  },\n})\n", "let identifierCount = 0\nexport const identifier = (\n  prefix: string,\n): string => prefix + '-' + (identifierCount++)\n", "import { arrayify } from './array.js'\nimport { NodeAbstract } from './node.js'\n\ntype ResolveFunction = () => NodeAbstract[] | NodeAbstract | null | undefined\n\nexport const match = (\n  pattern: any,\n  lookup: Record<any, NodeAbstract[] | NodeAbstract | ResolveFunction | null | undefined>,\n): NodeAbstract[] => {\n  if (\n    lookup\n    && (pattern in lookup)\n    && lookup[pattern]\n  ) {\n    let result: NodeAbstract[] | NodeAbstract | ResolveFunction | null | undefined = lookup[pattern]\n    if (typeof (result) === 'function') {\n      result = result()\n      if (!result) {\n        return []\n      }\n    }\n    return arrayify(result)\n  }\n  return []\n}\n", "import {\n  marker,\n} from './marker.js'\nimport {\n  NodeAbstract,\n  NodeContent,\n} from './node.js'\nimport {\n  selectorToTokenizer,\n} from './selector.js'\n\nexport const nde = (\n  selector: string,\n  contents?: NodeContent[] | NodeContent,\n): NodeAbstract => {\n  const [type, attributes] = selectorToTokenizer(selector)\n  return {\n    _: marker,\n    a: attributes,\n    c: (\n      contents\n        ? Array.isArray(contents)\n          ? contents\n          : [contents] as NodeContent[]\n        : []\n    ),\n    t: type.toUpperCase(),\n  }\n}\n", "import {\n  node,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\n\nexport const childrenToNodes = (\n  element: Element | ChildNode,\n) => {\n  const abstractChildNodes: NodeContent[] = []\n  for (let i = 0; i < element.childNodes.length; i++) {\n    const childNode = element.childNodes[i]\n    if (childNode instanceof Text) {\n      abstractChildNodes.push(\n        childNode.textContent ?? ''\n      )\n    } else {\n      let attributes: NodeAttributes = {}\n      for (let i = 0; i < (childNode as Element).attributes.length; i++) {\n        const attribute = (childNode as Element).attributes[i]\n        attributes[attribute.name] = attribute.value\n      }\n\n      abstractChildNodes.push(\n        node(\n          childNode.nodeName,\n          attributes,\n          childrenToNodes(childNode),\n        )\n      )\n    }\n  }\n  return abstractChildNodes\n}\n", "import {\n  arrayify,\n} from '@doars/staark-common/src/array.js'\nimport {\n  childrenToNodes,\n} from '@doars/staark-common/src/element.js'\nimport {\n  NodeAbstract,\n  NodeAttributes,\n  NodeAttributeListener,\n  NodeContent,\n} from '@doars/staark-common/src/node.js'\n\nexport type PatchFunction = (\n  newAbstractTree: NodeContent[] | NodeContent,\n) => void\n\nconst MATCH_CAPITALS = /[A-Z]+(?![a-z])|[A-Z]/g\nconst HYPHENATE = (\n  part: string,\n  offset: number,\n) => (offset ? '-' : '') + part\n\nconst updateAttributes = (\n  element: Element,\n  newAttributes?: NodeAttributes,\n  oldAttributes?: NodeAttributes,\n): void => {\n  if (newAttributes) {\n    for (const name in newAttributes) {\n      let value = newAttributes[name]\n      if (value) {\n        const type = typeof (value)\n        if (type === 'function') {\n          if (\n            oldAttributes\n            && oldAttributes[name]\n          ) {\n            if (oldAttributes[name] === value) {\n              continue\n            } else {\n              element.removeEventListener(\n                name,\n                oldAttributes[name] as NodeAttributeListener,\n              )\n            }\n          }\n\n          element.addEventListener(\n            name,\n            value as NodeAttributeListener,\n          )\n        } else {\n          if (name === 'class') {\n            if (typeof (value) === 'object') {\n              if (Array.isArray(value)) {\n                value = value.join(' ')\n              } else {\n                let classNames: string = ''\n                for (const className in value) {\n                  if (value[className]) {\n                    classNames += ' ' + className\n                  }\n                }\n                value = classNames\n              }\n            }\n            element.className = value as string\n          } else if (\n            name === 'style'\n            && typeof (value) === 'object'\n          ) {\n            // Apply updated styles.\n            for (let styleName in value) {\n              let styleValue = (value as Record<string, boolean | string | null | undefined | number | (boolean | string | number)[]>)[styleName]\n\n              // Convert to kebab case.\n              styleName = styleName\n                .replace(MATCH_CAPITALS, HYPHENATE)\n                .toLowerCase()\n\n              if (Array.isArray(styleValue)) {\n                styleValue = styleValue.join(' ')\n              }\n\n              (element as HTMLElement).style.setProperty(\n                styleName,\n                styleValue as string,\n              )\n            }\n\n            // Remove old styles.\n            if (\n              oldAttributes\n              && oldAttributes[name]\n              && typeof (oldAttributes[name]) === 'object'\n              && !Array.isArray(oldAttributes[name])\n            ) {\n              for (let styleName in oldAttributes[name]) {\n                if (!(styleName in value)) {\n                  styleName = styleName\n                    .replace(MATCH_CAPITALS, HYPHENATE)\n                    .toLowerCase();\n\n                  (element as HTMLElement).style.removeProperty(\n                    styleName,\n                  )\n                }\n              }\n            }\n          } else {\n            // Ensure it is of type string.\n            if (type === 'boolean') {\n              if (!value) {\n                element.removeAttribute(name)\n                continue\n              }\n              value = 'true'\n            } else if (type !== 'string') {\n              value = value.toString()\n            }\n\n            if (\n              name === 'value'\n              && (element as HTMLInputElement).value !== value\n            ) {\n              // Update value separately as well.\n              (element as HTMLInputElement).value = value as string\n              // Don't dispatch a change event, the re-rendering should update everything: element.dispatchEvent(new Event('change'))\n            } else if (name === 'checked') {\n              (element as HTMLInputElement).checked = newAttributes[name] as boolean\n              // Don't dispatch a change event, the re-rendering should update everything: element.dispatchEvent(new Event('change'))\n            }\n\n            element.setAttribute(name, (value as string))\n          }\n        }\n      }\n    }\n  }\n\n  // Cleanup old attributes.\n  if (oldAttributes) {\n    for (const name in oldAttributes) {\n      if (\n        !newAttributes\n        || !newAttributes[name]\n      ) {\n        if (typeof (oldAttributes[name]) === 'function') {\n          element.removeEventListener(\n            name,\n            oldAttributes[name] as NodeAttributeListener,\n          )\n        } else if (name === 'class') {\n          element.className = ''\n        } else if (name === 'style') {\n          (((element as HTMLElement).style as unknown) as string) = ''\n        } else {\n          if (name === 'value') {\n            // Reset value separately.\n            (element as HTMLInputElement).value = ''\n            // Don't dispatch the input change event, the rerendering should update everything: element.dispatchEvent(new Event('change'))\n          } else if (name === 'checked') {\n            (element as HTMLInputElement).checked = false\n          }\n          element.removeAttribute(name)\n        }\n      }\n    }\n  }\n}\n\nexport const prepare = (\n  rootElement: HTMLElement | Element | string,\n  oldAbstractTree?: NodeContent[] | string,\n): PatchFunction => {\n  const updateElementTree = (\n    element: Element,\n    newChildAbstracts?: NodeContent[],\n    oldChildAbstracts?: NodeContent[],\n    elementAbstract?: NodeContent,\n  ): void => {\n    let newIndex = 0\n    let newCount = 0\n    if (newChildAbstracts) {\n      for (; newIndex < newChildAbstracts.length; newIndex++) {\n        const newAbstract = newChildAbstracts[newIndex]\n\n        // Try to find the matching old abstract.\n        let matched = false\n        if (oldChildAbstracts) {\n          for (let oldIndex = newIndex - newCount; oldIndex < oldChildAbstracts.length; oldIndex++) {\n            const oldAbstract = oldChildAbstracts[oldIndex];\n            if (\n              (\n                (oldAbstract as NodeAbstract).t\n                && (newAbstract as NodeAbstract).t === (oldAbstract as NodeAbstract).t\n              )\n              || (\n                !(oldAbstract as NodeAbstract).t\n                && !(newAbstract as NodeAbstract).t\n              )\n            ) {\n              matched = true\n\n              if (newIndex !== (oldIndex + newCount)) {\n                // Move node in dom.\n                element.insertBefore(\n                  element.childNodes[oldIndex + newCount],\n                  element.childNodes[newIndex],\n                )\n                // Move node in abstract tree.\n                oldChildAbstracts.splice(\n                  newIndex - newCount,\n                  0,\n                  ...oldChildAbstracts.splice(\n                    oldIndex,\n                    1,\n                  )\n                )\n              }\n\n              if ((newAbstract as NodeAbstract).t) {\n                updateAttributes(\n                  (element.childNodes[newIndex] as Element),\n                  (newAbstract as NodeAbstract).a,\n                  (oldAbstract as NodeAbstract).a,\n                )\n                updateElementTree(\n                  (element.childNodes[newIndex] as Element),\n                  (newAbstract as NodeAbstract).c,\n                  (oldAbstract as NodeAbstract).c,\n                  oldAbstract,\n                )\n              } else if (oldAbstract !== newAbstract) {\n                element.childNodes[newIndex].textContent = newAbstract as string\n              }\n              break\n            }\n          }\n        }\n\n        if (!matched) {\n          let childElement: Element | string\n          if ((newAbstract as NodeAbstract).t) {\n            childElement = document.createElement(\n              (newAbstract as NodeAbstract).t\n            )\n\n            if ((newAbstract as NodeAbstract).a) {\n              updateAttributes(\n                childElement,\n                (newAbstract as NodeAbstract).a,\n              )\n            }\n            if ((newAbstract as NodeAbstract).c) {\n              updateElementTree(\n                childElement,\n                (newAbstract as NodeAbstract).c,\n              )\n            }\n\n            const insertAdjacentElement = (\n              element: Node,\n              elementAbstract?: NodeContent | null,\n              position?: InsertPosition,\n            ) => {\n              if (\n                position &&\n                (\n                  !elementAbstract\n                  || (elementAbstract as NodeAbstract).t\n                )\n              ) {\n                (element as Element)\n                  .insertAdjacentElement(\n                    position,\n                    childElement as Element,\n                  )\n              } else {\n                // Otherwise the position is always 'beforebegin'.\n                (element.parentNode as Element)\n                  .insertBefore(\n                    childElement as Element,\n                    element,\n                  )\n              }\n            }\n            if (newIndex === 0) {\n              insertAdjacentElement(\n                element,\n                elementAbstract,\n                'afterbegin',\n              )\n            } else if ((oldChildAbstracts?.length ?? 0) + newCount > newIndex) {\n              insertAdjacentElement(\n                (element.childNodes[newIndex] as Node),\n                // (oldChildAbstracts as NodeContent[])[newIndex + newCount],\n                // 'beforebegin',\n              )\n            } else {\n              insertAdjacentElement(\n                element,\n                elementAbstract,\n                'beforeend',\n              )\n            }\n          } else {\n            const insertAdjacentText = (\n              element: Node,\n              elementAbstract?: NodeContent | null,\n              position?: InsertPosition,\n            ) => {\n              if (\n                position &&\n                (\n                  !elementAbstract\n                  || (elementAbstract as NodeAbstract).t\n                )\n              ) {\n                (element as Element)\n                  .insertAdjacentText(\n                    position,\n                    newAbstract as string,\n                  )\n              } else {\n                // Otherwise the position is always 'beforebegin'.\n                (element.parentNode as Element)\n                  .insertBefore(\n                    document.createTextNode(newAbstract as string),\n                    element,\n                  )\n              }\n            }\n            if (newIndex === 0) {\n              insertAdjacentText(\n                element,\n                elementAbstract,\n                'afterbegin',\n              )\n            } else if ((oldChildAbstracts?.length ?? 0) + newCount > newIndex) {\n              insertAdjacentText(\n                element.childNodes[newIndex] as Node,\n                // (oldChildAbstracts as NodeContent[])[newIndex + newCount],\n                // 'beforebegin',\n              )\n            } else {\n              insertAdjacentText(\n                element,\n                elementAbstract,\n                'beforeend',\n              )\n            }\n          }\n          newCount++\n        }\n      }\n    }\n\n    // Remove old elements.\n    const elementLength = (oldChildAbstracts?.length ?? 0) + newCount\n    if (elementLength >= newIndex) {\n      for (let i = elementLength - 1; i >= newIndex; i--) {\n        element.childNodes[i].remove()\n      }\n    }\n  }\n\n  const _rootElement = (\n    typeof (rootElement) === 'string'\n      ? (\n        document.querySelector(rootElement)\n        || document.body.appendChild(\n          document.createElement('div')\n        )\n      )\n      : rootElement\n  )\n\n  if (typeof (oldAbstractTree) === 'string') {\n    try {\n      oldAbstractTree = JSON.parse(oldAbstractTree) as NodeContent[]\n    } catch (error) {\n      oldAbstractTree = undefined\n    }\n  }\n  oldAbstractTree ??= childrenToNodes(_rootElement)\n\n  return (\n    newAbstractTree: NodeContent[] | NodeContent,\n  ): void => {\n    newAbstractTree = arrayify(newAbstractTree)\n    updateElementTree(\n      _rootElement,\n      newAbstractTree,\n      oldAbstractTree as NodeContent[],\n    )\n    oldAbstractTree = newAbstractTree\n  }\n}\n"],
  "mappings": "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",
  "names": ["i", "element", "elementAbstract"]
}
