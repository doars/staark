{
  "version": 3,
  "sources": ["../../staark-common/src/array.js", "../../staark-common/src/marker.js", "../../staark-common/src/node.js", "../../staark-common/src/element.js", "../src/library/patch.js"],
  "sourcesContent": ["/**\n * Ensure the data is an array if it isn't already. Non-truthy values are converted to empty arrays.\n *\n * @template T\n * @param {T|T[]} data - Data to \"arrify\".\n * @returns {T[]} An array containing the data.\n */\nexport const arrayify = (\n  data,\n) => arrayifyOrUndefined(data) || []\n\n/**\n * Ensure the data is an array if it isn't already. Non-truthy values are converted to undefined.\n *\n * @template T\n * @param {T|T[]} data - Data to \"arrify\".\n * @returns {(T[]|undefined)} An array containing the data or undefined.\n */\nexport const arrayifyOrUndefined = (\n  data,\n) => data ? (\n  Array.isArray(data)\n    ? data\n    : [data]\n) : undefined\n", "export const marker = 'n'\n", "import { arrayifyOrUndefined } from './array.js'\nimport { marker } from './marker.js'\n\n/**\n * @typedef {import('./memo.js').MemoAbstract} MemoAbstract\n */\n\n/**\n * @typedef {function(Event, Record<string, any>): unknown} NodeAttributeListener\n * @property {function(Event, Record<string, any>): unknown} [f]\n */\n\n/**\n * @typedef {Object.<string, boolean | null | number | string | (number | string)[] | NodeAttributeListener | Record<string, boolean | number | string>>} NodeAttributes\n */\n\n/**\n * @typedef {string | MemoAbstract | NodeAbstract} NodeContent\n */\n\n/**\n * @typedef {Object} NodeAbstract\n * @property {string} _ - Discriminator\n * @property {NodeAttributes} [a] - Attributes\n * @property {NodeContent[]} [c] - Content\n * @property {string} t - Node type\n */\n\n/**\n * @param {string} type\n * @param {NodeAttributes | NodeContent[] | NodeContent} [attributesOrContents]\n * @param {NodeContent[] | NodeContent} [contents]\n * @returns {NodeAbstract}\n */\nexport const node = (\n  type,\n  attributesOrContents,\n  contents,\n) => {\n  if (\n    typeof (attributesOrContents) !== 'object'\n    || attributesOrContents._ === marker\n    || Array.isArray(attributesOrContents)\n  ) {\n    contents = attributesOrContents\n    attributesOrContents = undefined\n  }\n\n  return {\n    _: marker,\n    a: attributesOrContents,\n    c: arrayifyOrUndefined(contents),\n    t: type.toUpperCase(),\n  }\n}\n", "import {\n  node,\n} from './node.js'\n\n/**\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * @typedef {Object} Attribute\n * @property {string} name\n * @property {string} value\n */\n\n/**\n * Converts child nodes of an element to an array of abstract nodes.\n * @param {Element | ChildNode} element\n * @returns {NodeContent[]}\n */\nexport const childrenToNodes = (\n  element,\n) => {\n  const abstractChildNodes = []\n  for (const childNode of element.childNodes) {\n    if (childNode instanceof Text) {\n      abstractChildNodes.push(\n        childNode.textContent ?? '',\n      )\n    } else {\n      const attributes = {}\n      for (const attribute of childNode.attributes) {\n        attributes[attribute.name] = attribute.value\n      }\n\n      abstractChildNodes.push(\n        node(\n          childNode.nodeName,\n          attributes,\n          childrenToNodes(childNode),\n        ),\n      )\n    }\n  }\n  return abstractChildNodes\n}\n", "import {\n  arrayifyOrUndefined,\n} from '@doars/staark-common/src/array.js'\nimport {\n  childrenToNodes,\n} from '@doars/staark-common/src/element.js'\n\n/**\n * @typedef {import('@doars/staark-common/src/node.js').NodeContent} NodeContent\n * @typedef {import('@doars/staark-common/src/node.js').NodeAttributes} NodeAttributes\n * @typedef {import('@doars/staark-common/src/node.js').NodeAttributeListener} NodeAttributeListener\n * @typedef {import('@doars/staark-common/src/node.js').NodeAbstract} NodeAbstract\n */\n\n/**\n * @param {Element} element\n * @param {NodeAttributes} newAttributes\n * @param {NodeAttributes} [oldAttributes]\n */\nconst updateAttributes = (\n  element,\n  newAttributes,\n  oldAttributes,\n) => {\n  if (newAttributes) {\n    for (const name in newAttributes) {\n      let value = newAttributes[name]\n      if (value) {\n        const type = typeof (value)\n        if (type === 'function') {\n          const oldValue = oldAttributes?.[name]\n          if (oldValue !== value) {\n            if (oldValue) {\n              element.removeEventListener(\n                name,\n                oldValue,\n              )\n            }\n\n            element.addEventListener(\n              name,\n              value,\n            )\n          }\n        } else {\n          if (name === 'class') {\n            if (typeof (value) === 'object') {\n              if (Array.isArray(value)) {\n                value = value.join(' ')\n              } else {\n                let classNames = ''\n                for (const className in value) {\n                  if (value[className]) {\n                    classNames += ' ' + className\n                  }\n                }\n                value = classNames\n              }\n            }\n            element.className = value\n          } else if (\n            name === 'style'\n            && typeof (value) === 'object'\n          ) {\n            // Apply updated styles.\n            for (let styleName in value) {\n              let styleValue = value[styleName]\n              if (styleName.includes('-', 1)) {\n                element.style.setProperty(\n                  styleName,\n                  styleValue,\n                )\n              } else {\n                // @ts-ignore\n                element.style[styleName] = styleValue\n              }\n            }\n\n            // Remove old styles.\n            if (\n              oldAttributes\n              && oldAttributes[name]\n              && typeof (oldAttributes[name]) === 'object'\n              && !Array.isArray(oldAttributes[name])\n            ) {\n              for (let styleName in oldAttributes[name]) {\n                if (!(styleName in value)) {\n                  if (styleName.includes('-')) {\n                    element.style.removeProperty(\n                      styleName,\n                    )\n                  } else {\n                    // @ts-ignore\n                    delete element.style[styleName]\n                  }\n                }\n              }\n            }\n          } else {\n            // Ensure it is of type string.\n            if (value === true) {\n              value = 'true'\n            } else if (type !== 'string') {\n              value = value.toString()\n            }\n\n            element.setAttribute(name, value)\n          }\n        }\n      }\n    }\n  }\n\n  // Cleanup old attributes.\n  if (oldAttributes) {\n    for (const name in oldAttributes) {\n      if (\n        !newAttributes\n        || !newAttributes[name]\n      ) {\n        if (typeof (oldAttributes[name]) === 'function') {\n          element.removeEventListener(\n            name,\n            oldAttributes[name]\n          )\n        } else if (name === 'class') {\n          element.className = ''\n        } else if (name === 'style') {\n          element.style.cssText = ''\n        } else if (name === 'value') {\n          element.value = ''\n          // Don't dispatch the input change event, the rerendering should update everything: element.dispatchEvent(new Event('change'))\n        } else {\n          element.removeAttribute(name)\n        }\n      }\n    }\n  }\n}\n\n/**\n * @param {Element} element\n * @param {NodeContent[]} [newChildAbstracts]\n * @param {NodeContent[]} [oldChildAbstracts]\n */\nconst updateChildren = (\n  element,\n  newChildAbstracts,\n  oldChildAbstracts,\n) => {\n  let newIndex = 0\n  let newCount = 0\n  if (newChildAbstracts) {\n    for (; newIndex < newChildAbstracts.length; newIndex++) {\n      const newAbstract = newChildAbstracts[newIndex]\n\n      // Try to find the matching old abstract.\n      let matched = false\n      if (oldChildAbstracts) {\n        for (let oldIndex = newIndex - newCount; oldIndex < oldChildAbstracts.length; oldIndex++) {\n          const oldAbstract = oldChildAbstracts[oldIndex]\n          if (\n            (\n              oldAbstract.t\n              && newAbstract.t === oldAbstract.t\n            )\n            || (\n              !oldAbstract.t\n              && !newAbstract.t\n            )\n          ) {\n            matched = true\n\n            if (newIndex !== (oldIndex + newCount)) {\n              // Move node in dom.\n              element.insertBefore(\n                element.childNodes[oldIndex + newCount],\n                element.childNodes[newIndex],\n              )\n              // Move node in abstract tree. TODO: Remove this pesky splicing so the old abstract tree is not mutated.\n              oldChildAbstracts.splice(\n                newIndex - newCount,\n                0,\n                oldChildAbstracts.splice(\n                  oldIndex,\n                  1,\n                )[0],\n              )\n            }\n\n            if (newAbstract.t) {\n              updateAttributes(\n                element.childNodes[newIndex],\n                newAbstract.a,\n                oldAbstract.a,\n              )\n              updateChildren(\n                element.childNodes[newIndex],\n                newAbstract.c,\n                oldAbstract.c,\n              )\n            } else if (oldAbstract !== newAbstract) {\n              element.childNodes[newIndex].textContent = newAbstract\n            }\n            break\n          }\n        }\n      }\n\n      if (!matched) {\n        let newNode\n        if (newAbstract.t) {\n          newNode = document.createElement(\n            newAbstract.t,\n          )\n          updateAttributes(\n            newNode,\n            newAbstract.a,\n          )\n          updateChildren(\n            newNode,\n            newAbstract.c,\n          )\n        } else {\n          newNode = document.createTextNode(\n            newAbstract,\n          )\n        }\n\n        element.insertBefore(\n          newNode,\n          element.childNodes[newIndex],\n        )\n        newCount++\n      }\n    }\n  }\n\n  // Remove old elements.\n  if (oldChildAbstracts) {\n    const elementLength = oldChildAbstracts.length + newCount\n    if (elementLength >= newIndex) {\n      for (let i = elementLength - 1; i >= newIndex; i--) {\n        element.childNodes[i].remove()\n      }\n    }\n  }\n}\n\n/**\n * @param {HTMLElement | Element | string} rootElement\n * @param {NodeContent[] | string | null} [oldAbstractTree]\n * @returns {function(NodeContent[] | NodeContent): unknown}\n */\nexport const prepare = (\n  rootElement,\n  oldAbstractTree,\n) => {\n  const _rootElement = (\n    typeof (rootElement) === 'string'\n      ? (\n        document.querySelector(rootElement)\n        || document.body.appendChild(\n          document.createElement('div')\n        )\n      )\n      : rootElement\n  )\n\n  if (typeof (oldAbstractTree) === 'string') {\n    try {\n      oldAbstractTree = JSON.parse(oldAbstractTree)\n    } catch (error) {\n      oldAbstractTree = null\n    }\n  }\n  if (!oldAbstractTree) {\n    oldAbstractTree = childrenToNodes(_rootElement)\n  }\n\n  return (\n    newAbstractTree\n  ) => {\n    newAbstractTree = arrayifyOrUndefined(newAbstractTree)\n    updateChildren(\n      _rootElement,\n      newAbstractTree,\n      oldAbstractTree,\n    )\n    oldAbstractTree = newAbstractTree\n  }\n}\n"],
  "mappings": "AAkBO,IAAMA,EACXC,GACGA,EACH,MAAM,QAAQA,CAAI,EACdA,EACA,CAACA,CAAI,EACP,OCxBG,IAAMC,EAAS,ICkCf,IAAMC,EAAO,CAClBC,EACAC,EACAC,MAGE,OAAQD,GAA0B,UAC/BA,EAAqB,IAAME,GAC3B,MAAM,QAAQF,CAAoB,KAErCC,EAAWD,EACXA,EAAuB,QAGlB,CACL,EAAGE,EACH,EAAGF,EACH,EAAGG,EAAoBF,CAAQ,EAC/B,EAAGF,EAAK,YAAY,CACtB,GClCK,IAAMK,EACXC,GACG,CArBL,IAAAC,EAsBE,IAAMC,EAAqB,CAAC,EAC5B,QAAWC,KAAaH,EAAQ,WAC9B,GAAIG,aAAqB,KACvBD,EAAmB,MACjBD,EAAAE,EAAU,cAAV,KAAAF,EAAyB,EAC3B,MACK,CACL,IAAMG,EAAa,CAAC,EACpB,QAAWC,KAAaF,EAAU,WAChCC,EAAWC,EAAU,IAAI,EAAIA,EAAU,MAGzCH,EAAmB,KACjBI,EACEH,EAAU,SACVC,EACAL,EAAgBI,CAAS,CAC3B,CACF,CACF,CAEF,OAAOD,CACT,ECzBA,IAAMK,EAAmB,CACvBC,EACAC,EACAC,IACG,CACH,GAAID,EACF,QAAWE,KAAQF,EAAe,CAChC,IAAIG,EAAQH,EAAcE,CAAI,EAC9B,GAAIC,EAAO,CACT,IAAMC,EAAO,OAAQD,EACrB,GAAIC,IAAS,WAAY,CACvB,IAAMC,EAAWJ,GAAA,YAAAA,EAAgBC,GAC7BG,IAAaF,IACXE,GACFN,EAAQ,oBACNG,EACAG,CACF,EAGFN,EAAQ,iBACNG,EACAC,CACF,EAEJ,SACMD,IAAS,QAAS,CACpB,GAAI,OAAQC,GAAW,SACrB,GAAI,MAAM,QAAQA,CAAK,EACrBA,EAAQA,EAAM,KAAK,GAAG,MACjB,CACL,IAAIG,EAAa,GACjB,QAAWC,KAAaJ,EAClBA,EAAMI,CAAS,IACjBD,GAAc,IAAMC,GAGxBJ,EAAQG,CACV,CAEFP,EAAQ,UAAYI,CACtB,SACED,IAAS,SACN,OAAQC,GAAW,SACtB,CAEA,QAASK,KAAaL,EAAO,CAC3B,IAAIM,EAAaN,EAAMK,CAAS,EAC5BA,EAAU,SAAS,IAAK,CAAC,EAC3BT,EAAQ,MAAM,YACZS,EACAC,CACF,EAGAV,EAAQ,MAAMS,CAAS,EAAIC,CAE/B,CAGA,GACER,GACGA,EAAcC,CAAI,GAClB,OAAQD,EAAcC,CAAI,GAAO,UACjC,CAAC,MAAM,QAAQD,EAAcC,CAAI,CAAC,EAErC,QAASM,KAAaP,EAAcC,CAAI,EAChCM,KAAaL,IACbK,EAAU,SAAS,GAAG,EACxBT,EAAQ,MAAM,eACZS,CACF,EAGA,OAAOT,EAAQ,MAAMS,CAAS,EAKxC,MAEML,IAAU,GACZA,EAAQ,OACCC,IAAS,WAClBD,EAAQA,EAAM,SAAS,GAGzBJ,EAAQ,aAAaG,EAAMC,CAAK,CAGtC,CACF,CAIF,GAAIF,EACF,QAAWC,KAAQD,GAEf,CAACD,GACE,CAACA,EAAcE,CAAI,KAElB,OAAQD,EAAcC,CAAI,GAAO,WACnCH,EAAQ,oBACNG,EACAD,EAAcC,CAAI,CACpB,EACSA,IAAS,QAClBH,EAAQ,UAAY,GACXG,IAAS,QAClBH,EAAQ,MAAM,QAAU,GACfG,IAAS,QAClBH,EAAQ,MAAQ,GAGhBA,EAAQ,gBAAgBG,CAAI,EAKtC,EAOMQ,EAAiB,CACrBX,EACAY,EACAC,IACG,CACH,IAAIC,EAAW,EACXC,EAAW,EACf,GAAIH,EACF,KAAOE,EAAWF,EAAkB,OAAQE,IAAY,CACtD,IAAME,EAAcJ,EAAkBE,CAAQ,EAG1CG,EAAU,GACd,GAAIJ,EACF,QAASK,EAAWJ,EAAWC,EAAUG,EAAWL,EAAkB,OAAQK,IAAY,CACxF,IAAMC,EAAcN,EAAkBK,CAAQ,EAC9C,GAEIC,EAAY,GACTH,EAAY,IAAMG,EAAY,GAGjC,CAACA,EAAY,GACV,CAACH,EAAY,EAElB,CACAC,EAAU,GAENH,IAAcI,EAAWH,IAE3Bf,EAAQ,aACNA,EAAQ,WAAWkB,EAAWH,CAAQ,EACtCf,EAAQ,WAAWc,CAAQ,CAC7B,EAEAD,EAAkB,OAChBC,EAAWC,EACX,EACAF,EAAkB,OAChBK,EACA,CACF,EAAE,CAAC,CACL,GAGEF,EAAY,GACdjB,EACEC,EAAQ,WAAWc,CAAQ,EAC3BE,EAAY,EACZG,EAAY,CACd,EACAR,EACEX,EAAQ,WAAWc,CAAQ,EAC3BE,EAAY,EACZG,EAAY,CACd,GACSA,IAAgBH,IACzBhB,EAAQ,WAAWc,CAAQ,EAAE,YAAcE,GAE7C,KACF,CACF,CAGF,GAAI,CAACC,EAAS,CACZ,IAAIG,EACAJ,EAAY,GACdI,EAAU,SAAS,cACjBJ,EAAY,CACd,EACAjB,EACEqB,EACAJ,EAAY,CACd,EACAL,EACES,EACAJ,EAAY,CACd,GAEAI,EAAU,SAAS,eACjBJ,CACF,EAGFhB,EAAQ,aACNoB,EACApB,EAAQ,WAAWc,CAAQ,CAC7B,EACAC,GACF,CACF,CAIF,GAAIF,EAAmB,CACrB,IAAMQ,EAAgBR,EAAkB,OAASE,EACjD,GAAIM,GAAiBP,EACnB,QAASQ,EAAID,EAAgB,EAAGC,GAAKR,EAAUQ,IAC7CtB,EAAQ,WAAWsB,CAAC,EAAE,OAAO,CAGnC,CACF,EAOaC,EAAU,CACrBC,EACAC,IACG,CACH,IAAMC,EACJ,OAAQF,GAAiB,SAErB,SAAS,cAAcA,CAAW,GAC/B,SAAS,KAAK,YACf,SAAS,cAAc,KAAK,CAC9B,EAEAA,EAGN,GAAI,OAAQC,GAAqB,SAC/B,GAAI,CACFA,EAAkB,KAAK,MAAMA,CAAe,CAC9C,OAASE,EAAO,CACdF,EAAkB,IACpB,CAEF,OAAKA,IACHA,EAAkBG,EAAgBF,CAAY,GAI9CG,GACG,CACHA,EAAkBC,EAAoBD,CAAe,EACrDlB,EACEe,EACAG,EACAJ,CACF,EACAA,EAAkBI,CACpB,CACF",
  "names": ["arrayifyOrUndefined", "data", "marker", "node", "type", "attributesOrContents", "contents", "marker", "arrayifyOrUndefined", "childrenToNodes", "element", "_a", "abstractChildNodes", "childNode", "attributes", "attribute", "node", "updateAttributes", "element", "newAttributes", "oldAttributes", "name", "value", "type", "oldValue", "classNames", "className", "styleName", "styleValue", "updateChildren", "newChildAbstracts", "oldChildAbstracts", "newIndex", "newCount", "newAbstract", "matched", "oldIndex", "oldAbstract", "newNode", "elementLength", "i", "prepare", "rootElement", "oldAbstractTree", "_rootElement", "error", "childrenToNodes", "newAbstractTree", "arrayifyOrUndefined"]
}
