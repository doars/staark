{
  "version": 3,
  "sources": ["../../../.scripts/iife.js", "../../staark-common/src/array.js", "../../staark-common/src/conditional.js", "../../staark-common/src/marker.js", "../../staark-common/src/node.js", "../../staark-common/src/factory.js", "../../staark-common/src/selector.js", "../../staark-common/src/fctory.js", "../../staark-common/src/identifier.js", "../../staark-common/src/match.js", "../../staark-common/src/nde.js", "../../staark-common/src/element.js", "../src/library/patch.js", "../src/index.iife.js"],
  "sourcesContent": ["/**\n * @param {Array<string>} path\n * @param {any} data\n */\nexport const iife = (\n  path,\n  data,\n) => {\n  let subject = window\n  for (let i = 0; i < path.length - 1; i++) {\n    if (\n      typeof (subject[path[i]]) !== 'object'\n      || !Array.isArray(subject[path[i]])\n    ) {\n      subject[path[i]] = {}\n    }\n    subject = subject[path[i]]\n  }\n  subject[path[path.length - 1]] = data\n}\n", "/**\n * Ensure the data is an array if it isn't already. Non-truthy values are converted to empty arrays.\n *\n * @template T\n * @param {T|T[]} data Data to \"arrify\".\n * @returns {T[]} An array containing the data.\n */\nexport const arrayify = (\n  data,\n) => arrayifyOrUndefined(data) || []\n\n/**\n * Ensure the data is an array if it isn't already. Non-truthy values are converted to undefined.\n *\n * @template T\n * @param {T|T[]} data Data to arrify.\n * @returns {(T[]|undefined)} An array containing the data or undefined.\n */\nexport const arrayifyOrUndefined = (\n  data,\n) => data ? (\n  Array.isArray(data)\n    ? data\n    : [data]\n) : undefined\n", "import { arrayify } from './array.js'\n\n/**\n * @typedef {import('./node.js').NodeContent} NodeContent\n * @typedef {import('./types.js').ResolveFunction} ResolveFunction\n */\n\n/**\n * Returns the content based on the condition.\n *\n * @param {any} condition The condition to evaluate.\n * @param {NodeContent[] | NodeContent | ResolveFunction} onTruth The content to return if the condition is true.\n * @param {NodeContent[] | NodeContent | ResolveFunction} [onFalse] The content to return if the condition is false.\n * @returns {NodeContent[]} The resulting content as an array.\n */\nexport const conditional = (\n  condition,\n  onTruth,\n  onFalse,\n) => {\n  let result = (\n    condition\n      ? onTruth\n      : onFalse\n  )\n  if (typeof (result) === 'function') {\n    result = result()\n  }\n  return arrayify(result)\n}\n", "/**\n * @type {string} Marker that can be used as a node discriminator.\n */\nexport const marker = 'n'\n", "import { arrayifyOrUndefined } from './array.js'\nimport { marker } from './marker.js'\n\n/**\n * @typedef {import('./memo.js').MemoAbstract} MemoAbstract\n */\n\n/**\n * @typedef {function(Event, Record<string, any>): unknown} NodeAttributeListener Listener for node attribute.\n * @property {function(Event, Record<string, any>): unknown} [f] Function that was written to the DOM tree before being wrapped so it can be compared to.\n */\n\n/**\n * @typedef {Object.<string, boolean | null | number | string | (number | string)[] | NodeAttributeListener | Record<string, boolean | number | string>>} NodeAttributes Attributes of a node.\n */\n\n/**\n * @typedef {string | MemoAbstract | NodeAbstract} NodeContent Content of a node.\n */\n\n/**\n * @typedef {Object} NodeAbstract Node abstract.\n * @property {string} _ Discriminator to differentiate from other objects.\n * @property {NodeAttributes} [a] Attributes of the node.\n * @property {NodeContent[]} [c] Abstracts of children.\n * @property {string} t Node type of the node.\n */\n\n/**\n * Creates a NodeAbstract object.\n *\n * @param {string} type Type of the node.\n * @param {NodeAttributes | NodeContent[] | NodeContent} [attributesOrContents] Attributes of node or contents.\n * @param {NodeContent[] | NodeContent} [contents] Abstracts of children.\n * @returns {NodeAbstract} Node abstract representing the given data.\n */\nexport const node = (\n  type,\n  attributesOrContents,\n  contents,\n) => {\n  if (\n    typeof (attributesOrContents) !== 'object'\n    || attributesOrContents._ === marker\n    || Array.isArray(attributesOrContents)\n  ) {\n    contents = attributesOrContents\n    attributesOrContents = undefined\n  }\n\n  return {\n    _: marker,\n    a: attributesOrContents,\n    c: arrayifyOrUndefined(contents),\n    t: type.toUpperCase(),\n  }\n}\n", "import {\n  node,\n} from './node.js'\n\n/**\n * @typedef {import('./node.js').NodeAbstract} NodeAbstract\n * @typedef {import('./node.js').NodeAttributes} NodeAttributes\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * @typedef {Function} Factory Function that generates the a node with the given type.\n * @param {NodeAttributes | NodeContent[] | NodeContent} [attributesOrContents] Attributes of node or contents.\n * @param {NodeContent[] | NodeContent} [contents] Abstracts of children.\n * @returns {NodeAbstract} Node abstract representing the given data.\n */\n\n/**\n * @typedef {Object} FactoryCache Factory cache\n */\n\nexport const factory = new Proxy({}, {\n  /**\n   * @param {FactoryCache} target Factory cache.\n   * @param {string} type Type of the nodes to generate.\n   * @returns {Factory} Function that generates the a node with the given type.\n   */\n  get: (\n    target,\n    type,\n  ) => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      attributesOrContents,\n      contents,\n    ) => node(\n      typeConverted,\n      attributesOrContents,\n      contents,\n    )\n  },\n})\n", "const BRACKET_CLOSE = ']'\nconst BRACKET_OPEN = '['\nconst DOT = '.'\nconst EQUAL = '='\nconst HASH = '#'\nconst QUOTE_SINGLE = '\\''\nconst QUOTE_DOUBLE = '\"'\n\n/**\n * @enum {number} TokenTypes.\n */\nconst TokenTypes = {\n  attribute: 0,\n  class: 1,\n  id: 2,\n  type: 3,\n}\n\n/**\n * @typedef {Object.<string, any>} Attributes Attributes.\n */\n\n/**\n * Tokenize a selector into a type and its attributes.\n *\n * @param {string} selector Selector to tokenize.\n * @returns {[string, Attributes]} Node type and attributes.\n */\nexport const selectorToTokenizer = (\n  selector,\n) => {\n  const length = selector.length\n  let i = 0\n\n  let type = ''\n  /** @type {Attributes} */\n  const attributes = {}\n\n  let tokenA = ''\n  let tokenB = true\n  let tokenType = TokenTypes.type\n  const storeToken = () => {\n    if (tokenA) {\n      switch (tokenType) {\n        case TokenTypes.attribute:\n          attributes[tokenA] = (\n            tokenB === true\n              ? true\n              : tokenB\n          )\n          tokenB = true\n          break\n\n        case TokenTypes.class:\n          if (!attributes.class) {\n            attributes.class = tokenA\n            break\n          }\n          attributes.class += ' ' + tokenA\n          break\n\n        case TokenTypes.id:\n          attributes.id = tokenA\n          break\n\n        case TokenTypes.type:\n          type = tokenA\n          break\n      }\n      tokenA = ''\n    }\n  }\n\n  let character\n\n  let attributeBracketCount\n  const parseAttribute = () => {\n    attributeBracketCount = 0\n\n    while (i < length) {\n      character = selector[i]\n      i++\n      if (character === EQUAL) {\n        // Parse attribute value.\n        tokenB = ''\n        character = selector[i]\n        const endOnDoubleQuote = character === QUOTE_DOUBLE\n        const endOnSingleQuote = character === QUOTE_SINGLE\n        if (\n          endOnDoubleQuote\n          || endOnSingleQuote\n        ) {\n          tokenB += character\n          i++\n        }\n\n        while (i < length) {\n          character = selector[i]\n          if (\n            (\n              endOnDoubleQuote\n              && character === QUOTE_DOUBLE\n            )\n            || (\n              endOnSingleQuote\n              && character === QUOTE_SINGLE\n            )\n          ) {\n            tokenB += character\n            i++\n            break\n          } else if (\n            !endOnDoubleQuote\n            && !endOnSingleQuote\n            && character === BRACKET_CLOSE\n          ) {\n            break\n          }\n          tokenB += character\n          i++\n        }\n\n        if (\n          (\n            tokenB[0] === QUOTE_DOUBLE\n            && tokenB[tokenB.length - 1] === QUOTE_DOUBLE\n          ) ||\n          (\n            tokenB[0] === QUOTE_SINGLE\n            && tokenB[tokenB.length - 1] === QUOTE_SINGLE\n          )\n        ) {\n          tokenB = tokenB.substring(1, tokenB.length - 1)\n        }\n\n        // Consume until closing bracket, but don't store the tokens since these are invalid.\n        while (i < length) {\n          character = selector[i]\n          i++\n          if (character === BRACKET_CLOSE) {\n            break\n          }\n        }\n        break\n      } else if (character === BRACKET_OPEN) {\n        attributeBracketCount++\n        continue\n      } else if (character === BRACKET_CLOSE) {\n        attributeBracketCount--\n        if (attributeBracketCount < 0) {\n          break\n        }\n        continue\n      }\n\n      tokenA += character\n    }\n    storeToken()\n  }\n\n  while (i < length) {\n    character = selector[i]\n    i++\n\n    if (character === HASH) {\n      storeToken()\n      tokenType = TokenTypes.id\n      continue\n    } else if (character === DOT) {\n      storeToken()\n      tokenType = TokenTypes.class\n      continue\n    } else if (character === BRACKET_OPEN) {\n      storeToken()\n      tokenType = TokenTypes.attribute\n      parseAttribute()\n      continue\n    }\n\n    tokenA += character\n  }\n\n  return [type, attributes]\n}\n", "import {\n  node,\n} from './node.js'\nimport {\n  selectorToTokenizer,\n} from './selector.js'\n\n/**\n * @typedef {import('./node.js').NodeAbstract} NodeAbstract\n * @typedef {import('./node.js').NodeAttributes} NodeAttributes\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * @typedef {function(string=, NodeContent[]|NodeContent=): NodeAbstract} Fctory Function that generates the a node with the given type.\n */\n\n/**\n * @typedef {Object<string, Fctory>} FctoryCache Factory cache.\n */\n\nexport const fctory = new Proxy({}, {\n  /**\n   * @param {FctoryCache} target Factory cache.\n   * @param {string} type Type of the nodes to generate.\n   * @returns {Fctory} Function that generates the a node with the given type.\n   */\n  get: (target, type) => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      selector,\n      contents,\n    ) => {\n      let attributes\n      if (selector) {\n        const [_, _attributes] = selectorToTokenizer(selector)\n        attributes = _attributes\n      }\n      return node(\n        typeConverted,\n        attributes,\n        contents,\n      )\n    }\n  },\n})\n", "let identifierCount = 0\n\n/**\n * Generates a unique identifier with a given prefix.\n * @param {string} prefix The prefix for the identifier.\n * @returns {string} The generated identifier.\n */\nexport const identifier = (\n  prefix,\n) => prefix + '-' + (identifierCount++)\n", "import { arrayify } from './array.js'\n\n/**\n * @typedef {import('./node.js').NodeContent} NodeContent\n * @typedef {import('./types.js').ResolveFunction} ResolveFunction\n */\n\n/**\n * Matches a key to a value in a lookup table, with a fallback option.\n *\n * @param {any} key The key to match.\n * @param {Record<any, NodeContent[] | NodeContent | ResolveFunction | null | undefined>} lookup The lookup table.\n * @param {NodeContent[] | NodeContent | ResolveFunction | null} [fallback] The fallback value.\n * @returns {NodeContent[]} The matched or fallback value, arrayified.\n */\nexport const match = (\n  key,\n  lookup,\n  fallback,\n) => {\n  let result\n  if (\n    lookup\n    && (key in lookup)\n    && lookup[key]\n  ) {\n    result = lookup[key]\n  } else {\n    result = fallback\n  }\n  if (typeof result === 'function') {\n    result = result()\n  }\n  return arrayify(result)\n}\n", "import { arrayifyOrUndefined } from './array.js'\nimport { marker } from './marker.js'\nimport { selectorToTokenizer } from './selector.js'\n\n/**\n * @typedef {import('./node.js').NodeAbstract} NodeAbstract\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * Creates a NodeAbstract object from a selector and contents.\n *\n * @param {string} selector The selector string.\n * @param {NodeContent[] | NodeContent} [contents] Abstracts of children.\n * @returns {NodeAbstract} Node abstract representing the given data.\n */\nexport const nde = (\n  selector,\n  contents,\n) => {\n  const [type, attributes] = selectorToTokenizer(selector)\n\n  return {\n    _: marker,\n    a: attributes,\n    c: arrayifyOrUndefined(contents),\n    t: type.toUpperCase(),\n  }\n}\n", "import {\n  node,\n} from './node.js'\n\n/**\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * @typedef {Object} Attribute An attribute of an element.\n * @property {string} name The name of the attribute.\n * @property {string} value The value of the attribute.\n */\n\n/**\n * Converts child nodes of an element to an array of abstract nodes.\n * @param {Element | ChildNode} element The element to convert.\n * @returns {NodeContent[]} The abstract nodes that are equivalent to the given element's child nodes.\n */\nexport const childrenToNodes = (\n  element,\n) => {\n  const abstractChildNodes = []\n  for (const childNode of element.childNodes) {\n    if (childNode instanceof Text) {\n      abstractChildNodes.push(\n        childNode.textContent ?? '',\n      )\n    } else {\n      const attributes = {}\n      for (const attribute of childNode.attributes) {\n        attributes[attribute.name] = attribute.value\n      }\n\n      abstractChildNodes.push(\n        node(\n          childNode.nodeName,\n          attributes,\n          childrenToNodes(childNode),\n        ),\n      )\n    }\n  }\n  return abstractChildNodes\n}\n", "import {\n  arrayifyOrUndefined,\n} from '@doars/staark-common/src/array.js'\nimport {\n  childrenToNodes,\n} from '@doars/staark-common/src/element.js'\n\n/**\n * @typedef {import('@doars/staark-common/src/node.js').NodeContent} NodeContent\n * @typedef {import('@doars/staark-common/src/node.js').NodeAttributes} NodeAttributes\n * @typedef {import('@doars/staark-common/src/node.js').NodeAttributeListener} NodeAttributeListener\n * @typedef {import('@doars/staark-common/src/node.js').NodeAbstract} NodeAbstract\n */\n\n/**\n * Update the attributes of an element.\n *\n * @param {Element} element The element to update.\n * @param {NodeAttributes} newAttributes The new attributes to apply.\n * @param {NodeAttributes} [oldAttributes] The old attributes to cleanup.\n */\nconst updateAttributes = (\n  element,\n  newAttributes,\n  oldAttributes,\n) => {\n  if (newAttributes) {\n    for (const name in newAttributes) {\n      let value = newAttributes[name]\n      if (value) {\n        const type = typeof (value)\n        if (type === 'function') {\n          const oldValue = oldAttributes?.[name]\n          if (oldValue !== value) {\n            if (oldValue) {\n              element.removeEventListener(\n                name,\n                oldValue,\n              )\n            }\n\n            element.addEventListener(\n              name,\n              value,\n            )\n          }\n        } else {\n          if (name === 'class') {\n            if (typeof (value) === 'object') {\n              if (Array.isArray(value)) {\n                value = value.join(' ')\n              } else {\n                let classNames = ''\n                for (const className in value) {\n                  if (value[className]) {\n                    classNames += ' ' + className\n                  }\n                }\n                value = classNames\n              }\n            }\n            element.className = value\n          } else if (\n            name === 'style'\n            && typeof (value) === 'object'\n          ) {\n            // Apply updated styles.\n            for (let styleName in value) {\n              let styleValue = value[styleName]\n              if (styleName.includes('-', 1)) {\n                element.style.setProperty(\n                  styleName,\n                  styleValue,\n                )\n              } else {\n                element.style[styleName] = styleValue\n              }\n            }\n\n            // Remove old styles.\n            if (\n              oldAttributes\n              && oldAttributes[name]\n              && typeof (oldAttributes[name]) === 'object'\n              && !Array.isArray(oldAttributes[name])\n            ) {\n              for (let styleName in oldAttributes[name]) {\n                if (!value[styleName]) {\n                  if (styleName.includes('-', 1)) {\n                    element.style.removeProperty(\n                      styleName,\n                    )\n                  } else {\n                    element.style[styleName] = null\n                  }\n                }\n              }\n            }\n          } else {\n            // Ensure it is of type string.\n            if (value === true) {\n              value = 'true'\n            } else if (type !== 'string') {\n              value = value.toString()\n            }\n\n            element.setAttribute(name, value)\n          }\n        }\n      }\n    }\n  }\n\n  // Cleanup old attributes.\n  if (oldAttributes) {\n    for (const name in oldAttributes) {\n      if (\n        !newAttributes\n        || !newAttributes[name]\n      ) {\n        if (typeof (oldAttributes[name]) === 'function') {\n          element.removeEventListener(\n            name,\n            oldAttributes[name]\n          )\n        } else if (name === 'class') {\n          element.className = ''\n        } else if (name === 'style') {\n          element.style.cssText = ''\n        } else if (name === 'value') {\n          element.value = ''\n          // Don't dispatch the input change event, the rerendering should update everything: element.dispatchEvent(new Event('change'))\n        } else {\n          element.removeAttribute(name)\n        }\n      }\n    }\n  }\n}\n\n/**\n * Update the children of an element.\n *\n * @param {Element} element The element to update.\n * @param {NodeContent[]} [newChildAbstracts] The new children to apply.\n * @param {NodeContent[]} [oldChildAbstracts] The old children to cleanup.\n */\nconst updateChildren = (\n  element,\n  newChildAbstracts,\n  oldChildAbstracts,\n) => {\n  let newIndex = 0\n  let newCount = 0\n  if (newChildAbstracts) {\n    for (; newIndex < newChildAbstracts.length; newIndex++) {\n      const newAbstract = newChildAbstracts[newIndex]\n\n      // Try to find the matching old abstract.\n      let matched = false\n      if (oldChildAbstracts) {\n        for (let oldIndex = newIndex - newCount; oldIndex < oldChildAbstracts.length; oldIndex++) {\n          const oldAbstract = oldChildAbstracts[oldIndex]\n          if (\n            (\n              oldAbstract.t\n              && newAbstract.t === oldAbstract.t\n            )\n            || (\n              !oldAbstract.t\n              && !newAbstract.t\n            )\n          ) {\n            matched = true\n\n            if (newIndex !== (oldIndex + newCount)) {\n              // Move node in dom.\n              element.insertBefore(\n                element.childNodes[oldIndex + newCount],\n                element.childNodes[newIndex],\n              )\n              // Move node in abstract tree. TODO: Remove this pesky splicing so the old abstract tree is not mutated.\n              oldChildAbstracts.splice(\n                newIndex - newCount,\n                0,\n                oldChildAbstracts.splice(\n                  oldIndex,\n                  1,\n                )[0],\n              )\n            }\n\n            if (newAbstract.t) {\n              updateAttributes(\n                element.childNodes[newIndex],\n                newAbstract.a,\n                oldAbstract.a,\n              )\n              updateChildren(\n                element.childNodes[newIndex],\n                newAbstract.c,\n                oldAbstract.c,\n              )\n            } else if (oldAbstract !== newAbstract) {\n              element.childNodes[newIndex].textContent = newAbstract\n            }\n            break\n          }\n        }\n      }\n\n      if (!matched) {\n        let newNode\n        if (newAbstract.t) {\n          newNode = document.createElement(\n            newAbstract.t,\n          )\n          updateAttributes(\n            newNode,\n            newAbstract.a,\n          )\n          updateChildren(\n            newNode,\n            newAbstract.c,\n          )\n        } else {\n          newNode = document.createTextNode(\n            newAbstract,\n          )\n        }\n\n        element.insertBefore(\n          newNode,\n          element.childNodes[newIndex],\n        )\n        newCount++\n      }\n    }\n  }\n\n  // Remove old elements.\n  if (oldChildAbstracts) {\n    const elementLength = oldChildAbstracts.length + newCount\n    if (elementLength >= newIndex) {\n      for (let i = elementLength - 1; i >= newIndex; i--) {\n        element.childNodes[i].remove()\n      }\n    }\n  }\n}\n\n/**\n * Create a patch function that can be used to update the root element.\n *\n * @param {HTMLElement | Element | string} rootElement The root element to update.\n * @param {NodeContent[] | string | null} [oldAbstractTree] The old abstract tree to update.\n * @returns {function(NodeContent[] | NodeContent): unknown} The patch function to call to apply a new abstract tree to the element.\n */\nexport const prepare = (\n  rootElement,\n  oldAbstractTree,\n) => {\n  const _rootElement = (\n    typeof (rootElement) === 'string'\n      ? (\n        document.querySelector(rootElement)\n        || document.body.appendChild(\n          document.createElement('div')\n        )\n      )\n      : rootElement\n  )\n\n  if (typeof (oldAbstractTree) === 'string') {\n    try {\n      oldAbstractTree = JSON.parse(oldAbstractTree)\n    } catch (error) {\n      oldAbstractTree = null\n    }\n  }\n  if (!oldAbstractTree) {\n    oldAbstractTree = childrenToNodes(_rootElement)\n  }\n\n  return (\n    newAbstractTree\n  ) => {\n    newAbstractTree = arrayifyOrUndefined(newAbstractTree)\n    updateChildren(\n      _rootElement,\n      newAbstractTree,\n      oldAbstractTree,\n    )\n    oldAbstractTree = newAbstractTree\n  }\n}\n", "import { iife } from '../../../.scripts/iife.js'\n\nimport { conditional } from '@doars/staark-common/src/conditional.js'\nimport { factory } from '@doars/staark-common/src/factory.js'\nimport { fctory } from '@doars/staark-common/src/fctory.js'\nimport { identifier } from '@doars/staark-common/src/identifier.js'\nimport { match } from '@doars/staark-common/src/match.js'\nimport { nde } from '@doars/staark-common/src/nde.js'\nimport { node } from '@doars/staark-common/src/node.js'\nimport { prepare } from './library/patch.js'\n\niife([\n  'staark',\n], {\n  conditional,\n  factory,\n  fctory,\n  identifier,\n  match,\n  nde,\n  node,\n  prepare,\n})\n"],
  "mappings": "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",
  "names": []
}
