{
  "version": 3,
  "sources": ["../../../.scripts/iife.ts", "../../staark-common/src/marker.ts", "../../staark-common/src/node.ts", "../../staark-common/src/factory.ts", "../../staark-common/src/selector.ts", "../../staark-common/src/fctory.ts", "../../staark-common/src/nde.ts", "../../staark-common/src/text.ts", "../../staark-common/src/array.ts", "../../staark-common/src/element.ts", "../src/library/patch.ts", "../src/index.iife.ts"],
  "sourcesContent": ["export const iife = function (\n  path: Array<string>,\n  data: any\n) {\n  let subject: Record<string, any> = window\n  for (let i = 0; i < path.length - 1; i++) {\n    if (typeof (subject[path[i]]) !== 'object' || !Array.isArray(subject[path[i]])) {\n      subject[path[i]] = {}\n    }\n    subject = subject[path[i]]\n  }\n  subject[path[path.length - 1]] = data\n}\n", "export const marker = Symbol()\n", "import {\n  marker,\n} from './marker.js'\nimport {\n  MemoAbstract,\n} from './memo.js'\nimport {\n  TextAbstract,\n} from './text.js'\n\nexport type NodeAttributeListener = (\n  event: Event\n) => unknown\n\nexport type NodeAttributes =\n  Record<string,\n    boolean |\n    null |\n    number |\n    string |\n    (number | string)[] |\n    NodeAttributeListener |\n    Record<string,\n      boolean | number | string\n    >\n  >\n\nexport type NodeContent =\n  string |\n  MemoAbstract |\n  NodeAbstract |\n  TextAbstract\n\nexport type NodeAbstract = {\n  _: Symbol\n  // Attributes\n  a?: NodeAttributes\n  // Content\n  c?: NodeContent[]\n  // Node type\n  t: string\n}\n\nexport const node = (\n  type: string,\n  attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n  contents?: NodeContent[] | NodeContent,\n): NodeAbstract => {\n  if (\n    typeof (attributesOrContents) !== 'object'\n    || (attributesOrContents as NodeAbstract)._ === marker\n    || Array.isArray(attributesOrContents)\n  ) {\n    contents = attributesOrContents as NodeContent\n    attributesOrContents = undefined\n  }\n\n  return {\n    _: marker,\n    a: attributesOrContents as (NodeAttributes | undefined),\n    c: (\n      contents\n        ? Array.isArray(contents)\n          ? contents\n          : [contents] as NodeContent[]\n        : []\n    ),\n    t: type.toUpperCase(),\n  }\n}\n", "import {\n  node,\n  NodeAbstract,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\n\nexport type Factory = (\n  attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n  contents?: NodeContent[] | NodeContent,\n) => NodeAbstract\n\nexport type FactoryCache = {\n  [key: string]: Factory,\n}\n\nexport const factory = new Proxy({}, {\n  get: (\n    target: FactoryCache,\n    type: string,\n  ): Factory => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n      contents?: NodeContent[] | NodeContent,\n    ): NodeAbstract => node(\n      typeConverted,\n      attributesOrContents,\n      contents,\n    )\n  },\n})\n", "const BRACKET_CLOSE = ']'\nconst BRACKET_OPEN = '['\nconst DOT = '.'\nconst EQUAL = '='\nconst HASH = '#'\nconst QUOTE_SINGLE = '\\''\nconst QUOTE_DOUBLE = '\"'\n\nenum TokenTypes {\n  attribute = 0,\n  class = 1,\n  id = 2,\n  type = 3,\n}\n\nexport const selectorToTokenizer = (\n  selector: string,\n): [string, Record<string, any>] => {\n  const length: number = selector.length\n  let i: number = 0\n\n  let type: string = ''\n  const attributes: Record<string, any> = {}\n\n  let tokenA: string = ''\n  let tokenB: string | true = true\n  let tokenType: TokenTypes = TokenTypes.type\n  const storeToken = () => {\n    if (tokenA) {\n      switch (tokenType) {\n        case TokenTypes.attribute:\n          attributes[tokenA] = tokenB === true ? true : tokenB\n          tokenB = true\n          break\n\n        case TokenTypes.class:\n          if (!attributes.class) {\n            attributes.class = tokenA\n            break\n          }\n          attributes.class += ' ' + tokenA\n          break\n\n        case TokenTypes.id:\n          attributes.id = tokenA\n          break\n\n        case TokenTypes.type:\n          type = tokenA\n          break\n      }\n      tokenA = ''\n    }\n  }\n\n  let character: string\n\n  let attributeBracketCount: number\n  const parseAttribute = (\n  ): void => {\n    attributeBracketCount = 0\n\n    while (i < length) {\n      character = selector[i]\n      i++\n      if (character === EQUAL) {\n        // Parse attribute value.\n        tokenB = ''\n        character = selector[i]\n        const endOnDoubleQuote = character === QUOTE_DOUBLE\n        const endOnSingleQuote = character === QUOTE_SINGLE\n        if (endOnDoubleQuote || endOnSingleQuote) {\n          tokenB += character\n          i++\n        }\n\n        while (i < length) {\n          character = selector[i]\n          if (\n            (endOnDoubleQuote && character === QUOTE_DOUBLE) ||\n            (endOnSingleQuote && character === QUOTE_SINGLE)\n          ) {\n            tokenB += character\n            i++\n            break\n          } else if (\n            !endOnDoubleQuote &&\n            !endOnSingleQuote &&\n            character === BRACKET_CLOSE\n          ) {\n            break\n          }\n          tokenB += character\n          i++\n        }\n\n        if (\n          (\n            tokenB[0] === QUOTE_DOUBLE &&\n            tokenB[tokenB.length - 1] === QUOTE_DOUBLE\n          ) ||\n          (\n            tokenB[0] === QUOTE_SINGLE &&\n            tokenB[tokenB.length - 1] === QUOTE_SINGLE\n          )\n        ) {\n          tokenB = tokenB.substring(1, tokenB.length - 1)\n        }\n\n\n        // Consume until closing bracket, but don't store the tokes since these are invalid.\n        while (i < length) {\n          character = selector[i]\n          i++\n          if (character === BRACKET_CLOSE) {\n            break\n          }\n        }\n        break\n      } else if (character === BRACKET_OPEN) {\n        attributeBracketCount++\n        continue\n      } else if (character === BRACKET_CLOSE) {\n        attributeBracketCount--\n        if (attributeBracketCount < 0) {\n          break\n        }\n        continue\n      }\n\n      tokenA += character\n    }\n    storeToken()\n  }\n\n  while (i < length) {\n    character = selector[i]\n    i++\n\n    if (character === HASH) {\n      storeToken()\n      tokenType = TokenTypes.id\n      continue\n    } else if (character === DOT) {\n      storeToken()\n      tokenType = TokenTypes.class\n      continue\n    } else if (character === BRACKET_OPEN) {\n      storeToken()\n      tokenType = TokenTypes.attribute\n      parseAttribute()\n      continue\n    }\n\n    tokenA += character\n  }\n\n  return [type, attributes]\n}\n", "\nimport {\n  node,\n  NodeAbstract,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\nimport {\n  selectorToTokenizer,\n} from './selector.js'\n\nexport type Fctory = (\n  attributes?: string,\n  contents?: NodeContent[] | NodeContent,\n) => NodeAbstract\n\nexport type FctoryCache = {\n  [key: string]: Fctory,\n}\n\nexport const fctory = new Proxy({}, {\n  get: (\n    target: FctoryCache,\n    type: string,\n  ): Fctory => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      selector?: string,\n      contents?: NodeContent[] | NodeContent,\n    ): NodeAbstract => {\n      let attributes: NodeAttributes | undefined\n      if (selector) {\n        const [_, _attributes] = selectorToTokenizer(selector)\n        attributes = _attributes\n      }\n      return node(\n        typeConverted,\n        attributes,\n        contents,\n      )\n    }\n  },\n})\n", "import {\n  marker,\n} from './marker.js'\nimport {\n  NodeAbstract,\n  NodeContent,\n} from './node.js'\nimport {\n  selectorToTokenizer,\n} from './selector.js'\n\nexport const nde = (\n  selector: string,\n  contents?: NodeContent[] | NodeContent,\n): NodeAbstract => {\n  const [type, attributes] = selectorToTokenizer(selector)\n  return {\n    _: marker,\n    a: attributes,\n    c: (\n      contents\n        ? Array.isArray(contents)\n          ? contents\n          : [contents] as NodeContent[]\n        : []\n    ),\n    t: type.toUpperCase(),\n  }\n}\n", "import {\n  marker\n} from './marker.js'\n\nexport type TextAbstract = {\n  _: Symbol,\n  // Contents\n  c: string\n}\n\nexport const text = (\n  contents: number | string | (number | string)[],\n): TextAbstract => ({\n  _: marker,\n  c: (\n    Array.isArray(contents)\n      ? contents.join('')\n      : ('' + contents)\n  ),\n})\n", "export const arrayify = function <T>(\n  data: T[] | T,\n): T[] {\n  if (Array.isArray(data)) {\n    return data\n  }\n  return [\n    data,\n  ]\n}\n", "import {\n  node,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\n\nexport const childrenToNodes = (\n  element: Element | ChildNode,\n) => {\n  const abstractChildNodes: NodeContent[] = []\n  for (let i = 0; i < element.childNodes.length; i++) {\n    const childNode = element.childNodes[i]\n    if (childNode instanceof Text) {\n      abstractChildNodes.push(\n        childNode.textContent ?? ''\n      )\n    } else {\n      let attributes: NodeAttributes = {}\n      for (let i = 0; i < (childNode as Element).attributes.length; i++) {\n        const attribute = (childNode as Element).attributes[i]\n        attributes[attribute.name] = attribute.value\n      }\n\n      abstractChildNodes.push(\n        node(\n          childNode.nodeName,\n          attributes,\n          childrenToNodes(childNode),\n        )\n      )\n    }\n  }\n  return abstractChildNodes\n}\n", "import {\n  arrayify,\n} from '@doars/staark-common/src/array.js'\nimport {\n  childrenToNodes,\n} from '@doars/staark-common/src/element.js'\nimport {\n  NodeAbstract,\n  NodeAttributes,\n  NodeAttributeListener,\n  NodeContent,\n} from '@doars/staark-common/src/node.js'\nimport {\n  TextAbstract,\n} from '@doars/staark-common/src/text.js'\n\nconst MATCH_CAPITALS = /[A-Z]+(?![a-z])|[A-Z]/g\nconst HYPHENATE = (\n  part: string,\n  offset: number,\n) => (offset ? '-' : '') + part\n\nexport type PatchFunction = (\n  newAbstractTree: NodeContent[] | NodeContent,\n) => void\n\nconst updateAttributes = (\n  element: Element,\n  newAttributes?: NodeAttributes,\n  oldAttributes?: NodeAttributes,\n): void => {\n  if (newAttributes) {\n    for (const name in newAttributes) {\n      let value = newAttributes[name]\n      if (value) {\n        const type = typeof (value)\n        if (type === 'function') {\n          element.addEventListener(name, value as NodeAttributeListener)\n          continue\n        } else {\n          if (name === 'class') {\n            if (typeof (value) === 'object') {\n              if (Array.isArray(value)) {\n                value = value.join(' ')\n              } else {\n                let classNames: string = ''\n                for (const className in value) {\n                  if (value[className]) {\n                    classNames += ' ' + className\n                  }\n                }\n                value = classNames\n              }\n            }\n          } else if (name === 'style') {\n            if (typeof (value) === 'object') {\n              if (Array.isArray(value)) {\n                value = value.join(';')\n              } else {\n                let styles: string = ''\n                for (let styleProperty in value) {\n                  let styleValue: boolean | string | number | (boolean | string | number)[] = value[styleProperty]\n\n                  // Convert to kebab case.\n                  styleProperty = styleProperty\n                    .replace(MATCH_CAPITALS, HYPHENATE)\n                    .toLowerCase()\n\n                  if (Array.isArray(styleValue)) {\n                    styles += ';' + styleProperty + ':' + styleValue.join(' ')\n                  } else if (styleValue) {\n                    styles += ';' + styleProperty + ':' + styleValue\n                  }\n                }\n                value = styles\n              }\n            }\n          } else {\n            // Ensure it is of type string.\n            if (type === 'boolean') {\n              value = 'true'\n            } else if (type !== 'string') {\n              value = value.toString()\n            }\n\n            if (\n              name === 'value'\n              && (element as HTMLInputElement).value !== value\n            ) {\n              // Update value separately as well.\n              (element as HTMLInputElement).value = value as string\n              // Don't dispatch a change event, the re-rendering should update everything: element.dispatchEvent(new Event('change'))\n            } else if (name === 'checked') {\n              (element as HTMLInputElement).checked = newAttributes[name] as boolean\n              // Don't dispatch a change event, the re-rendering should update everything: element.dispatchEvent(new Event('change'))\n            }\n          }\n\n          element.setAttribute(name, (value as string))\n        }\n      }\n    }\n  }\n\n  // Cleanup old attributes.\n  if (oldAttributes) {\n    for (const name in oldAttributes) {\n      if (typeof (oldAttributes[name]) === 'function') {\n        element.removeEventListener(\n          name,\n          oldAttributes[name] as NodeAttributeListener,\n        )\n      } else if (\n        !newAttributes\n        || !(name in newAttributes)\n        || !newAttributes[name]\n      ) {\n        if (name === 'value') {\n          // Reset value separately.\n          (element as HTMLInputElement).value = ''\n          // Don't dispatch the input change event, the rerendering should update everything: element.dispatchEvent(new Event('change'))\n        } else if (name === 'checked') {\n          (element as HTMLInputElement).checked = false\n        }\n        element.removeAttribute(name)\n      }\n    }\n  }\n}\n\nexport const prepare = (\n  rootElement: HTMLElement | Element | string,\n  oldAbstractTree?: NodeContent[] | string,\n): PatchFunction => {\n  const updateElementTree = (\n    element: Element,\n    newChildAbstracts?: NodeContent[],\n    oldChildAbstracts?: NodeContent[],\n    elementAbstract?: NodeContent,\n  ): void => {\n    let newIndex = 0\n    let newCount = 0\n    if (newChildAbstracts) {\n      for (; newIndex < newChildAbstracts.length; newIndex++) {\n        const newAbstract = newChildAbstracts[newIndex]\n\n        // Try to find the matching old abstract.\n        let matched = false\n        if (oldChildAbstracts) {\n          for (let oldIndex = newIndex - newCount; oldIndex < oldChildAbstracts.length; oldIndex++) {\n            const oldAbstract = oldChildAbstracts[oldIndex];\n            if (\n              (\n                (oldAbstract as NodeAbstract).t\n                && (newAbstract as NodeAbstract).t === (oldAbstract as NodeAbstract).t\n              )\n              || (\n                !(oldAbstract as NodeAbstract).t\n                && !(newAbstract as NodeAbstract).t\n              )\n            ) {\n              matched = true\n\n              if (newIndex !== oldIndex) {\n                // Move node in dom.\n                element.insertBefore(\n                  element.childNodes[oldIndex + newCount],\n                  element.childNodes[newIndex],\n                )\n                // Move node in abstract tree.\n                oldChildAbstracts.splice(\n                  newIndex - newCount,\n                  0,\n                  ...oldChildAbstracts.splice(\n                    oldIndex,\n                    1,\n                  )\n                )\n              }\n              if ((newAbstract as NodeAbstract).t) {\n                updateAttributes(\n                  (element.childNodes[newIndex] as Element),\n                  (newAbstract as NodeAbstract).a,\n                  (oldAbstract as NodeAbstract).a,\n                )\n                updateElementTree(\n                  (element.childNodes[newIndex] as Element),\n                  (newAbstract as NodeAbstract).c,\n                  (oldAbstract as NodeAbstract).c,\n                  oldAbstract,\n                )\n              } else {\n                element.childNodes[newIndex].textContent = (\n                  typeof (newAbstract) === 'string'\n                    ? newAbstract\n                    : (newAbstract as TextAbstract).c\n                )\n              }\n              break\n            }\n          }\n        }\n\n        if (!matched) {\n          let childElement: Element | string\n          if ((newAbstract as NodeAbstract).t) {\n            childElement = document.createElement(\n              (newAbstract as NodeAbstract).t\n            )\n\n            if ((newAbstract as NodeAbstract).a) {\n              updateAttributes(\n                childElement,\n                (newAbstract as NodeAbstract).a,\n              )\n            }\n            if ((newAbstract as NodeAbstract).c) {\n              updateElementTree(\n                childElement,\n                (newAbstract as NodeAbstract).c,\n              )\n            }\n\n            const insertAdjacentElement = (\n              element: Node,\n              elementAbstract: NodeContent | null | undefined,\n              position: InsertPosition,\n            ) => {\n              if (\n                !elementAbstract\n                || (elementAbstract as NodeAbstract).t\n              ) {\n                (element as Element)\n                  .insertAdjacentElement(\n                    position,\n                    childElement as Element,\n                  )\n              } else {\n                // Otherwise the position is always 'beforebegin'.\n                (element.parentNode as Element)\n                  .insertBefore(\n                    childElement as Element,\n                    element,\n                  )\n              }\n            }\n            if (newIndex === 0) {\n              insertAdjacentElement(\n                element,\n                elementAbstract,\n                'afterbegin',\n              )\n            } else if ((oldChildAbstracts?.length ?? 0) + newCount > newIndex) {\n              insertAdjacentElement(\n                (element.childNodes[newIndex] as Node),\n                (oldChildAbstracts as NodeContent[])[newIndex + newCount],\n                'beforebegin',\n              )\n            } else {\n              insertAdjacentElement(\n                element,\n                elementAbstract,\n                'beforeend',\n              )\n            }\n            newCount++\n          } else {\n            childElement = (\n              typeof (newAbstract) === 'string'\n                ? newAbstract\n                : (newAbstract as TextAbstract).c\n            )\n\n            const insertAdjacentText = (\n              element: Node,\n              elementAbstract: NodeContent | null | undefined,\n              position: InsertPosition,\n            ) => {\n              if (\n                !elementAbstract\n                || (elementAbstract as NodeAbstract).t\n              ) {\n                (element as Element)\n                  .insertAdjacentText(\n                    position,\n                    childElement as string,\n                  )\n              } else {\n                // Otherwise the position is always 'beforebegin'.\n                (element.parentNode as Element)\n                  .insertBefore(\n                    document.createTextNode(childElement as string),\n                    element.nextSibling,\n                  )\n              }\n            }\n            if (newIndex === 0) {\n              insertAdjacentText(\n                element,\n                elementAbstract,\n                'afterbegin',\n              )\n            } else if ((oldChildAbstracts?.length ?? 0) + newCount > newIndex) {\n              insertAdjacentText(\n                element.childNodes[newIndex] as Node,\n                (oldChildAbstracts as NodeContent[])[newIndex + newCount],\n                'beforebegin',\n              )\n            } else {\n              insertAdjacentText(\n                element,\n                elementAbstract,\n                'beforeend',\n              )\n            }\n            newCount++\n          }\n        }\n      }\n    }\n\n    // Remove old elements.\n    const elementLength = (oldChildAbstracts?.length ?? 0) + newCount\n    if (elementLength >= newIndex) {\n      for (let i = elementLength - 1; i >= newIndex; i--) {\n        element.childNodes[i].remove()\n      }\n    }\n  }\n\n  const _rootElement = (\n    typeof (rootElement) === 'string'\n      ? (\n        document.querySelector(rootElement)\n        || document.body.appendChild(\n          document.createElement('div')\n        )\n      )\n      : rootElement\n  )\n\n  if (typeof (oldAbstractTree) === 'string') {\n    try {\n      oldAbstractTree = JSON.parse(oldAbstractTree) as NodeContent[]\n    } catch (error) {\n      oldAbstractTree = undefined\n    }\n  }\n  oldAbstractTree ??= childrenToNodes(_rootElement)\n\n  return (\n    newAbstractTree: NodeContent[] | NodeContent,\n  ): void => {\n    newAbstractTree = arrayify(newAbstractTree)\n    updateElementTree(\n      _rootElement,\n      newAbstractTree,\n      oldAbstractTree as NodeContent[],\n    )\n    oldAbstractTree = newAbstractTree\n  }\n}\n", "import { iife } from '../../../.scripts/iife.js'\n\nimport { factory } from '@doars/staark-common/src/factory.js'\nimport { fctory } from '@doars/staark-common/src/fctory.js'\nimport { nde } from '@doars/staark-common/src/nde.js'\nimport { node } from '@doars/staark-common/src/node.js'\nimport { text } from '@doars/staark-common/src/text.js'\nimport { prepare } from './library/patch.js'\n\niife([\n  'staark',\n], {\n  factory,\n  fctory,\n  nde,\n  node,\n  prepare,\n  text,\n})\n"],
  "mappings": "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",
  "names": ["i", "element", "elementAbstract"]
}
