{
  "version": 3,
  "sources": ["../../staark-common/src/array.js", "../../staark-common/src/conditional.js", "../../staark-common/src/marker.js", "../../staark-common/src/node.js", "../../staark-common/src/factory.js", "../../staark-common/src/selector.js", "../../staark-common/src/fctory.js", "../../staark-common/src/identifier.ts", "../../staark-common/src/match.js", "../../staark-common/src/nde.js", "../../staark-common/src/element.js", "../src/library/patch.js"],
  "sourcesContent": ["/**\n * Ensure the data is an array if it isn't already. Non-truthy values are converted to empty arrays.\n *\n * @template T\n * @param {T|T[]} data - Data to \"arrify\".\n * @returns {T[]} An array containing the data.\n */\nexport const arrayify = (\n  data,\n) => arrayifyOrUndefined(data) || []\n\n/**\n * Ensure the data is an array if it isn't already. Non-truthy values are converted to undefined.\n *\n * @template T\n * @param {T|T[]} data - Data to \"arrify\".\n * @returns {(T[]|undefined)} An array containing the data or undefined.\n */\nexport const arrayifyOrUndefined = (\n  data,\n) => data ? (\n  Array.isArray(data)\n    ? data\n    : [data]\n) : undefined\n", "import { arrayify } from './array.js'\n\n/**\n * @typedef {import('./node.js').NodeContent} NodeContent\n * @typedef {import('./types.js').ResolveFunction} ResolveFunction\n */\n\n/**\n * @param {any} condition - The condition to evaluate.\n * @param {NodeContent[] | NodeContent | ResolveFunction} onTruth - The content to return if the condition is true.\n * @param {NodeContent[] | NodeContent | ResolveFunction} [onFalse] - The content to return if the condition is false.\n * @returns {NodeContent[]} - The resulting content as an array.\n */\nexport const conditional = (\n  condition,\n  onTruth,\n  onFalse,\n) => {\n  let result = (\n    condition\n      ? onTruth\n      : onFalse\n  )\n  if (typeof (result) === 'function') {\n    result = result()\n  }\n  return arrayify(result)\n}\n", "export const marker = 'n'\n", "import { arrayifyOrUndefined } from './array.js'\nimport { marker } from './marker.js'\n\n/**\n * @typedef {import('./memo.js').MemoAbstract} MemoAbstract\n */\n\n/**\n * @typedef {function(Event, Record<string, any>): unknown} NodeAttributeListener\n * @property {function(Event, Record<string, any>): unknown} [f]\n */\n\n/**\n * @typedef {Object.<string, boolean | null | number | string | (number | string)[] | NodeAttributeListener | Record<string, boolean | number | string>>} NodeAttributes\n */\n\n/**\n * @typedef {string | MemoAbstract | NodeAbstract} NodeContent\n */\n\n/**\n * @typedef {Object} NodeAbstract\n * @property {string} _ - Discriminator\n * @property {NodeAttributes} [a] - Attributes\n * @property {NodeContent[]} [c] - Content\n * @property {string} t - Node type\n */\n\n/**\n * @param {string} type\n * @param {NodeAttributes | NodeContent[] | NodeContent} [attributesOrContents]\n * @param {NodeContent[] | NodeContent} [contents]\n * @returns {NodeAbstract}\n */\nexport const node = (\n  type,\n  attributesOrContents,\n  contents,\n) => {\n  if (\n    typeof (attributesOrContents) !== 'object'\n    || attributesOrContents._ === marker\n    || Array.isArray(attributesOrContents)\n  ) {\n    contents = attributesOrContents\n    attributesOrContents = undefined\n  }\n\n  return {\n    _: marker,\n    a: attributesOrContents,\n    c: arrayifyOrUndefined(contents),\n    t: type.toUpperCase(),\n  }\n}\n", "import {\n  node,\n} from './node.js'\n\n/**\n * @typedef {import('./node.js').NodeAbstract} NodeAbstract\n * @typedef {import('./node.js').NodeAttributes} NodeAttributes\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * @typedef {Function} Factory\n * @param {NodeAttributes | NodeContent[] | NodeContent} [attributesOrContents]\n * @param {NodeContent[] | NodeContent} [contents]\n * @returns {NodeAbstract}\n */\n\n/**\n * @typedef {Object} FactoryCache\n */\n\nexport const factory = new Proxy({}, {\n  /**\n   * @param {FactoryCache} target\n   * @param {string} type\n   * @returns {Factory}\n   */\n  get: (\n    target,\n    type,\n  ) => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      attributesOrContents,\n      contents,\n    ) => node(\n      typeConverted,\n      attributesOrContents,\n      contents,\n    )\n  },\n})\n", "const BRACKET_CLOSE = ']'\nconst BRACKET_OPEN = '['\nconst DOT = '.'\nconst EQUAL = '='\nconst HASH = '#'\nconst QUOTE_SINGLE = '\\''\nconst QUOTE_DOUBLE = '\"'\n\n/**\n * @enum {number}\n */\nconst TokenTypes = {\n  attribute: 0,\n  class: 1,\n  id: 2,\n  type: 3,\n}\n\n/**\n * @typedef {Object.<string, any>} Attributes\n */\n\n/**\n * @param {string} selector\n * @returns {[string, Attributes]}\n */\nexport const selectorToTokenizer = (\n  selector,\n) => {\n  const length = selector.length\n  let i = 0\n\n  let type = ''\n  /** @type {Attributes} */\n  const attributes = {}\n\n  let tokenA = ''\n  let tokenB = true\n  let tokenType = TokenTypes.type\n  const storeToken = () => {\n    if (tokenA) {\n      switch (tokenType) {\n        case TokenTypes.attribute:\n          attributes[tokenA] = (\n            tokenB === true\n              ? true\n              : tokenB\n          )\n          tokenB = true\n          break\n\n        case TokenTypes.class:\n          if (!attributes.class) {\n            attributes.class = tokenA\n            break\n          }\n          attributes.class += ' ' + tokenA\n          break\n\n        case TokenTypes.id:\n          attributes.id = tokenA\n          break\n\n        case TokenTypes.type:\n          type = tokenA\n          break\n      }\n      tokenA = ''\n    }\n  }\n\n  let character\n\n  let attributeBracketCount\n  const parseAttribute = () => {\n    attributeBracketCount = 0\n\n    while (i < length) {\n      character = selector[i]\n      i++\n      if (character === EQUAL) {\n        // Parse attribute value.\n        tokenB = ''\n        character = selector[i]\n        const endOnDoubleQuote = character === QUOTE_DOUBLE\n        const endOnSingleQuote = character === QUOTE_SINGLE\n        if (\n          endOnDoubleQuote\n          || endOnSingleQuote\n        ) {\n          tokenB += character\n          i++\n        }\n\n        while (i < length) {\n          character = selector[i]\n          if (\n            (\n              endOnDoubleQuote\n              && character === QUOTE_DOUBLE\n            )\n            || (\n              endOnSingleQuote\n              && character === QUOTE_SINGLE\n            )\n          ) {\n            tokenB += character\n            i++\n            break\n          } else if (\n            !endOnDoubleQuote\n            && !endOnSingleQuote\n            && character === BRACKET_CLOSE\n          ) {\n            break\n          }\n          tokenB += character\n          i++\n        }\n\n        if (\n          (\n            tokenB[0] === QUOTE_DOUBLE\n            && tokenB[tokenB.length - 1] === QUOTE_DOUBLE\n          ) ||\n          (\n            tokenB[0] === QUOTE_SINGLE\n            && tokenB[tokenB.length - 1] === QUOTE_SINGLE\n          )\n        ) {\n          tokenB = tokenB.substring(1, tokenB.length - 1)\n        }\n\n        // Consume until closing bracket, but don't store the tokens since these are invalid.\n        while (i < length) {\n          character = selector[i]\n          i++\n          if (character === BRACKET_CLOSE) {\n            break\n          }\n        }\n        break\n      } else if (character === BRACKET_OPEN) {\n        attributeBracketCount++\n        continue\n      } else if (character === BRACKET_CLOSE) {\n        attributeBracketCount--\n        if (attributeBracketCount < 0) {\n          break\n        }\n        continue\n      }\n\n      tokenA += character\n    }\n    storeToken()\n  }\n\n  while (i < length) {\n    character = selector[i]\n    i++\n\n    if (character === HASH) {\n      storeToken()\n      tokenType = TokenTypes.id\n      continue\n    } else if (character === DOT) {\n      storeToken()\n      tokenType = TokenTypes.class\n      continue\n    } else if (character === BRACKET_OPEN) {\n      storeToken()\n      tokenType = TokenTypes.attribute\n      parseAttribute()\n      continue\n    }\n\n    tokenA += character\n  }\n\n  return [type, attributes]\n}\n", "import {\n  node,\n} from './node.js'\nimport {\n  selectorToTokenizer,\n} from './selector.js'\n\n/**\n * @typedef {import('./node.js').NodeAbstract} NodeAbstract\n * @typedef {import('./node.js').NodeAttributes} NodeAttributes\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * @typedef {function(string=, NodeContent[]|NodeContent=): NodeAbstract} Fctory\n */\n\n/**\n * @typedef {Object<string, Fctory>} FctoryCache\n */\n\nexport const fctory = new Proxy({}, {\n  /**\n   * @param {FctoryCache} target\n   * @param {string} type\n   * @returns {Fctory}\n   */\n  get: (target, type) => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      selector,\n      contents,\n    ) => {\n      let attributes\n      if (selector) {\n        const [_, _attributes] = selectorToTokenizer(selector)\n        attributes = _attributes\n      }\n      return node(\n        typeConverted,\n        attributes,\n        contents,\n      )\n    }\n  },\n})\n", "let identifierCount = 0\n\n/**\n * Generates a unique identifier with a given prefix.\n * @param {string} prefix - The prefix for the identifier.\n * @returns {string} The generated identifier.\n */\nexport const identifier = (\n  prefix,\n) => prefix + '-' + (identifierCount++)\n", "import { arrayify } from './array.js'\n\n/**\n * @typedef {import('./node.js').NodeContent} NodeContent\n * @typedef {import('./types.js').ResolveFunction} ResolveFunction\n */\n\n/**\n * Matches a key to a value in a lookup table, with a fallback option.\n *\n * @param {any} key - The key to match.\n * @param {Record<any, NodeContent[] | NodeContent | ResolveFunction | null | undefined>} lookup - The lookup table.\n * @param {NodeContent[] | NodeContent | ResolveFunction | null} [fallback] - The fallback value.\n * @returns {NodeContent[]} - The matched or fallback value, arrayified.\n */\nexport const match = (\n  key,\n  lookup,\n  fallback,\n) => {\n  let result\n  if (\n    lookup\n    && (key in lookup)\n    && lookup[key]\n  ) {\n    result = lookup[key]\n  } else {\n    result = fallback\n  }\n  if (typeof result === 'function') {\n    result = result()\n  }\n  return arrayify(result)\n}\n", "import { arrayifyOrUndefined } from './array.js'\nimport { marker } from './marker.js'\nimport { selectorToTokenizer } from './selector.js'\n\n/**\n * @typedef {import('./node.js').NodeAbstract} NodeAbstract\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * Creates a NodeAbstract object from a selector and optional contents.\n *\n * @param {string} selector - The selector string.\n * @param {NodeContent[] | NodeContent} [contents] - The optional contents.\n * @returns {NodeAbstract} The created NodeAbstract object.\n */\nexport const nde = (\n  selector,\n  contents,\n) => {\n  const [type, attributes] = selectorToTokenizer(selector)\n\n  return {\n    _: marker,\n    a: attributes,\n    c: arrayifyOrUndefined(contents),\n    t: type.toUpperCase(),\n  }\n}\n", "import {\n  node,\n} from './node.js'\n\n/**\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * @typedef {Object} Attribute\n * @property {string} name\n * @property {string} value\n */\n\n/**\n * Converts child nodes of an element to an array of abstract nodes.\n * @param {Element | ChildNode} element\n * @returns {NodeContent[]}\n */\nexport const childrenToNodes = (\n  element,\n) => {\n  const abstractChildNodes = []\n  for (const childNode of element.childNodes) {\n    if (childNode instanceof Text) {\n      abstractChildNodes.push(\n        childNode.textContent ?? '',\n      )\n    } else {\n      const attributes = {}\n      for (const attribute of childNode.attributes) {\n        attributes[attribute.name] = attribute.value\n      }\n\n      abstractChildNodes.push(\n        node(\n          childNode.nodeName,\n          attributes,\n          childrenToNodes(childNode),\n        ),\n      )\n    }\n  }\n  return abstractChildNodes\n}\n", "import {\n  arrayifyOrUndefined,\n} from '@doars/staark-common/src/array.js'\nimport {\n  childrenToNodes,\n} from '@doars/staark-common/src/element.js'\n\n/**\n * @typedef {import('@doars/staark-common/src/node.js').NodeContent} NodeContent\n * @typedef {import('@doars/staark-common/src/node.js').NodeAttributes} NodeAttributes\n * @typedef {import('@doars/staark-common/src/node.js').NodeAttributeListener} NodeAttributeListener\n * @typedef {import('@doars/staark-common/src/node.js').NodeAbstract} NodeAbstract\n */\n\n/**\n * @param {Element} element\n * @param {NodeAttributes} newAttributes\n * @param {NodeAttributes} [oldAttributes]\n */\nconst updateAttributes = (\n  element,\n  newAttributes,\n  oldAttributes,\n) => {\n  if (newAttributes) {\n    for (const name in newAttributes) {\n      let value = newAttributes[name]\n      if (value) {\n        const type = typeof (value)\n        if (type === 'function') {\n          const oldValue = oldAttributes?.[name]\n          if (oldValue !== value) {\n            if (oldValue) {\n              element.removeEventListener(\n                name,\n                oldValue,\n              )\n            }\n\n            element.addEventListener(\n              name,\n              value,\n            )\n          }\n        } else {\n          if (name === 'class') {\n            if (typeof (value) === 'object') {\n              if (Array.isArray(value)) {\n                value = value.join(' ')\n              } else {\n                let classNames = ''\n                for (const className in value) {\n                  if (value[className]) {\n                    classNames += ' ' + className\n                  }\n                }\n                value = classNames\n              }\n            }\n            element.className = value\n          } else if (\n            name === 'style'\n            && typeof (value) === 'object'\n          ) {\n            // Apply updated styles.\n            for (let styleName in value) {\n              let styleValue = value[styleName]\n              if (styleName.includes('-', 1)) {\n                element.style.setProperty(\n                  styleName,\n                  styleValue,\n                )\n              } else {\n                // @ts-ignore\n                element.style[styleName] = styleValue\n              }\n            }\n\n            // Remove old styles.\n            if (\n              oldAttributes\n              && oldAttributes[name]\n              && typeof (oldAttributes[name]) === 'object'\n              && !Array.isArray(oldAttributes[name])\n            ) {\n              for (let styleName in oldAttributes[name]) {\n                if (!(styleName in value)) {\n                  if (styleName.includes('-')) {\n                    element.style.removeProperty(\n                      styleName,\n                    )\n                  } else {\n                    // @ts-ignore\n                    delete element.style[styleName]\n                  }\n                }\n              }\n            }\n          } else {\n            // Ensure it is of type string.\n            if (value === true) {\n              value = 'true'\n            } else if (type !== 'string') {\n              value = value.toString()\n            }\n\n            element.setAttribute(name, value)\n          }\n        }\n      }\n    }\n  }\n\n  // Cleanup old attributes.\n  if (oldAttributes) {\n    for (const name in oldAttributes) {\n      if (\n        !newAttributes\n        || !newAttributes[name]\n      ) {\n        if (typeof (oldAttributes[name]) === 'function') {\n          element.removeEventListener(\n            name,\n            oldAttributes[name]\n          )\n        } else if (name === 'class') {\n          element.className = ''\n        } else if (name === 'style') {\n          element.style.cssText = ''\n        } else if (name === 'value') {\n          element.value = ''\n          // Don't dispatch the input change event, the rerendering should update everything: element.dispatchEvent(new Event('change'))\n        } else {\n          element.removeAttribute(name)\n        }\n      }\n    }\n  }\n}\n\n/**\n * @param {Element} element\n * @param {NodeContent[]} [newChildAbstracts]\n * @param {NodeContent[]} [oldChildAbstracts]\n */\nconst updateChildren = (\n  element,\n  newChildAbstracts,\n  oldChildAbstracts,\n) => {\n  let newIndex = 0\n  let newCount = 0\n  if (newChildAbstracts) {\n    for (; newIndex < newChildAbstracts.length; newIndex++) {\n      const newAbstract = newChildAbstracts[newIndex]\n\n      // Try to find the matching old abstract.\n      let matched = false\n      if (oldChildAbstracts) {\n        for (let oldIndex = newIndex - newCount; oldIndex < oldChildAbstracts.length; oldIndex++) {\n          const oldAbstract = oldChildAbstracts[oldIndex]\n          if (\n            (\n              oldAbstract.t\n              && newAbstract.t === oldAbstract.t\n            )\n            || (\n              !oldAbstract.t\n              && !newAbstract.t\n            )\n          ) {\n            matched = true\n\n            if (newIndex !== (oldIndex + newCount)) {\n              // Move node in dom.\n              element.insertBefore(\n                element.childNodes[oldIndex + newCount],\n                element.childNodes[newIndex],\n              )\n              // Move node in abstract tree. TODO: Remove this pesky splicing so the old abstract tree is not mutated.\n              oldChildAbstracts.splice(\n                newIndex - newCount,\n                0,\n                oldChildAbstracts.splice(\n                  oldIndex,\n                  1,\n                )[0],\n              )\n            }\n\n            if (newAbstract.t) {\n              updateAttributes(\n                element.childNodes[newIndex],\n                newAbstract.a,\n                oldAbstract.a,\n              )\n              updateChildren(\n                element.childNodes[newIndex],\n                newAbstract.c,\n                oldAbstract.c,\n              )\n            } else if (oldAbstract !== newAbstract) {\n              element.childNodes[newIndex].textContent = newAbstract\n            }\n            break\n          }\n        }\n      }\n\n      if (!matched) {\n        let newNode\n        if (newAbstract.t) {\n          newNode = document.createElement(\n            newAbstract.t,\n          )\n          updateAttributes(\n            newNode,\n            newAbstract.a,\n          )\n          updateChildren(\n            newNode,\n            newAbstract.c,\n          )\n        } else {\n          newNode = document.createTextNode(\n            newAbstract,\n          )\n        }\n\n        element.insertBefore(\n          newNode,\n          element.childNodes[newIndex],\n        )\n        newCount++\n      }\n    }\n  }\n\n  // Remove old elements.\n  if (oldChildAbstracts) {\n    const elementLength = oldChildAbstracts.length + newCount\n    if (elementLength >= newIndex) {\n      for (let i = elementLength - 1; i >= newIndex; i--) {\n        element.childNodes[i].remove()\n      }\n    }\n  }\n}\n\n/**\n * @param {HTMLElement | Element | string} rootElement\n * @param {NodeContent[] | string | null} [oldAbstractTree]\n * @returns {function(NodeContent[] | NodeContent): unknown}\n */\nexport const prepare = (\n  rootElement,\n  oldAbstractTree,\n) => {\n  const _rootElement = (\n    typeof (rootElement) === 'string'\n      ? (\n        document.querySelector(rootElement)\n        || document.body.appendChild(\n          document.createElement('div')\n        )\n      )\n      : rootElement\n  )\n\n  if (typeof (oldAbstractTree) === 'string') {\n    try {\n      oldAbstractTree = JSON.parse(oldAbstractTree)\n    } catch (error) {\n      oldAbstractTree = null\n    }\n  }\n  if (!oldAbstractTree) {\n    oldAbstractTree = childrenToNodes(_rootElement)\n  }\n\n  return (\n    newAbstractTree\n  ) => {\n    newAbstractTree = arrayifyOrUndefined(newAbstractTree)\n    updateChildren(\n      _rootElement,\n      newAbstractTree,\n      oldAbstractTree,\n    )\n    oldAbstractTree = newAbstractTree\n  }\n}\n"],
  "mappings": "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",
  "names": ["arrayify", "data", "arrayifyOrUndefined", "conditional", "condition", "onTruth", "onFalse", "result", "arrayify", "marker", "node", "type", "attributesOrContents", "contents", "marker", "arrayifyOrUndefined", "factory", "target", "type", "typeConverted", "capital", "attributesOrContents", "contents", "node", "BRACKET_CLOSE", "BRACKET_OPEN", "DOT", "EQUAL", "HASH", "QUOTE_SINGLE", "QUOTE_DOUBLE", "TokenTypes", "selectorToTokenizer", "selector", "length", "i", "type", "attributes", "tokenA", "tokenB", "tokenType", "storeToken", "character", "attributeBracketCount", "parseAttribute", "endOnDoubleQuote", "endOnSingleQuote", "fctory", "target", "type", "typeConverted", "capital", "selector", "contents", "attributes", "_", "_attributes", "selectorToTokenizer", "node", "identifierCount", "identifier", "prefix", "match", "key", "lookup", "fallback", "result", "arrayify", "nde", "selector", "contents", "type", "attributes", "selectorToTokenizer", "marker", "arrayifyOrUndefined", "childrenToNodes", "element", "_a", "abstractChildNodes", "childNode", "attributes", "attribute", "node", "updateAttributes", "element", "newAttributes", "oldAttributes", "name", "value", "type", "oldValue", "classNames", "className", "styleName", "styleValue", "updateChildren", "newChildAbstracts", "oldChildAbstracts", "newIndex", "newCount", "newAbstract", "matched", "oldIndex", "oldAbstract", "newNode", "elementLength", "i", "prepare", "rootElement", "oldAbstractTree", "_rootElement", "error", "childrenToNodes", "newAbstractTree", "arrayifyOrUndefined"]
}
