{
  "version": 3,
  "sources": ["../../staark-common/src/marker.ts", "../../staark-common/src/node.ts", "../../staark-common/src/factory.ts", "../../staark-common/src/selector.ts", "../../staark-common/src/fctory.ts", "../../staark-common/src/nde.ts", "../../staark-common/src/text.ts", "../../staark-common/src/array.ts", "../../staark-common/src/element.ts", "../src/library/patch.ts"],
  "sourcesContent": ["export const marker = Symbol()\n", "import {\n  marker,\n} from './marker.js'\nimport {\n  MemoAbstract,\n} from './memo.js'\nimport {\n  TextAbstract,\n} from './text.js'\n\nexport type NodeAttributeListener = (\n  event: Event\n) => unknown\n\nexport type NodeAttributes =\n  Record<string,\n    boolean |\n    null |\n    number |\n    string |\n    (number | string)[] |\n    NodeAttributeListener |\n    Record<string,\n      boolean | number | string\n    >\n  >\n\nexport type NodeContent =\n  string |\n  MemoAbstract |\n  NodeAbstract |\n  TextAbstract\n\nexport type NodeAbstract = {\n  _: Symbol\n  // Attributes\n  a?: NodeAttributes\n  // Content\n  c?: NodeContent[]\n  // Node type\n  t: string\n}\n\nexport const node = (\n  type: string,\n  attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n  contents?: NodeContent[] | NodeContent,\n): NodeAbstract => {\n  if (\n    typeof (attributesOrContents) !== 'object'\n    || (attributesOrContents as NodeAbstract)._ === marker\n    || Array.isArray(attributesOrContents)\n  ) {\n    contents = attributesOrContents as NodeContent\n    attributesOrContents = undefined\n  }\n\n  return {\n    _: marker,\n    a: attributesOrContents as (NodeAttributes | undefined),\n    c: (\n      contents\n        ? Array.isArray(contents)\n          ? contents\n          : [contents] as NodeContent[]\n        : []\n    ),\n    t: type.toUpperCase(),\n  }\n}\n", "import {\n  node,\n  NodeAbstract,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\n\nexport type Factory = (\n  attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n  contents?: NodeContent[] | NodeContent,\n) => NodeAbstract\n\nexport type FactoryCache = {\n  [key: string]: Factory,\n}\n\nexport const factory = new Proxy({}, {\n  get: (\n    target: FactoryCache,\n    type: string,\n  ): Factory => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n      contents?: NodeContent[] | NodeContent,\n    ): NodeAbstract => node(\n      typeConverted,\n      attributesOrContents,\n      contents,\n    )\n  },\n})\n", "const BRACKET_CLOSE = ']'\nconst BRACKET_OPEN = '['\nconst DOT = '.'\nconst EQUAL = '='\nconst HASH = '#'\nconst QUOTE_SINGLE = '\\''\nconst QUOTE_DOUBLE = '\"'\n\nenum TokenTypes {\n  attribute = 0,\n  class = 1,\n  id = 2,\n  type = 3,\n}\n\nexport const selectorToTokenizer = (\n  selector: string,\n): [string, Record<string, any>] => {\n  const length: number = selector.length\n  let i: number = 0\n\n  let type: string = ''\n  const attributes: Record<string, any> = {}\n\n  let tokenA: string = ''\n  let tokenB: string | true = true\n  let tokenType: TokenTypes = TokenTypes.type\n  const storeToken = () => {\n    if (tokenA) {\n      switch (tokenType) {\n        case TokenTypes.attribute:\n          attributes[tokenA] = tokenB === true ? true : tokenB\n          tokenB = true\n          break\n\n        case TokenTypes.class:\n          if (!attributes.class) {\n            attributes.class = tokenA\n            break\n          }\n          attributes.class += ' ' + tokenA\n          break\n\n        case TokenTypes.id:\n          attributes.id = tokenA\n          break\n\n        case TokenTypes.type:\n          type = tokenA\n          break\n      }\n      tokenA = ''\n    }\n  }\n\n  let character: string\n\n  let attributeBracketCount: number\n  const parseAttribute = (\n  ): void => {\n    attributeBracketCount = 0\n\n    while (i < length) {\n      character = selector[i]\n      i++\n      if (character === EQUAL) {\n        // Parse attribute value.\n        tokenB = ''\n        character = selector[i]\n        const endOnDoubleQuote = character === QUOTE_DOUBLE\n        const endOnSingleQuote = character === QUOTE_SINGLE\n        if (endOnDoubleQuote || endOnSingleQuote) {\n          tokenB += character\n          i++\n        }\n\n        while (i < length) {\n          character = selector[i]\n          if (\n            (endOnDoubleQuote && character === QUOTE_DOUBLE) ||\n            (endOnSingleQuote && character === QUOTE_SINGLE)\n          ) {\n            tokenB += character\n            i++\n            break\n          } else if (\n            !endOnDoubleQuote &&\n            !endOnSingleQuote &&\n            character === BRACKET_CLOSE\n          ) {\n            break\n          }\n          tokenB += character\n          i++\n        }\n\n        if (\n          (\n            tokenB[0] === QUOTE_DOUBLE &&\n            tokenB[tokenB.length - 1] === QUOTE_DOUBLE\n          ) ||\n          (\n            tokenB[0] === QUOTE_SINGLE &&\n            tokenB[tokenB.length - 1] === QUOTE_SINGLE\n          )\n        ) {\n          tokenB = tokenB.substring(1, tokenB.length - 1)\n        }\n\n\n        // Consume until closing bracket, but don't store the tokes since these are invalid.\n        while (i < length) {\n          character = selector[i]\n          i++\n          if (character === BRACKET_CLOSE) {\n            break\n          }\n        }\n        break\n      } else if (character === BRACKET_OPEN) {\n        attributeBracketCount++\n        continue\n      } else if (character === BRACKET_CLOSE) {\n        attributeBracketCount--\n        if (attributeBracketCount < 0) {\n          break\n        }\n        continue\n      }\n\n      tokenA += character\n    }\n    storeToken()\n  }\n\n  while (i < length) {\n    character = selector[i]\n    i++\n\n    if (character === HASH) {\n      storeToken()\n      tokenType = TokenTypes.id\n      continue\n    } else if (character === DOT) {\n      storeToken()\n      tokenType = TokenTypes.class\n      continue\n    } else if (character === BRACKET_OPEN) {\n      storeToken()\n      tokenType = TokenTypes.attribute\n      parseAttribute()\n      continue\n    }\n\n    tokenA += character\n  }\n\n  return [type, attributes]\n}\n", "\nimport {\n  node,\n  NodeAbstract,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\nimport {\n  selectorToTokenizer,\n} from './selector.js'\n\nexport type Fctory = (\n  attributes?: string,\n  contents?: NodeContent[] | NodeContent,\n) => NodeAbstract\n\nexport type FctoryCache = {\n  [key: string]: Fctory,\n}\n\nexport const fctory = new Proxy({}, {\n  get: (\n    target: FctoryCache,\n    type: string,\n  ): Fctory => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      selector?: string,\n      contents?: NodeContent[] | NodeContent,\n    ): NodeAbstract => {\n      let attributes: NodeAttributes | undefined\n      if (selector) {\n        const [_, _attributes] = selectorToTokenizer(selector)\n        attributes = _attributes\n      }\n      return node(\n        typeConverted,\n        attributes,\n        contents,\n      )\n    }\n  },\n})\n", "import {\n  marker,\n} from './marker.js'\nimport {\n  NodeAbstract,\n  NodeContent,\n} from './node.js'\nimport {\n  selectorToTokenizer,\n} from './selector.js'\n\nexport const nde = (\n  selector: string,\n  contents?: NodeContent[] | NodeContent,\n): NodeAbstract => {\n  const [type, attributes] = selectorToTokenizer(selector)\n  return {\n    _: marker,\n    a: attributes,\n    c: (\n      contents\n        ? Array.isArray(contents)\n          ? contents\n          : [contents] as NodeContent[]\n        : []\n    ),\n    t: type.toUpperCase(),\n  }\n}\n", "import {\n  marker\n} from './marker.js'\n\nexport type TextAbstract = {\n  _: Symbol,\n  // Contents\n  c: string\n}\n\nexport const text = (\n  contents: number | string | (number | string)[],\n): TextAbstract => ({\n  _: marker,\n  c: (\n    Array.isArray(contents)\n      ? contents.join('')\n      : ('' + contents)\n  ),\n})\n", "export const arrayify = function <T>(\n  data: T[] | T,\n): T[] {\n  if (Array.isArray(data)) {\n    return data\n  }\n  return [\n    data,\n  ]\n}\n", "import {\n  node,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\n\nexport const childrenToNodes = (\n  element: Element | ChildNode,\n) => {\n  const children: NodeContent[] = []\n  for (let i = 0; i < element.childNodes.length; i++) {\n    if (element instanceof Text) {\n      children.push(\n        element.textContent ?? ''\n      )\n    } else {\n      let attributes: NodeAttributes = {}\n      for (let i = 0; i < (element as Element).attributes.length; i++) {\n        const attribute = (element as Element).attributes[i]\n        attributes[attribute.name] = attribute.value\n      }\n\n      children.push(\n        node(\n          element.nodeName,\n          attributes,\n          childrenToNodes(element),\n        )\n      )\n    }\n  }\n  return children\n}\n", "import {\n  arrayify,\n} from '@doars/staark-common/src/array.js'\nimport {\n  childrenToNodes,\n} from '@doars/staark-common/src/element.js'\nimport {\n  NodeAbstract,\n  NodeAttributes,\n  NodeAttributeListener,\n  NodeContent,\n} from '@doars/staark-common/src/node.js'\nimport {\n  TextAbstract,\n} from '@doars/staark-common/src/text.js'\n\ntype PatchFunction = (\n  newAbstractTree: NodeContent[] | NodeContent,\n) => void\n\nconst MATCH_CAPITALS = /[A-Z]+(?![a-z])|[A-Z]/g\nconst HYPHENATE = (\n  part: string,\n  offset: number,\n) => (offset ? '-' : '') + part\n\nconst updateAttributes = (\n  element: Element,\n  newAttributes?: NodeAttributes,\n  oldAttributes?: NodeAttributes,\n): void => {\n  if (newAttributes) {\n    for (const name in newAttributes) {\n      let value = newAttributes[name]\n      if (value) {\n        const type = typeof (value)\n        if (type === 'function') {\n          element.addEventListener(name, value as NodeAttributeListener)\n          continue\n        } else {\n          if (name === 'class') {\n            if (typeof (value) === 'object') {\n              if (Array.isArray(value)) {\n                value = value.join(' ')\n              } else {\n                let classNames: string = ''\n                for (const className in value) {\n                  if (value[className]) {\n                    classNames += ' ' + className\n                  }\n                }\n                value = classNames\n              }\n            }\n          } else if (name === 'style') {\n            if (typeof (value) === 'object') {\n              if (Array.isArray(value)) {\n                value = value.join(';')\n              } else {\n                let styles: string = ''\n                for (let styleProperty in value) {\n                  let styleValue: boolean | string | number | (boolean | string | number)[] = value[styleProperty]\n\n                  // Convert to kebab case.\n                  styleProperty = styleProperty\n                    .replace(MATCH_CAPITALS, HYPHENATE)\n                    .toLowerCase()\n\n                  if (Array.isArray(styleValue)) {\n                    styles += ';' + styleProperty + ':' + styleValue.join(' ')\n                  } else if (styleValue) {\n                    styles += ';' + styleProperty + ':' + styleValue\n                  }\n                }\n                value = styles\n              }\n            }\n          } else {\n            // Ensure it is of type string.\n            if (type === 'boolean') {\n              value = 'true'\n            } else if (type !== 'string') {\n              value = value.toString()\n            }\n\n            if (\n              name === 'value'\n              && (element as HTMLInputElement).value !== value\n            ) {\n              // Update value separately as well.\n              (element as HTMLInputElement).value = value as string\n              // Don't dispatch a change event, the re-rendering should update everything: element.dispatchEvent(new Event('change'))\n            } else if (name === 'checked') {\n              (element as HTMLInputElement).checked = newAttributes[name] as boolean\n              // Don't dispatch a change event, the re-rendering should update everything: element.dispatchEvent(new Event('change'))\n            }\n          }\n\n          element.setAttribute(name, (value as string))\n        }\n      }\n    }\n  }\n\n  // Cleanup old attributes.\n  if (oldAttributes) {\n    for (const name in oldAttributes) {\n      if (typeof (oldAttributes[name]) === 'function') {\n        element.removeEventListener(\n          name,\n          oldAttributes[name] as NodeAttributeListener,\n        )\n      } else if (\n        !newAttributes\n        || !(name in newAttributes)\n        || !newAttributes[name]\n      ) {\n        if (name === 'value') {\n          // Reset value separately.\n          (element as HTMLInputElement).value = ''\n          // Don't dispatch the input change event, the rerendering should update everything: element.dispatchEvent(new Event('change'))\n        } else if (name === 'checked') {\n          (element as HTMLInputElement).checked = false\n        }\n        element.removeAttribute(name)\n      }\n    }\n  }\n}\n\nexport const prepare = (\n  rootElement: Element | string,\n  oldAbstractTree?: NodeContent[] | string,\n): PatchFunction => {\n  const updateElementTree = (\n    element: Element,\n    newChildAbstracts?: NodeContent[],\n    oldChildAbstracts?: NodeContent[],\n    elementAbstract?: NodeContent,\n  ): void => {\n    let newIndex = 0\n    let newCount = 0\n    if (newChildAbstracts) {\n      for (; newIndex < newChildAbstracts.length; newIndex++) {\n        const newAbstract = newChildAbstracts[newIndex]\n\n        // Try to find the matching old abstract.\n        let matched = false\n        if (oldChildAbstracts) {\n          for (let oldIndex = newIndex - newCount; oldIndex < oldChildAbstracts.length; oldIndex++) {\n            const oldAbstract = oldChildAbstracts[oldIndex];\n            if (\n              (\n                (oldAbstract as NodeAbstract).t\n                && (newAbstract as NodeAbstract).t === (oldAbstract as NodeAbstract).t\n              )\n              || (\n                !(oldAbstract as NodeAbstract).t\n                && !(newAbstract as NodeAbstract).t\n              )\n            ) {\n              matched = true\n\n              if (newIndex !== oldIndex) {\n                // Move node in dom.\n                element.insertBefore(\n                  element.childNodes[oldIndex + newCount],\n                  element.childNodes[newIndex],\n                )\n                // Move node in abstract tree.\n                oldChildAbstracts.splice(\n                  newIndex - newCount,\n                  0,\n                  ...oldChildAbstracts.splice(\n                    oldIndex,\n                    1,\n                  )\n                )\n              }\n              if ((newAbstract as NodeAbstract).t) {\n                updateAttributes(\n                  (element.childNodes[newIndex] as Element),\n                  (newAbstract as NodeAbstract).a,\n                  (oldAbstract as NodeAbstract).a,\n                )\n                updateElementTree(\n                  (element.childNodes[newIndex] as Element),\n                  (newAbstract as NodeAbstract).c,\n                  (oldAbstract as NodeAbstract).c,\n                  oldAbstract,\n                )\n              } else {\n                element.childNodes[newIndex].textContent = (\n                  typeof (newAbstract) === 'string'\n                    ? newAbstract\n                    : (newAbstract as TextAbstract).c\n                )\n              }\n              break\n            }\n          }\n        }\n\n        if (!matched) {\n          let childElement: Element | string\n          if ((newAbstract as NodeAbstract).t) {\n            childElement = document.createElement(\n              (newAbstract as NodeAbstract).t\n            )\n\n            if ((newAbstract as NodeAbstract).a) {\n              updateAttributes(\n                childElement,\n                (newAbstract as NodeAbstract).a,\n              )\n            }\n            if ((newAbstract as NodeAbstract).c) {\n              updateElementTree(\n                childElement,\n                (newAbstract as NodeAbstract).c,\n              )\n            }\n\n            const insertAdjacentElement = (\n              element: Node,\n              elementAbstract: NodeContent | null | undefined,\n              position: InsertPosition,\n            ) => {\n              if (\n                !elementAbstract\n                || (elementAbstract as NodeAbstract).t\n              ) {\n                (element as Element)\n                  .insertAdjacentElement(\n                    position,\n                    childElement as Element,\n                  )\n              } else {\n                // Otherwise the position is always 'beforebegin'.\n                (element.parentNode as Element)\n                  .insertBefore(\n                    childElement as Element,\n                    element,\n                  )\n              }\n            }\n            if (newIndex === 0) {\n              insertAdjacentElement(\n                element,\n                elementAbstract,\n                'afterbegin',\n              )\n            } else if ((oldChildAbstracts?.length ?? 0) + newCount > newIndex) {\n              insertAdjacentElement(\n                (element.childNodes[newIndex] as Node),\n                (oldChildAbstracts as NodeContent[])[newIndex + newCount],\n                'beforebegin',\n              )\n            } else {\n              insertAdjacentElement(\n                element,\n                elementAbstract,\n                'beforeend',\n              )\n            }\n            newCount++\n          } else {\n            childElement = (\n              typeof (newAbstract) === 'string'\n                ? newAbstract\n                : (newAbstract as TextAbstract).c\n            )\n\n            const insertAdjacentText = (\n              element: Node,\n              elementAbstract: NodeContent | null | undefined,\n              position: InsertPosition,\n            ) => {\n              if (\n                !elementAbstract\n                || (elementAbstract as NodeAbstract).t\n              ) {\n                (element as Element)\n                  .insertAdjacentText(\n                    position,\n                    childElement as string,\n                  )\n              } else {\n                // Otherwise the position is always 'beforebegin'.\n                (element.parentNode as Element)\n                  .insertBefore(\n                    document.createTextNode(childElement as string),\n                    element.nextSibling,\n                  )\n              }\n            }\n            if (newIndex === 0) {\n              insertAdjacentText(\n                element,\n                elementAbstract,\n                'afterbegin',\n              )\n            } else if ((oldChildAbstracts?.length ?? 0) + newCount > newIndex) {\n              insertAdjacentText(\n                element.childNodes[newIndex] as Node,\n                (oldChildAbstracts as NodeContent[])[newIndex + newCount],\n                'beforebegin',\n              )\n            } else {\n              insertAdjacentText(\n                element,\n                elementAbstract,\n                'beforeend',\n              )\n            }\n            newCount++\n          }\n        }\n      }\n    }\n\n    // Remove old elements.\n    const elementLength = (oldChildAbstracts?.length ?? 0) + newCount\n    if (elementLength >= newIndex) {\n      for (let i = elementLength - 1; i >= newIndex; i--) {\n        element.childNodes[i].remove()\n      }\n    }\n  }\n\n  const _rootElement = (\n    typeof (rootElement) === 'string'\n      ? (\n        document.querySelector(rootElement)\n        || document.body.appendChild(\n          document.createElement('div')\n        )\n      )\n      : rootElement\n  )\n\n  if (typeof (oldAbstractTree) === 'string') {\n    try {\n      oldAbstractTree = JSON.parse(oldAbstractTree) as NodeContent[]\n    } catch (error) {\n      oldAbstractTree = undefined\n    }\n  }\n  oldAbstractTree ??= childrenToNodes(_rootElement)\n\n  return (\n    newAbstractTree: NodeContent[] | NodeContent,\n  ): void => {\n    newAbstractTree = arrayify(newAbstractTree)\n    updateElementTree(\n      _rootElement,\n      newAbstractTree,\n      oldAbstractTree as NodeContent[],\n    )\n    oldAbstractTree = newAbstractTree\n  }\n}\n"],
  "mappings": "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",
  "names": ["marker", "node", "type", "attributesOrContents", "contents", "marker", "factory", "target", "type", "typeConverted", "capital", "attributesOrContents", "contents", "node", "BRACKET_CLOSE", "BRACKET_OPEN", "DOT", "EQUAL", "HASH", "QUOTE_SINGLE", "QUOTE_DOUBLE", "selectorToTokenizer", "selector", "length", "i", "type", "attributes", "tokenA", "tokenB", "tokenType", "storeToken", "character", "attributeBracketCount", "parseAttribute", "EQUAL", "endOnDoubleQuote", "QUOTE_DOUBLE", "endOnSingleQuote", "QUOTE_SINGLE", "BRACKET_CLOSE", "BRACKET_OPEN", "HASH", "DOT", "fctory", "target", "type", "typeConverted", "capital", "selector", "contents", "attributes", "_", "_attributes", "selectorToTokenizer", "node", "nde", "selector", "contents", "type", "attributes", "selectorToTokenizer", "marker", "text", "contents", "marker", "arrayify", "data", "childrenToNodes", "element", "_a", "children", "i", "attributes", "attribute", "node", "MATCH_CAPITALS", "HYPHENATE", "part", "offset", "updateAttributes", "element", "newAttributes", "oldAttributes", "name", "value", "type", "classNames", "className", "styles", "styleProperty", "styleValue", "prepare", "rootElement", "oldAbstractTree", "updateElementTree", "newChildAbstracts", "oldChildAbstracts", "elementAbstract", "_a", "_b", "_c", "newIndex", "newCount", "newAbstract", "matched", "oldIndex", "oldAbstract", "childElement", "insertAdjacentElement", "position", "insertAdjacentText", "elementLength", "i", "_rootElement", "error", "childrenToNodes", "newAbstractTree", "arrayify"]
}
