{
  "version": 3,
  "sources": ["../../staark-common/src/array.ts", "../../staark-common/src/marker.ts", "../../staark-common/src/node.ts", "../../staark-common/src/element.ts", "../src/library/patch.ts"],
  "sourcesContent": ["/**\n * Ensure the data is an array of not already. Non-truthy values are converted to empty arrays.\n * @param data Data to arrify\n * @returns An array with the data.\n */\nexport const arrayify = <T>(\n  data: T[] | T,\n): T[] => arrayifyOrUndefined(data) ?? []\n\n/**\n * Ensure the data is an array of not already. Non-truthy values are converted to undefined.\n * @param data Data to arrify\n * @returns An array with the data or undefined.\n */\nexport const arrayifyOrUndefined = <T>(\n  data: T[] | T,\n): T[] | undefined => (\n  data\n    ? Array.isArray(data)\n      ? data :\n      [data,]\n    : undefined\n)\n", "export const marker = 'n'\n", "import {\n  arrayifyOrUndefined\n} from './array.js'\nimport {\n  marker,\n} from './marker.js'\nimport {\n  MemoAbstract,\n} from './memo.js'\n\ntype _NodeAttributeListener = {\n  (event: Event, state: Record<string, any>): unknown\n  (event: Event): unknown\n  (): unknown\n}\n\nexport interface NodeAttributeListener extends _NodeAttributeListener {\n  f?: _NodeAttributeListener\n}\n\nexport type NodeAttributes =\n  Record<string,\n    boolean |\n    null |\n    number |\n    string |\n    (number | string)[] |\n    NodeAttributeListener |\n    Record<string,\n      boolean | number | string\n    >\n  >\n\nexport type NodeContent =\n  string |\n  MemoAbstract |\n  NodeAbstract\n\nexport type NodeAbstract = {\n  // Discriminator\n  _: string,\n  // Attributes\n  a?: NodeAttributes\n  // Content\n  c?: NodeContent[]\n  // Node type\n  t: string\n}\n\nexport const node = (\n  type: string,\n  attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n  contents?: NodeContent[] | NodeContent,\n): NodeAbstract => {\n  if (\n    typeof (attributesOrContents) !== 'object'\n    || (attributesOrContents as NodeAbstract)._ === marker\n    || Array.isArray(attributesOrContents)\n  ) {\n    contents = attributesOrContents as NodeContent\n    attributesOrContents = undefined\n  }\n\n  return {\n    _: marker,\n    a: attributesOrContents as (NodeAttributes | undefined),\n    c: arrayifyOrUndefined(contents) as NodeContent[] | undefined,\n    t: type.toUpperCase(),\n  }\n}\n", "import {\n  node,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\n\nexport const childrenToNodes = (\n  element: Element | ChildNode,\n) => {\n  const abstractChildNodes: NodeContent[] = []\n  for (const childNode of element.childNodes) {\n    if (childNode instanceof Text) {\n      abstractChildNodes.push(\n        childNode.textContent ?? ''\n      )\n    } else {\n      const elementChild = childNode as Element\n      const attributes: NodeAttributes = {}\n      for (const attribute of elementChild.attributes) {\n        attributes[attribute.name] = attribute.value\n      }\n\n      abstractChildNodes.push(\n        node(\n          childNode.nodeName,\n          attributes,\n          childrenToNodes(childNode),\n        )\n      )\n    }\n  }\n  return abstractChildNodes\n}\n", "import {\n  arrayifyOrUndefined,\n} from '@doars/staark-common/src/array.js'\nimport {\n  childrenToNodes,\n} from '@doars/staark-common/src/element.js'\nimport {\n  NodeAbstract,\n  NodeAttributes,\n  NodeAttributeListener,\n  NodeContent,\n} from '@doars/staark-common/src/node.js'\n\nexport type PatchFunction = (\n  newAbstractTree: NodeContent[] | NodeContent,\n) => void\n\nconst MATCH_CAPITALS = /[A-Z]+(?![a-z])|[A-Z]/g\nconst HYPHENATE = (\n  part: string,\n  offset: number,\n) => (offset ? '-' : '') + part\n\nconst updateAttributes = (\n  element: Element,\n  newAttributes?: NodeAttributes,\n  oldAttributes?: NodeAttributes,\n): void => {\n  if (newAttributes) {\n    for (const name in newAttributes) {\n      let value = newAttributes[name]\n      if (value) {\n        const type = typeof (value)\n        if (type === 'function') {\n          const oldValue = oldAttributes?.[name]\n          if (oldValue !== value) {\n            if (oldValue) {\n              element.removeEventListener(\n                name,\n                oldValue as NodeAttributeListener,\n              )\n            }\n\n            element.addEventListener(\n              name,\n              value as NodeAttributeListener,\n            )\n          }\n        } else {\n          if (name === 'class') {\n            if (typeof (value) === 'object') {\n              if (Array.isArray(value)) {\n                value = value.join(' ')\n              } else {\n                let classNames: string = ''\n                for (const className in value) {\n                  if (value[className]) {\n                    classNames += ' ' + className\n                  }\n                }\n                value = classNames\n              }\n            }\n            element.className = value as string\n          } else if (\n            name === 'style'\n            && typeof (value) === 'object'\n          ) {\n            // Apply updated styles.\n            for (let styleName in value) {\n              let styleValue = (value as Record<string, boolean | string | null | undefined | number | (boolean | string | number)[]>)[styleName]\n\n              // Convert to kebab case.\n              styleName = styleName\n                .replace(MATCH_CAPITALS, HYPHENATE)\n                .toLowerCase()\n\n              if (Array.isArray(styleValue)) {\n                styleValue = styleValue.join(' ')\n              }\n\n              (element as HTMLElement).style.setProperty(\n                styleName,\n                styleValue as string,\n              )\n            }\n\n            // Remove old styles.\n            if (\n              oldAttributes\n              && oldAttributes[name]\n              && typeof (oldAttributes[name]) === 'object'\n              && !Array.isArray(oldAttributes[name])\n            ) {\n              for (let styleName in oldAttributes[name]) {\n                if (!(styleName in value)) {\n                  styleName = styleName\n                    .replace(MATCH_CAPITALS, HYPHENATE)\n                    .toLowerCase();\n\n                  (element as HTMLElement).style.removeProperty(\n                    styleName,\n                  )\n                }\n              }\n            }\n          } else {\n            // Ensure it is of type string.\n            if (value === true) {\n              value = 'true'\n            } else if (type !== 'string') {\n              value = value.toString()\n            }\n\n            // Setting attribute will automatically update the elements checked and value state.\n            // if (\n            //   name === 'value'\n            //   && (element as HTMLInputElement).value !== value\n            // ) {\n            // (element as HTMLInputElement).value = value as string\n            // Don't dispatch a change event, the re-rendering should update everything: element.dispatchEvent(new Event('change'))\n            // } else if (name === 'checked') {\n            //   (element as HTMLInputElement).checked = !!value\n            // Don't dispatch a change event, the re-rendering should update everything: element.dispatchEvent(new Event('change'))\n            // }\n\n            element.setAttribute(name, (value as string))\n          }\n        }\n      }\n    }\n  }\n\n  // Cleanup old attributes.\n  if (oldAttributes) {\n    for (const name in oldAttributes) {\n      if (\n        !newAttributes\n        || !newAttributes[name]\n      ) {\n        if (typeof (oldAttributes[name]) === 'function') {\n          element.removeEventListener(\n            name,\n            oldAttributes[name] as NodeAttributeListener,\n          )\n        } else if (name === 'class') {\n          element.className = ''\n        } else if (name === 'style') {\n          (element as HTMLElement).style.cssText = ''\n        } else {\n          // Setting attribute will automatically update the elements checked and value state.\n          // if (name === 'value') {\n          // (element as HTMLInputElement).value = ''\n          // Don't dispatch the input change event, the rerendering should update everything: element.dispatchEvent(new Event('change'))\n          // } else if (name === 'checked') {\n          //   (element as HTMLInputElement).checked = false\n          // }\n          element.removeAttribute(name)\n        }\n      }\n    }\n  }\n}\n\nconst updateElementTree = (\n  element: Element,\n  newChildAbstracts?: NodeContent[],\n  oldChildAbstracts?: NodeContent[],\n  elementAbstract?: NodeContent,\n): void => {\n  let newIndex = 0\n  let newCount = 0\n  if (newChildAbstracts) {\n    for (; newIndex < newChildAbstracts.length; newIndex++) {\n      const newAbstract = newChildAbstracts[newIndex]\n\n      // Try to find the matching old abstract.\n      let matched = false\n      if (oldChildAbstracts) {\n        for (let oldIndex = newIndex - newCount; oldIndex < oldChildAbstracts.length; oldIndex++) {\n          const oldAbstract = oldChildAbstracts[oldIndex];\n          if (\n            (\n              (oldAbstract as NodeAbstract).t\n              && (newAbstract as NodeAbstract).t === (oldAbstract as NodeAbstract).t\n            )\n            || (\n              !(oldAbstract as NodeAbstract).t\n              && !(newAbstract as NodeAbstract).t\n            )\n          ) {\n            matched = true\n\n            if (newIndex !== (oldIndex + newCount)) {\n              // Move node in dom.\n              element.insertBefore(\n                element.childNodes[oldIndex + newCount],\n                element.childNodes[newIndex],\n              )\n              // Move node in abstract tree.\n              oldChildAbstracts.splice(\n                newIndex - newCount,\n                0,\n                ...oldChildAbstracts.splice(\n                  oldIndex,\n                  1,\n                )\n              )\n            }\n\n            if ((newAbstract as NodeAbstract).t) {\n              updateAttributes(\n                (element.childNodes[newIndex] as Element),\n                (newAbstract as NodeAbstract).a,\n                (oldAbstract as NodeAbstract).a,\n              )\n              updateElementTree(\n                (element.childNodes[newIndex] as Element),\n                (newAbstract as NodeAbstract).c,\n                (oldAbstract as NodeAbstract).c,\n                oldAbstract,\n              )\n            } else if (oldAbstract !== newAbstract) {\n              element.childNodes[newIndex].textContent = newAbstract as string\n            }\n            break\n          }\n        }\n      }\n\n      if (!matched) {\n        let childElement: Element | string\n        if ((newAbstract as NodeAbstract).t) {\n          childElement = document.createElement(\n            (newAbstract as NodeAbstract).t\n          )\n\n          if ((newAbstract as NodeAbstract).a) {\n            updateAttributes(\n              childElement,\n              (newAbstract as NodeAbstract).a,\n            )\n          }\n          if ((newAbstract as NodeAbstract).c) {\n            updateElementTree(\n              childElement,\n              (newAbstract as NodeAbstract).c,\n            )\n          }\n\n          const insertAdjacentElement = (\n            element: Node,\n            elementAbstract?: NodeContent | null,\n            position?: InsertPosition,\n          ) => {\n            if (\n              position &&\n              (\n                !elementAbstract\n                || (elementAbstract as NodeAbstract).t\n              )\n            ) {\n              (element as Element)\n                .insertAdjacentElement(\n                  position,\n                  childElement as Element,\n                )\n            } else {\n              // Otherwise the position is always 'beforebegin'.\n              (element.parentNode as Element)\n                .insertBefore(\n                  childElement as Element,\n                  element,\n                )\n            }\n          }\n          if (newIndex === 0) {\n            insertAdjacentElement(\n              element,\n              elementAbstract,\n              'afterbegin',\n            )\n          } else if ((oldChildAbstracts?.length ?? 0) + newCount > newIndex) {\n            insertAdjacentElement(\n              (element.childNodes[newIndex] as Node),\n              // (oldChildAbstracts as NodeContent[])[newIndex + newCount],\n              // 'beforebegin',\n            )\n          } else {\n            insertAdjacentElement(\n              element,\n              elementAbstract,\n              'beforeend',\n            )\n          }\n        } else {\n          const insertAdjacentText = (\n            element: Node,\n            elementAbstract?: NodeContent | null,\n            position?: InsertPosition,\n          ) => {\n            if (\n              position &&\n              (\n                !elementAbstract\n                || (elementAbstract as NodeAbstract).t\n              )\n            ) {\n              (element as Element)\n                .insertAdjacentText(\n                  position,\n                  newAbstract as string,\n                )\n            } else {\n              // Otherwise the position is always 'beforebegin'.\n              (element.parentNode as Element)\n                .insertBefore(\n                  document.createTextNode(newAbstract as string),\n                  element,\n                )\n            }\n          }\n          if (newIndex === 0) {\n            insertAdjacentText(\n              element,\n              elementAbstract,\n              'afterbegin',\n            )\n          } else if ((oldChildAbstracts?.length ?? 0) + newCount > newIndex) {\n            insertAdjacentText(\n              element.childNodes[newIndex] as Node,\n              // (oldChildAbstracts as NodeContent[])[newIndex + newCount],\n              // 'beforebegin',\n            )\n          } else {\n            insertAdjacentText(\n              element,\n              elementAbstract,\n              'beforeend',\n            )\n          }\n        }\n        newCount++\n      }\n    }\n  }\n\n  // Remove old elements.\n  const elementLength = (oldChildAbstracts?.length ?? 0) + newCount\n  if (elementLength >= newIndex) {\n    for (let i = elementLength - 1; i >= newIndex; i--) {\n      element.childNodes[i].remove()\n    }\n  }\n}\n\nexport const prepare = (\n  rootElement: HTMLElement | Element | string,\n  oldAbstractTree?: NodeContent[] | string,\n): PatchFunction => {\n  const _rootElement = (\n    typeof (rootElement) === 'string'\n      ? (\n        document.querySelector(rootElement)\n        || document.body.appendChild(\n          document.createElement('div')\n        )\n      )\n      : rootElement\n  )\n\n  if (typeof (oldAbstractTree) === 'string') {\n    try {\n      oldAbstractTree = JSON.parse(oldAbstractTree) as NodeContent[]\n    } catch (error) {\n      oldAbstractTree = undefined\n    }\n  }\n  oldAbstractTree ??= childrenToNodes(_rootElement)\n\n  return (\n    newAbstractTree: NodeContent[] | NodeContent | undefined,\n  ): void => {\n    newAbstractTree = arrayifyOrUndefined(newAbstractTree) as NodeContent[] | undefined\n    updateElementTree(\n      _rootElement,\n      newAbstractTree,\n      oldAbstractTree as NodeContent[],\n    )\n    oldAbstractTree = newAbstractTree\n  }\n}\n"],
  "mappings": "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",
  "names": ["element", "elementAbstract"]
}
