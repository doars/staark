{
  "version": 3,
  "sources": ["../../staark-common/src/marker.ts", "../../staark-common/src/node.ts", "../../staark-common/src/array.ts", "../../staark-common/src/element.ts", "../src/library/patch.ts"],
  "sourcesContent": ["export const marker = Symbol()\n", "import {\n  marker,\n} from './marker.js'\nimport {\n  MemoAbstract,\n} from './memo.js'\nimport {\n  TextAbstract,\n} from './text.js'\n\nexport type NodeAttributeListener = (\n  event: Event\n) => unknown\n\nexport type NodeAttributes =\n  Record<string,\n    boolean |\n    null |\n    number |\n    string |\n    (number | string)[] |\n    NodeAttributeListener |\n    Record<string,\n      boolean | number | string\n    >\n  >\n\nexport type NodeContent =\n  string |\n  MemoAbstract |\n  NodeAbstract |\n  TextAbstract\n\nexport type NodeAbstract = {\n  _: Symbol\n  // Attributes\n  a?: NodeAttributes\n  // Content\n  c?: NodeContent[]\n  // Node type\n  t: string\n}\n\nexport const node = (\n  type: string,\n  attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n  contents?: NodeContent[] | NodeContent,\n): NodeAbstract => {\n  if (\n    typeof (attributesOrContents) !== 'object'\n    || (attributesOrContents as NodeAbstract)._ === marker\n    || Array.isArray(attributesOrContents)\n  ) {\n    contents = attributesOrContents as NodeContent\n    attributesOrContents = undefined\n  }\n\n  return {\n    _: marker,\n    a: attributesOrContents as (NodeAttributes | undefined),\n    c: (\n      contents\n        ? Array.isArray(contents)\n          ? contents\n          : [contents] as NodeContent[]\n        : []\n    ),\n    t: type.toUpperCase(),\n  }\n}\n", "export const arrayify = function <T>(\n  data: T[] | T,\n): T[] {\n  if (Array.isArray(data)) {\n    return data\n  }\n  return [\n    data,\n  ]\n}\n", "import {\n  node,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\n\nexport const childrenToNodes = (\n  element: Element | ChildNode,\n) => {\n  const abstractChildNodes: NodeContent[] = []\n  for (let i = 0; i < element.childNodes.length; i++) {\n    const childNode = element.childNodes[i]\n    if (childNode instanceof Text) {\n      abstractChildNodes.push(\n        childNode.textContent ?? ''\n      )\n    } else {\n      let attributes: NodeAttributes = {}\n      for (let i = 0; i < (childNode as Element).attributes.length; i++) {\n        const attribute = (childNode as Element).attributes[i]\n        attributes[attribute.name] = attribute.value\n      }\n\n      abstractChildNodes.push(\n        node(\n          childNode.nodeName,\n          attributes,\n          childrenToNodes(childNode),\n        )\n      )\n    }\n  }\n  return abstractChildNodes\n}\n", "import {\n  arrayify,\n} from '@doars/staark-common/src/array.js'\nimport {\n  childrenToNodes,\n} from '@doars/staark-common/src/element.js'\nimport {\n  NodeAbstract,\n  NodeAttributes,\n  NodeAttributeListener,\n  NodeContent,\n} from '@doars/staark-common/src/node.js'\nimport {\n  TextAbstract,\n} from '@doars/staark-common/src/text.js'\n\nconst MATCH_CAPITALS = /[A-Z]+(?![a-z])|[A-Z]/g\nconst HYPHENATE = (\n  part: string,\n  offset: number,\n) => (offset ? '-' : '') + part\n\nexport type PatchFunction = (\n  newAbstractTree: NodeContent[] | NodeContent,\n) => void\n\nconst updateAttributes = (\n  element: Element,\n  newAttributes?: NodeAttributes,\n  oldAttributes?: NodeAttributes,\n): void => {\n  if (newAttributes) {\n    for (const name in newAttributes) {\n      let value = newAttributes[name]\n      if (value) {\n        const type = typeof (value)\n        if (type === 'function') {\n          element.addEventListener(name, value as NodeAttributeListener)\n          continue\n        } else {\n          if (name === 'class') {\n            if (typeof (value) === 'object') {\n              if (Array.isArray(value)) {\n                value = value.join(' ')\n              } else {\n                let classNames: string = ''\n                for (const className in value) {\n                  if (value[className]) {\n                    classNames += ' ' + className\n                  }\n                }\n                value = classNames\n              }\n            }\n          } else if (name === 'style') {\n            if (typeof (value) === 'object') {\n              if (Array.isArray(value)) {\n                value = value.join(';')\n              } else {\n                let styles: string = ''\n                for (let styleProperty in value) {\n                  let styleValue: boolean | string | number | (boolean | string | number)[] = value[styleProperty]\n\n                  // Convert to kebab case.\n                  styleProperty = styleProperty\n                    .replace(MATCH_CAPITALS, HYPHENATE)\n                    .toLowerCase()\n\n                  if (Array.isArray(styleValue)) {\n                    styles += ';' + styleProperty + ':' + styleValue.join(' ')\n                  } else if (styleValue) {\n                    styles += ';' + styleProperty + ':' + styleValue\n                  }\n                }\n                value = styles\n              }\n            }\n          } else {\n            // Ensure it is of type string.\n            if (type === 'boolean') {\n              if (!value) {\n                element.removeAttribute(name)\n                continue\n              }\n              value = 'true'\n            } else if (type !== 'string') {\n              value = value.toString()\n            }\n\n            if (\n              name === 'value'\n              && (element as HTMLInputElement).value !== value\n            ) {\n              // Update value separately as well.\n              (element as HTMLInputElement).value = value as string\n              // Don't dispatch a change event, the re-rendering should update everything: element.dispatchEvent(new Event('change'))\n            } else if (name === 'checked') {\n              (element as HTMLInputElement).checked = newAttributes[name] as boolean\n              // Don't dispatch a change event, the re-rendering should update everything: element.dispatchEvent(new Event('change'))\n            }\n          }\n\n          element.setAttribute(name, (value as string))\n        }\n      }\n    }\n  }\n\n  // Cleanup old attributes.\n  if (oldAttributes) {\n    for (const name in oldAttributes) {\n      if (typeof (oldAttributes[name]) === 'function') {\n        element.removeEventListener(\n          name,\n          oldAttributes[name] as NodeAttributeListener,\n        )\n      } else if (\n        !newAttributes\n        || !(name in newAttributes)\n        || !newAttributes[name]\n      ) {\n        if (name === 'value') {\n          // Reset value separately.\n          (element as HTMLInputElement).value = ''\n          // Don't dispatch the input change event, the rerendering should update everything: element.dispatchEvent(new Event('change'))\n        } else if (name === 'checked') {\n          (element as HTMLInputElement).checked = false\n        }\n        element.removeAttribute(name)\n      }\n    }\n  }\n}\n\nexport const prepare = (\n  rootElement: HTMLElement | Element | string,\n  oldAbstractTree?: NodeContent[] | string,\n): PatchFunction => {\n  const updateElementTree = (\n    element: Element,\n    newChildAbstracts?: NodeContent[],\n    oldChildAbstracts?: NodeContent[],\n    elementAbstract?: NodeContent,\n  ): void => {\n    let newIndex = 0\n    let newCount = 0\n    if (newChildAbstracts) {\n      for (; newIndex < newChildAbstracts.length; newIndex++) {\n        const newAbstract = newChildAbstracts[newIndex]\n\n        // Try to find the matching old abstract.\n        let matched = false\n        if (oldChildAbstracts) {\n          for (let oldIndex = newIndex - newCount; oldIndex < oldChildAbstracts.length; oldIndex++) {\n            const oldAbstract = oldChildAbstracts[oldIndex];\n            if (\n              (\n                (oldAbstract as NodeAbstract).t\n                && (newAbstract as NodeAbstract).t === (oldAbstract as NodeAbstract).t\n              )\n              || (\n                !(oldAbstract as NodeAbstract).t\n                && !(newAbstract as NodeAbstract).t\n              )\n            ) {\n              matched = true\n\n              if (newIndex !== (oldIndex + newCount)) {\n                // Move node in dom.\n                element.insertBefore(\n                  element.childNodes[oldIndex + newCount],\n                  element.childNodes[newIndex],\n                )\n                // Move node in abstract tree.\n                oldChildAbstracts.splice(\n                  newIndex - newCount,\n                  0,\n                  ...oldChildAbstracts.splice(\n                    oldIndex,\n                    1,\n                  )\n                )\n              }\n\n              if ((newAbstract as NodeAbstract).t) {\n                updateAttributes(\n                  (element.childNodes[newIndex] as Element),\n                  (newAbstract as NodeAbstract).a,\n                  (oldAbstract as NodeAbstract).a,\n                )\n                updateElementTree(\n                  (element.childNodes[newIndex] as Element),\n                  (newAbstract as NodeAbstract).c,\n                  (oldAbstract as NodeAbstract).c,\n                  oldAbstract,\n                )\n              } else {\n                element.childNodes[newIndex].textContent = (\n                  typeof (newAbstract) === 'string'\n                    ? newAbstract\n                    : (newAbstract as TextAbstract).c\n                )\n              }\n              break\n            }\n          }\n        }\n\n        if (!matched) {\n          let childElement: Element | string\n          if ((newAbstract as NodeAbstract).t) {\n            childElement = document.createElement(\n              (newAbstract as NodeAbstract).t\n            )\n\n            if ((newAbstract as NodeAbstract).a) {\n              updateAttributes(\n                childElement,\n                (newAbstract as NodeAbstract).a,\n              )\n            }\n            if ((newAbstract as NodeAbstract).c) {\n              updateElementTree(\n                childElement,\n                (newAbstract as NodeAbstract).c,\n              )\n            }\n\n            const insertAdjacentElement = (\n              element: Node,\n              elementAbstract?: NodeContent | null,\n              position?: InsertPosition,\n            ) => {\n              if (\n                position &&\n                (\n                  !elementAbstract\n                  || (elementAbstract as NodeAbstract).t\n                )\n              ) {\n                (element as Element)\n                  .insertAdjacentElement(\n                    position,\n                    childElement as Element,\n                  )\n              } else {\n                // Otherwise the position is always 'beforebegin'.\n                (element.parentNode as Element)\n                  .insertBefore(\n                    childElement as Element,\n                    element,\n                  )\n              }\n            }\n            if (newIndex === 0) {\n              insertAdjacentElement(\n                element,\n                elementAbstract,\n                'afterbegin',\n              )\n            } else if ((oldChildAbstracts?.length ?? 0) + newCount > newIndex) {\n              insertAdjacentElement(\n                (element.childNodes[newIndex] as Node),\n                // (oldChildAbstracts as NodeContent[])[newIndex + newCount],\n                // 'beforebegin',\n              )\n            } else {\n              insertAdjacentElement(\n                element,\n                elementAbstract,\n                'beforeend',\n              )\n            }\n          } else {\n            childElement = (\n              typeof (newAbstract) === 'string'\n                ? newAbstract\n                : (newAbstract as TextAbstract).c\n            )\n\n            const insertAdjacentText = (\n              element: Node,\n              elementAbstract?: NodeContent | null,\n              position?: InsertPosition,\n            ) => {\n              if (\n                position &&\n                (\n                  !elementAbstract\n                  || (elementAbstract as NodeAbstract).t\n                )\n              ) {\n                (element as Element)\n                  .insertAdjacentText(\n                    position,\n                    childElement as string,\n                  )\n              } else {\n                // Otherwise the position is always 'beforebegin'.\n                (element.parentNode as Element)\n                  .insertBefore(\n                    document.createTextNode(childElement as string),\n                    element.nextSibling,\n                  )\n              }\n            }\n            if (newIndex === 0) {\n              insertAdjacentText(\n                element,\n                elementAbstract,\n                'afterbegin',\n              )\n            } else if ((oldChildAbstracts?.length ?? 0) + newCount > newIndex) {\n              insertAdjacentText(\n                element.childNodes[newIndex] as Node,\n                // (oldChildAbstracts as NodeContent[])[newIndex + newCount],\n                // 'beforebegin',\n              )\n            } else {\n              insertAdjacentText(\n                element,\n                elementAbstract,\n                'beforeend',\n              )\n            }\n          }\n          newCount++\n        }\n      }\n    }\n\n    // Remove old elements.\n    const elementLength = (oldChildAbstracts?.length ?? 0) + newCount\n    if (elementLength >= newIndex) {\n      for (let i = elementLength - 1; i >= newIndex; i--) {\n        element.childNodes[i].remove()\n      }\n    }\n  }\n\n  const _rootElement = (\n    typeof (rootElement) === 'string'\n      ? (\n        document.querySelector(rootElement)\n        || document.body.appendChild(\n          document.createElement('div')\n        )\n      )\n      : rootElement\n  )\n\n  if (typeof (oldAbstractTree) === 'string') {\n    try {\n      oldAbstractTree = JSON.parse(oldAbstractTree) as NodeContent[]\n    } catch (error) {\n      oldAbstractTree = undefined\n    }\n  }\n  oldAbstractTree ??= childrenToNodes(_rootElement)\n\n  return (\n    newAbstractTree: NodeContent[] | NodeContent,\n  ): void => {\n    newAbstractTree = arrayify(newAbstractTree)\n    updateElementTree(\n      _rootElement,\n      newAbstractTree,\n      oldAbstractTree as NodeContent[],\n    )\n    oldAbstractTree = newAbstractTree\n  }\n}\n"],
  "mappings": "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",
  "names": ["i", "element", "elementAbstract"]
}
