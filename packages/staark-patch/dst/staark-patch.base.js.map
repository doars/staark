{
  "version": 3,
  "sources": ["../../staark-common/src/array.js", "../../staark-common/src/marker.js", "../../staark-common/src/node.js", "../../staark-common/src/element.js", "../src/library/patch.js"],
  "sourcesContent": ["/**\n * Ensure the data is an array if it isn't already. Non-truthy values are converted to empty arrays.\n *\n * @template T\n * @param {T|T[]} data Data to \"arrify\".\n * @returns {T[]} An array containing the data.\n */\nexport const arrayify = (\n  data,\n) => arrayifyOrUndefined(data) || []\n\n/**\n * Ensure the data is an array if it isn't already. Non-truthy values are converted to undefined.\n *\n * @template T\n * @param {T|T[]} data Data to arrify.\n * @returns {(T[]|undefined)} An array containing the data or undefined.\n */\nexport const arrayifyOrUndefined = (\n  data,\n) => data ? (\n  Array.isArray(data)\n    ? data\n    : [data]\n) : undefined\n", "/**\n * @type {string} Marker that can be used as a node discriminator.\n */\nexport const marker = 'n'\n", "import { arrayifyOrUndefined } from './array.js'\nimport { marker } from './marker.js'\n\n/**\n * @typedef {import('./memo.js').MemoAbstract} MemoAbstract\n */\n\n/**\n * @typedef {function(Event, Record<string, any>): unknown} NodeAttributeListener Listener for node attribute.\n * @property {function(Event, Record<string, any>): unknown} [f] Function that was written to the DOM tree before being wrapped so it can be compared to.\n */\n\n/**\n * @typedef {Object.<string, boolean | null | number | string | (number | string)[] | NodeAttributeListener | Record<string, boolean | number | string>>} NodeAttributes Attributes of a node.\n */\n\n/**\n * @typedef {string | MemoAbstract | NodeAbstract} NodeContent Content of a node.\n */\n\n/**\n * @typedef {Object} NodeAbstract Node abstract.\n * @property {string} _ Discriminator to differentiate from other objects.\n * @property {NodeAttributes} [a] Attributes of the node.\n * @property {NodeContent[]} [c] Abstracts of children.\n * @property {string} t Node type of the node.\n */\n\n/**\n * Creates a NodeAbstract object.\n *\n * @param {string} type Type of the node.\n * @param {NodeAttributes | NodeContent[] | NodeContent} [attributesOrContents] Attributes of node or contents.\n * @param {NodeContent[] | NodeContent} [contents] Abstracts of children.\n * @returns {NodeAbstract} Node abstract representing the given data.\n */\nexport const node = (\n  type,\n  attributesOrContents,\n  contents,\n) => {\n  if (\n    typeof (attributesOrContents) !== 'object'\n    || attributesOrContents._ === marker\n    || Array.isArray(attributesOrContents)\n  ) {\n    contents = attributesOrContents\n    attributesOrContents = undefined\n  }\n\n  return {\n    _: marker,\n    a: attributesOrContents,\n    c: arrayifyOrUndefined(contents),\n    t: type.toUpperCase(),\n  }\n}\n", "import {\n  node,\n} from './node.js'\n\n/**\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * @typedef {Object} Attribute An attribute of an element.\n * @property {string} name The name of the attribute.\n * @property {string} value The value of the attribute.\n */\n\n/**\n * Converts child nodes of an element to an array of abstract nodes.\n * @param {Element | ChildNode} element The element to convert.\n * @returns {NodeContent[]} The abstract nodes that are equivalent to the given element's child nodes.\n */\nexport const childrenToNodes = (\n  element,\n) => {\n  const abstractChildNodes = []\n  for (const childNode of element.childNodes) {\n    if (childNode instanceof Text) {\n      abstractChildNodes.push(\n        childNode.textContent ?? '',\n      )\n    } else {\n      const attributes = {}\n      for (const attribute of childNode.attributes) {\n        attributes[attribute.name] = attribute.value\n      }\n\n      abstractChildNodes.push(\n        node(\n          childNode.nodeName,\n          attributes,\n          childrenToNodes(childNode),\n        ),\n      )\n    }\n  }\n  return abstractChildNodes\n}\n", "import {\n  arrayifyOrUndefined,\n} from '@doars/staark-common/src/array.js'\nimport {\n  childrenToNodes,\n} from '@doars/staark-common/src/element.js'\n\n/**\n * @typedef {import('@doars/staark-common/src/node.js').NodeContent} NodeContent\n * @typedef {import('@doars/staark-common/src/node.js').NodeAttributes} NodeAttributes\n * @typedef {import('@doars/staark-common/src/node.js').NodeAttributeListener} NodeAttributeListener\n * @typedef {import('@doars/staark-common/src/node.js').NodeAbstract} NodeAbstract\n */\n\n/**\n * Update the attributes of an element.\n *\n * @param {Element} element The element to update.\n * @param {NodeAttributes} newAttributes The new attributes to apply.\n * @param {NodeAttributes} [oldAttributes] The old attributes to cleanup.\n */\nconst updateAttributes = (\n  element,\n  newAttributes,\n  oldAttributes,\n) => {\n  if (newAttributes) {\n    for (const name in newAttributes) {\n      let value = newAttributes[name]\n      if (value) {\n        const type = typeof (value)\n        if (type === 'function') {\n          const oldValue = oldAttributes?.[name]\n          if (oldValue !== value) {\n            if (oldValue) {\n              element.removeEventListener(\n                name,\n                oldValue,\n              )\n            }\n\n            element.addEventListener(\n              name,\n              value,\n            )\n          }\n        } else {\n          if (name === 'class') {\n            if (typeof (value) === 'object') {\n              if (Array.isArray(value)) {\n                value = value.join(' ')\n              } else {\n                let classNames = ''\n                for (const className in value) {\n                  if (value[className]) {\n                    classNames += ' ' + className\n                  }\n                }\n                value = classNames\n              }\n            }\n            element.className = value\n          } else if (\n            name === 'style'\n            && typeof (value) === 'object'\n          ) {\n            // Apply updated styles.\n            for (let styleName in value) {\n              let styleValue = value[styleName]\n              if (styleName.includes('-', 1)) {\n                element.style.setProperty(\n                  styleName,\n                  styleValue,\n                )\n              } else {\n                element.style[styleName] = styleValue\n              }\n            }\n\n            // Remove old styles.\n            if (\n              oldAttributes\n              && oldAttributes[name]\n              && typeof (oldAttributes[name]) === 'object'\n              && !Array.isArray(oldAttributes[name])\n            ) {\n              for (let styleName in oldAttributes[name]) {\n                if (!value[styleName]) {\n                  if (styleName.includes('-', 1)) {\n                    element.style.removeProperty(\n                      styleName,\n                    )\n                  } else {\n                    element.style[styleName] = null\n                  }\n                }\n              }\n            }\n          } else {\n            // Ensure it is of type string.\n            if (value === true) {\n              value = 'true'\n            } else if (type !== 'string') {\n              value = value.toString()\n            }\n\n            element.setAttribute(name, value)\n          }\n        }\n      }\n    }\n  }\n\n  // Cleanup old attributes.\n  if (oldAttributes) {\n    for (const name in oldAttributes) {\n      if (\n        !newAttributes\n        || !newAttributes[name]\n      ) {\n        if (typeof (oldAttributes[name]) === 'function') {\n          element.removeEventListener(\n            name,\n            oldAttributes[name]\n          )\n        } else if (name === 'class') {\n          element.className = ''\n        } else if (name === 'style') {\n          element.style.cssText = ''\n        } else if (name === 'value') {\n          element.value = ''\n          // Don't dispatch the input change event, the rerendering should update everything: element.dispatchEvent(new Event('change'))\n        } else {\n          element.removeAttribute(name)\n        }\n      }\n    }\n  }\n}\n\n/**\n * Update the children of an element.\n *\n * @param {Element} element The element to update.\n * @param {NodeContent[]} [newChildAbstracts] The new children to apply.\n * @param {NodeContent[]} [oldChildAbstracts] The old children to cleanup.\n */\nconst updateChildren = (\n  element,\n  newChildAbstracts,\n  oldChildAbstracts,\n) => {\n  let newIndex = 0\n  let newCount = 0\n  if (newChildAbstracts) {\n    for (; newIndex < newChildAbstracts.length; newIndex++) {\n      const newAbstract = newChildAbstracts[newIndex]\n\n      // Try to find the matching old abstract.\n      let matched = false\n      if (oldChildAbstracts) {\n        for (let oldIndex = newIndex - newCount; oldIndex < oldChildAbstracts.length; oldIndex++) {\n          const oldAbstract = oldChildAbstracts[oldIndex]\n          if (\n            (\n              oldAbstract.t\n              && newAbstract.t === oldAbstract.t\n            )\n            || (\n              !oldAbstract.t\n              && !newAbstract.t\n            )\n          ) {\n            matched = true\n\n            if (newIndex !== (oldIndex + newCount)) {\n              // Move node in dom.\n              element.insertBefore(\n                element.childNodes[oldIndex + newCount],\n                element.childNodes[newIndex],\n              )\n              // Move node in abstract tree. TODO: Remove this pesky splicing so the old abstract tree is not mutated.\n              oldChildAbstracts.splice(\n                newIndex - newCount,\n                0,\n                oldChildAbstracts.splice(\n                  oldIndex,\n                  1,\n                )[0],\n              )\n            }\n\n            if (newAbstract.t) {\n              updateAttributes(\n                element.childNodes[newIndex],\n                newAbstract.a,\n                oldAbstract.a,\n              )\n              updateChildren(\n                element.childNodes[newIndex],\n                newAbstract.c,\n                oldAbstract.c,\n              )\n            } else if (oldAbstract !== newAbstract) {\n              element.childNodes[newIndex].textContent = newAbstract\n            }\n            break\n          }\n        }\n      }\n\n      if (!matched) {\n        let newNode\n        if (newAbstract.t) {\n          newNode = document.createElement(\n            newAbstract.t,\n          )\n          updateAttributes(\n            newNode,\n            newAbstract.a,\n          )\n          updateChildren(\n            newNode,\n            newAbstract.c,\n          )\n        } else {\n          newNode = document.createTextNode(\n            newAbstract,\n          )\n        }\n\n        element.insertBefore(\n          newNode,\n          element.childNodes[newIndex],\n        )\n        newCount++\n      }\n    }\n  }\n\n  // Remove old elements.\n  if (oldChildAbstracts) {\n    const elementLength = oldChildAbstracts.length + newCount\n    if (elementLength >= newIndex) {\n      for (let i = elementLength - 1; i >= newIndex; i--) {\n        element.childNodes[i].remove()\n      }\n    }\n  }\n}\n\n/**\n * Create a patch function that can be used to update the root element.\n *\n * @param {HTMLElement | Element | string} rootElement The root element to update.\n * @param {NodeContent[] | string | null} [oldAbstractTree] The old abstract tree to update.\n * @returns {function(NodeContent[] | NodeContent): unknown} The patch function to call to apply a new abstract tree to the element.\n */\nexport const prepare = (\n  rootElement,\n  oldAbstractTree,\n) => {\n  const _rootElement = (\n    typeof (rootElement) === 'string'\n      ? (\n        document.querySelector(rootElement)\n        || document.body.appendChild(\n          document.createElement('div')\n        )\n      )\n      : rootElement\n  )\n\n  if (typeof (oldAbstractTree) === 'string') {\n    try {\n      oldAbstractTree = JSON.parse(oldAbstractTree)\n    } catch (error) {\n      oldAbstractTree = null\n    }\n  }\n  if (!oldAbstractTree) {\n    oldAbstractTree = childrenToNodes(_rootElement)\n  }\n\n  return (\n    newAbstractTree\n  ) => {\n    newAbstractTree = arrayifyOrUndefined(newAbstractTree)\n    updateChildren(\n      _rootElement,\n      newAbstractTree,\n      oldAbstractTree,\n    )\n    oldAbstractTree = newAbstractTree\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
