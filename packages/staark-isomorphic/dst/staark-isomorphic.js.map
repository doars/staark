{
  "version": 3,
  "sources": ["../src/library/marker.ts", "../src/library/node.ts", "../src/library/factory.ts", "../../staark-common/src/selector.ts", "../src/library/fctory.ts", "../src/library/nde.ts", "../../staark-common/src/array.ts", "../src/library/stringify.ts", "../src/library/text.ts"],
  "sourcesContent": ["export const marker = Symbol()\n", "import {\n  GenericObject,\n} from '@doars/staark-common/src/generics.js'\n\nimport {\n  marker,\n} from './marker.js'\nimport {\n  TextAbstract,\n} from './text.js'\n\nexport type NodeAttributes =\n  GenericObject<\n    boolean |\n    null |\n    number |\n    string |\n    (number | string)[] |\n    GenericObject<number | string>\n  >\n\nexport type NodeContent =\n  string |\n  NodeAbstract |\n  TextAbstract\n\nexport type NodeAbstract = {\n  _: Symbol\n  // Attributes\n  a?: NodeAttributes\n  // Content\n  c?: NodeContent[]\n  // Node type\n  t: string\n}\n\nexport const node = (\n  type: string,\n  attributesOrContents?: NodeAttributes | NodeContent | NodeContent[],\n  contents?: NodeContent | NodeContent[],\n): NodeAbstract => {\n  if (\n    typeof (attributesOrContents) !== 'object'\n    || (attributesOrContents as NodeAbstract)._ === marker\n    || Array.isArray(attributesOrContents)\n  ) {\n    contents = attributesOrContents as NodeContent\n    attributesOrContents = undefined\n  }\n\n  return {\n    _: marker,\n    a: attributesOrContents as (NodeAttributes | undefined),\n    c: (\n      Array.isArray(contents)\n        ? contents\n        : [contents] as NodeContent[]\n    ),\n    t: type.toUpperCase(),\n  }\n}\n", "import {\n  node,\n  NodeAbstract,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\n\nexport type Factory = (\n  attributesOrContents?: NodeAttributes | NodeContent | NodeContent[],\n  contents?: NodeContent | NodeContent[],\n) => NodeAbstract\n\nexport type FactoryCache = {\n  [key: string]: Factory,\n}\n\nexport const factory = new Proxy({}, {\n  get: (\n    target: FactoryCache,\n    type: string,\n  ): Factory => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      attributesOrContents?: NodeAttributes | NodeContent | NodeContent[],\n      contents?: NodeContent | NodeContent[],\n    ): NodeAbstract => node(\n      typeConverted,\n      attributesOrContents,\n      contents,\n    )\n  },\n})\n", "\nimport {\n  GenericObjectAny,\n} from './generics.js'\n\nconst BRACKET_CLOSE = ']'\nconst BRACKET_OPEN = '['\nconst DOT = '.'\nconst EQUAL = '='\nconst HASH = '#'\nconst QUOTE_SINGLE = '\\''\nconst QUOTE_DOUBLE = '\"'\n\nenum TokenTypes {\n  attribute = 0,\n  class = 1,\n  id = 2,\n  type = 3,\n}\n\nexport const tokenizer = (\n  selector: string,\n): [string, GenericObjectAny] => {\n  const length: number = selector.length\n  let i: number = 0\n\n  let type: string = ''\n  const attributes: GenericObjectAny = {}\n\n  let tokenA: string = ''\n  let tokenB: string | true = true\n  let tokenType: TokenTypes = TokenTypes.type\n  const storeToken = () => {\n    if (tokenA) {\n      switch (tokenType) {\n        case TokenTypes.attribute:\n          attributes[tokenA] = tokenB === true ? true : tokenB\n          tokenB = true\n          break\n\n        case TokenTypes.class:\n          if (!attributes.class) {\n            attributes.class = tokenA\n            break\n          }\n          attributes.class += ' ' + tokenA\n          break\n\n        case TokenTypes.id:\n          attributes.id = tokenA\n          break\n\n        case TokenTypes.type:\n          type = tokenA\n          break\n      }\n      tokenA = ''\n    }\n  }\n\n  let character: string\n\n  let attributeBracketCount: number\n  const parseAttribute = (\n  ): void => {\n    attributeBracketCount = 0\n\n    while (i < length) {\n      character = selector[i]\n      i++\n      if (character === EQUAL) {\n        // Parse attribute value.\n        tokenB = ''\n        character = selector[i]\n        const endOnDoubleQuote = character === QUOTE_DOUBLE\n        const endOnSingleQuote = character === QUOTE_SINGLE\n        if (endOnDoubleQuote || endOnSingleQuote) {\n          tokenB += character\n          i++\n        }\n\n        while (i < length) {\n          character = selector[i]\n          if (\n            (endOnDoubleQuote && character === QUOTE_DOUBLE) ||\n            (endOnSingleQuote && character === QUOTE_SINGLE)\n          ) {\n            tokenB += character\n            i++\n            break\n          } else if (\n            !endOnDoubleQuote &&\n            !endOnSingleQuote &&\n            character === BRACKET_CLOSE\n          ) {\n            break\n          }\n          tokenB += character\n          i++\n        }\n\n        if (\n          (\n            tokenB[0] === QUOTE_DOUBLE &&\n            tokenB[tokenB.length - 1] === QUOTE_DOUBLE\n          ) ||\n          (\n            tokenB[0] === QUOTE_SINGLE &&\n            tokenB[tokenB.length - 1] === QUOTE_SINGLE\n          )\n        ) {\n          tokenB = tokenB.substring(1, tokenB.length - 1)\n        }\n\n\n        // Consume until closing bracket, but don't store the tokes since these are invalid.\n        while (i < length) {\n          character = selector[i]\n          i++\n          if (character === BRACKET_CLOSE) {\n            break\n          }\n        }\n        break\n      } else if (character === BRACKET_OPEN) {\n        attributeBracketCount++\n        continue\n      } else if (character === BRACKET_CLOSE) {\n        attributeBracketCount--\n        if (attributeBracketCount < 0) {\n          break\n        }\n        continue\n      }\n\n      tokenA += character\n    }\n    storeToken()\n  }\n\n  while (i < length) {\n    character = selector[i]\n    i++\n\n    if (character === HASH) {\n      storeToken()\n      tokenType = TokenTypes.id\n      continue\n    } else if (character === DOT) {\n      storeToken()\n      tokenType = TokenTypes.class\n      continue\n    } else if (character === BRACKET_OPEN) {\n      storeToken()\n      tokenType = TokenTypes.attribute\n      parseAttribute()\n      continue\n    }\n\n    tokenA += character\n  }\n\n  return [type, attributes]\n}\n", "import {\n  tokenizer,\n} from '@doars/staark-common/src/selector.js'\n\nimport {\n  node,\n  NodeAbstract,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\n\nexport type Fctory = (\n  attributes?: string,\n  contents?: NodeContent | NodeContent[],\n) => NodeAbstract\n\nexport type FctoryCache = {\n  [key: string]: Fctory,\n}\n\nexport const fctory = new Proxy({}, {\n  get: (\n    target: FctoryCache,\n    type: string,\n  ): Fctory => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      selector?: string,\n      contents?: NodeContent | NodeContent[],\n    ): NodeAbstract => {\n      let attributes: NodeAttributes | undefined\n      if (selector) {\n        const [_, _attributes] = tokenizer(selector)\n        attributes = _attributes\n      }\n      return node(\n        typeConverted,\n        attributes,\n        contents,\n      )\n    }\n  },\n})\n", "import {\n  tokenizer,\n} from '@doars/staark-common/src/selector.js'\n\nimport {\n  marker,\n} from './marker.js'\nimport {\n  NodeAbstract,\n  NodeContent,\n} from './node.js'\n\nexport const nde = (\n  selector: string,\n  contents?: NodeContent | NodeContent[],\n): NodeAbstract => {\n  const [type, attributes] = tokenizer(selector)\n  return {\n    _: marker,\n    a: attributes,\n    c: (Array.isArray(contents) ? contents : [contents] as NodeContent[]),\n    t: type.toUpperCase(),\n  }\n}\n", "export const arrayify = function <T>(\n  data: T[] | T,\n): T[] {\n  if (Array.isArray(data)) {\n    return data\n  }\n  return [\n    data,\n  ]\n}\n\nexport default {\n  arrayify,\n}\n", "import {\n  arrayify,\n} from '@doars/staark-common/src/array.js'\nimport {\n  GenericObject,\n  GenericObjectAny,\n} from '@doars/staark-common/src/generics.js'\n\nimport {\n  NodeAbstract,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\nimport {\n  TextAbstract,\n} from './text.js'\n\nconst SELF_CLOSING = [\n  'base',\n  'br',\n  'hr',\n  'img',\n  'input',\n  'link',\n  'meta',\n  'source',\n  'wbr',\n]\n\nexport type ViewFunction = (\n  state: GenericObject<any>,\n) => NodeContent | NodeContent[]\n\nconst MATCH_CAPITALS = /[A-Z]+(?![a-z])|[A-Z]/g\nconst HYPHENATE = (\n  part: string,\n  offset: number,\n) => (offset ? '-' : '') + part\n\nconst renderAttributes = (\n  attributes: NodeAttributes | null = null,\n): string => {\n  let rendered = ''\n  if (attributes) {\n    for (const name in attributes) {\n      let value = attributes[name]\n      if (value !== null) {\n        const type = typeof (value)\n\n        // Ensure it is of type string.\n        if (type === 'boolean') {\n          value = value ? 'true' : 'false'\n        } else if (type !== 'string') {\n          value = value.toString()\n        }\n\n        if (name === 'class') {\n          if (typeof (value) === 'object') {\n            if (Array.isArray(value)) {\n              value = value.join(' ')\n            } else {\n              let classNames: string = ''\n              for (const className in value) {\n                if (value[className]) {\n                  classNames += ' ' + className\n                }\n              }\n              value = classNames\n            }\n          }\n        } else if (name === 'style') {\n          if (typeof (value) === 'object') {\n            if (Array.isArray(value)) {\n              value = value.join(';')\n            } else {\n              let styles: string = ''\n              for (let styleProperty in value) {\n                let styleValue: string | number | (string | number)[] = value[styleProperty]\n\n                // Convert to kebab case.\n                styleProperty = styleProperty\n                  .replace(MATCH_CAPITALS, HYPHENATE)\n                  .toLowerCase()\n\n                if (Array.isArray(styleValue)) {\n                  styles += ';' + styleProperty + ':' + styleValue.join(' ')\n                } else if (value) {\n                  styles += ';' + styleProperty + ':' + value\n                }\n              }\n              value = styles\n            }\n          }\n        }\n\n        rendered += ' ' + name + '=\"' + (value as string) + '\"'\n      }\n    }\n  }\n  return rendered\n}\n\nconst renderElements = (\n  abstracts: NodeContent[] | null = null,\n): string => {\n  let rendered = ''\n  if (abstracts) {\n    for (const abstract of abstracts) {\n      if ((abstract as NodeAbstract).t) {\n        rendered += '<' + (abstract as NodeAbstract).t + renderAttributes((abstract as NodeAbstract).a)\n        if (SELF_CLOSING.includes((abstract as NodeAbstract).t)) {\n          rendered += '/>'\n        } else {\n          rendered += '>'\n          if ((abstract as NodeAbstract).c) {\n            rendered += renderElements((abstract as NodeAbstract).c)\n          }\n          rendered += '<' + (abstract as NodeAbstract).t + '>'\n        }\n      } else {\n        rendered += ' ' + (\n          (abstract as TextAbstract).c ? (abstract as TextAbstract).c : (abstract as string)\n        ) + ' '\n      }\n    }\n  }\n  return rendered\n}\n\nexport const stringify = (\n  renderView: ViewFunction,\n  initialState?: GenericObject<any>,\n): [string, NodeContent[]] => {\n  if (!initialState) {\n    initialState = {}\n  }\n\n  const abstractTree = arrayify(\n    renderView(initialState),\n  )\n  return [\n    renderElements(\n      abstractTree,\n    ),\n    abstractTree,\n  ]\n}\n\nconst customStringify = (\n  data: GenericObjectAny,\n): string => {\n  if (\n    typeof data === 'number'\n    || typeof data === 'boolean'\n  ) {\n    return String(data)\n  }\n\n  if (typeof data === 'string') {\n    // Escape double quotes\n    return `\"${(data as string).replace(/\"/g, '\\\\\"')}\"`\n  }\n\n  if (Array.isArray(data)) {\n    return `[${data.map(item => customStringify(item)).join(',')}]`;\n  }\n\n  if (typeof data === 'object') {\n    const keys = Object.keys(data)\n      .filter((key: string) => !key.startsWith('_'))\n    const objectContent: string = keys\n      .map((key: string) => `\"${key}\":${customStringify(data[key])}`)\n      .join(',')\n    return `{${objectContent}}`\n  }\n\n  // For any unsupported types (like functions or undefined).\n  return 'null'\n}\n\nexport const stringifyFull = (\n  renderView: ViewFunction,\n  initialState?: GenericObject<any>,\n): [string, string, string] => {\n  if (!initialState) {\n    initialState = {}\n  }\n\n  const [\n    rendered,\n    abstractTree,\n  ] = stringify(\n    renderView,\n    initialState\n  )\n\n  return [\n    rendered,\n    customStringify(abstractTree),\n    JSON.stringify(initialState)\n  ]\n}\n", "import {\n  marker\n} from './marker.js'\n\nexport type TextAbstract = {\n  _: Symbol,\n  // Contents\n  c: string\n}\n\nexport const text = (\n  contents: number | string | (number | string)[],\n): TextAbstract => ({\n  _: marker,\n  c: (\n    Array.isArray(contents)\n      ? contents.join('')\n      : ('' + contents)\n  ),\n})\n"],
  "mappings": "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",
  "names": []
}
