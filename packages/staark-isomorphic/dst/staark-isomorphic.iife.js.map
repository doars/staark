{
  "version": 3,
  "sources": ["../../../helpers/iife.js", "../../staark-common/src/array.js", "../../staark-common/src/conditional.js", "../../staark-common/src/marker.js", "../../staark-common/src/node.js", "../../staark-common/src/factory.js", "../../staark-common/src/selector.js", "../../staark-common/src/fctory.js", "../../staark-common/src/identifier.js", "../../staark-common/src/match.js", "../../staark-common/src/memo.js", "../../staark-common/src/nde.js", "../src/library/stringify.js", "../src/index.iife.js"],
  "sourcesContent": ["/**\n * Assigns data to window at the given path. If an object at the path already exists it will merge them instead of replacing it.\n * @param {Array<string>} path Path to assign the values to.\n * @param {any} data Data to assign to the window.\n */\nexport const iife = (\n  path,\n  data,\n) => {\n  let subject = window\n  for (let i = 0; i < path.length - 1; i++) {\n    if (\n      typeof (subject[path[i]]) !== 'object'\n      || !Array.isArray(subject[path[i]])\n    ) {\n      subject[path[i]] = {}\n    }\n    subject = subject[path[i]]\n  }\n  subject[path[path.length - 1]] = data\n}\n", "/**\n * Ensure the data is an array if it isn't already. Non-truthy values are converted to empty arrays.\n *\n * @template T\n * @param {T|T[]} data Data to \"arrify\".\n * @returns {T[]} An array containing the data.\n */\nexport const arrayify = (\n  data,\n) => arrayifyOrUndefined(data) || []\n\n/**\n * Ensure the data is an array if it isn't already. Non-truthy values are converted to undefined.\n *\n * @template T\n * @param {T|T[]} data Data to arrify.\n * @returns {(T[]|undefined)} An array containing the data or undefined.\n */\nexport const arrayifyOrUndefined = (\n  data,\n) => data ? (\n  Array.isArray(data)\n    ? data\n    : [data]\n) : undefined\n", "import { arrayify } from './array.js'\n\n/**\n * @typedef {import('./node.js').NodeContent} NodeContent\n * @typedef {import('./types.js').ResolveFunction} ResolveFunction\n */\n\n/**\n * Returns the content based on the condition.\n *\n * @param {any} condition The condition to evaluate.\n * @param {NodeContent[] | NodeContent | ResolveFunction} onTruth The content to return if the condition is true.\n * @param {NodeContent[] | NodeContent | ResolveFunction} [onFalse] The content to return if the condition is false.\n * @returns {NodeContent[]} The resulting content as an array.\n */\nexport const conditional = (\n  condition,\n  onTruth,\n  onFalse,\n) => {\n  let result = (\n    condition\n      ? onTruth\n      : onFalse\n  )\n  if (typeof (result) === 'function') {\n    result = result()\n  }\n  return arrayify(result)\n}\n", "/**\n * @type {string} Marker that can be used as a node discriminator.\n */\nexport const marker = 'n'\n", "import { arrayifyOrUndefined } from './array.js'\nimport { marker } from './marker.js'\n\n/**\n * @typedef {import('./memo.js').MemoAbstract} MemoAbstract\n */\n\n/**\n * @typedef {function(Event, Record<string, any>): unknown} NodeAttributeListener Listener for node attribute.\n * @property {function(Event, Record<string, any>): unknown} [f] Function that was written to the DOM tree before being wrapped so it can be compared to.\n */\n\n/**\n * @typedef {Object.<string, boolean | null | number | string | (number | string)[] | NodeAttributeListener | Record<string, boolean | number | string>>} NodeAttributes Attributes of a node.\n */\n\n/**\n * @typedef {string | MemoAbstract | NodeAbstract} NodeContent Content of a node.\n */\n\n/**\n * @typedef {Object} NodeAbstract Node abstract.\n * @property {string} _ Discriminator to differentiate from other objects.\n * @property {NodeAttributes} [a] Attributes of the node.\n * @property {NodeContent[]} [c] Abstracts of children.\n * @property {string} t Node type of the node.\n */\n\n/**\n * Creates a NodeAbstract object.\n *\n * @param {string} type Type of the node.\n * @param {NodeAttributes | NodeContent[] | NodeContent} [attributesOrContents] Attributes of node or contents.\n * @param {NodeContent[] | NodeContent} [contents] Abstracts of children.\n * @returns {NodeAbstract} Node abstract representing the given data.\n */\nexport const node = (\n  type,\n  attributesOrContents,\n  contents,\n) => {\n  if (\n    attributesOrContents\n    && (\n      typeof (attributesOrContents) !== 'object'\n      || attributesOrContents._ === marker\n      || Array.isArray(attributesOrContents)\n    )\n  ) {\n    contents = attributesOrContents\n    attributesOrContents = undefined\n  }\n\n  return {\n    _: marker,\n    a: attributesOrContents,\n    c: arrayifyOrUndefined(contents),\n    t: type.toUpperCase(),\n  }\n}\n", "import {\n  node,\n} from './node.js'\n\n/**\n * @typedef {import('./node.js').NodeAbstract} NodeAbstract\n * @typedef {import('./node.js').NodeAttributes} NodeAttributes\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * @typedef {Function} Factory Function that generates the a node with the given type.\n * @param {NodeAttributes | NodeContent[] | NodeContent} [attributesOrContents] Attributes of node or contents.\n * @param {NodeContent[] | NodeContent} [contents] Abstracts of children.\n * @returns {NodeAbstract} Node abstract representing the given data.\n */\n\n/**\n * @typedef {Object} FactoryCache Factory cache\n */\n\nexport const factory = /*#__PURE__*/ new Proxy({}, {\n  /**\n   * @param {FactoryCache} target Factory cache.\n   * @param {string} type Type of the nodes to generate.\n   * @returns {Factory} Function that generates the a node with the given type.\n   */\n  get: (\n    target,\n    type,\n  ) => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      attributesOrContents,\n      contents,\n    ) => node(\n      typeConverted,\n      attributesOrContents,\n      contents,\n    )\n  },\n})\n", "const BRACKET_CLOSE = ']'\nconst BRACKET_OPEN = '['\nconst DOT = '.'\nconst EQUAL = '='\nconst HASH = '#'\nconst QUOTE_SINGLE = '\\''\nconst QUOTE_DOUBLE = '\"'\n\n/**\n * @enum {number} TokenTypes.\n */\nconst TokenTypes = {\n  attribute: 0,\n  class: 1,\n  id: 2,\n  type: 3,\n}\n\n/**\n * @typedef {Object.<string, any>} Attributes Attributes.\n */\n\n/**\n * Tokenize a selector into a type and its attributes.\n *\n * @param {string} selector Selector to tokenize.\n * @returns {[string, Attributes]} Node type and attributes.\n */\nexport const selectorToTokenizer = (\n  selector,\n) => {\n  const length = selector.length\n  let i = 0\n\n  let type = ''\n  /** @type {Attributes} */\n  const attributes = {}\n\n  let tokenA = ''\n  let tokenB = true\n  let tokenType = TokenTypes.type\n  const storeToken = () => {\n    if (tokenA) {\n      switch (tokenType) {\n        case TokenTypes.attribute:\n          attributes[tokenA] = (\n            tokenB === true\n              ? true\n              : tokenB\n          )\n          tokenB = true\n          break\n\n        case TokenTypes.class:\n          if (!attributes.class) {\n            attributes.class = tokenA\n            break\n          }\n          attributes.class += ' ' + tokenA\n          break\n\n        case TokenTypes.id:\n          attributes.id = tokenA\n          break\n\n        case TokenTypes.type:\n          type = tokenA\n          break\n      }\n      tokenA = ''\n    }\n  }\n\n  let character\n\n  let attributeBracketCount\n  const parseAttribute = () => {\n    attributeBracketCount = 0\n\n    while (i < length) {\n      character = selector[i]\n      i++\n      if (character === EQUAL) {\n        // Parse attribute value.\n        tokenB = ''\n        character = selector[i]\n        const endOnDoubleQuote = character === QUOTE_DOUBLE\n        const endOnSingleQuote = character === QUOTE_SINGLE\n        if (\n          endOnDoubleQuote\n          || endOnSingleQuote\n        ) {\n          tokenB += character\n          i++\n        }\n\n        while (i < length) {\n          character = selector[i]\n          if (\n            (\n              endOnDoubleQuote\n              && character === QUOTE_DOUBLE\n            )\n            || (\n              endOnSingleQuote\n              && character === QUOTE_SINGLE\n            )\n          ) {\n            tokenB += character\n            i++\n            break\n          } else if (\n            !endOnDoubleQuote\n            && !endOnSingleQuote\n            && character === BRACKET_CLOSE\n          ) {\n            break\n          }\n          tokenB += character\n          i++\n        }\n\n        if (\n          (\n            tokenB[0] === QUOTE_DOUBLE\n            && tokenB[tokenB.length - 1] === QUOTE_DOUBLE\n          ) ||\n          (\n            tokenB[0] === QUOTE_SINGLE\n            && tokenB[tokenB.length - 1] === QUOTE_SINGLE\n          )\n        ) {\n          tokenB = tokenB.substring(1, tokenB.length - 1)\n        }\n\n        // Consume until closing bracket, but don't store the tokens since these are invalid.\n        while (i < length) {\n          character = selector[i]\n          i++\n          if (character === BRACKET_CLOSE) {\n            break\n          }\n        }\n        break\n      } else if (character === BRACKET_OPEN) {\n        attributeBracketCount++\n        continue\n      } else if (character === BRACKET_CLOSE) {\n        attributeBracketCount--\n        if (attributeBracketCount < 0) {\n          break\n        }\n        continue\n      }\n\n      tokenA += character\n    }\n    storeToken()\n  }\n\n  while (i < length) {\n    character = selector[i]\n    i++\n\n    if (character === HASH) {\n      storeToken()\n      tokenType = TokenTypes.id\n      continue\n    } else if (character === DOT) {\n      storeToken()\n      tokenType = TokenTypes.class\n      continue\n    } else if (character === BRACKET_OPEN) {\n      storeToken()\n      tokenType = TokenTypes.attribute\n      parseAttribute()\n      continue\n    }\n\n    tokenA += character\n  }\n\n  return [type, attributes]\n}\n", "import {\n  node,\n} from './node.js'\nimport {\n  selectorToTokenizer,\n} from './selector.js'\n\n/**\n * @typedef {import('./node.js').NodeAbstract} NodeAbstract\n * @typedef {import('./node.js').NodeAttributes} NodeAttributes\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * @typedef {function(string=, NodeContent[]|NodeContent=): NodeAbstract} Fctory Function that generates the a node with the given type.\n */\n\n/**\n * @typedef {Object<string, Fctory>} FctoryCache Factory cache.\n */\n\nexport const fctory = /*#__PURE__*/ new Proxy({}, {\n  /**\n   * @param {FctoryCache} target Factory cache.\n   * @param {string} type Type of the nodes to generate.\n   * @returns {Fctory} Function that generates the a node with the given type.\n   */\n  get: (target, type) => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      selector,\n      contents,\n    ) => {\n      let attributes\n      if (selector) {\n        const [_, _attributes] = selectorToTokenizer(selector)\n        attributes = _attributes\n      }\n      return node(\n        typeConverted,\n        attributes,\n        contents,\n      )\n    }\n  },\n})\n", "let identifierCount = 0\n\n/**\n * Generates a unique identifier with a given prefix.\n * @param {string} prefix The prefix for the identifier.\n * @returns {string} The generated identifier.\n */\nexport const identifier = (\n  prefix,\n) => prefix + '-' + (identifierCount++)\n", "import { arrayify } from './array.js'\n\n/**\n * @typedef {import('./node.js').NodeContent} NodeContent\n * @typedef {import('./types.js').ResolveFunction} ResolveFunction\n */\n\n/**\n * Matches a key to a value in a lookup table, with a fallback option.\n *\n * @param {any} key The key to match.\n * @param {Record<any, NodeContent[] | NodeContent | ResolveFunction | null | undefined>} lookup The lookup table.\n * @param {NodeContent[] | NodeContent | ResolveFunction | null} [fallback] The fallback value.\n * @returns {NodeContent[]} The matched or fallback value, arrayified.\n */\nexport const match = (\n  key,\n  lookup,\n  fallback,\n) => {\n  let result\n  if (\n    lookup\n    && (key in lookup)\n    && lookup[key]\n  ) {\n    result = lookup[key]\n  } else {\n    result = fallback\n  }\n  if (typeof result === 'function') {\n    result = result()\n  }\n  return arrayify(result)\n}\n", "import { marker } from './marker.js'\n\n/**\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * @typedef {Object<string, any>} State State of the application.\n */\n\n/**\n * @typedef {function(State, any): NodeContent[] | NodeContent} MemoFunction Render function to generated abstract tree.\n */\n\n/**\n * @typedef {Object} MemoAbstract\n * @property {string} _ Discriminator to differentiate from other objects.\n * @property {any} m Remembered data to compare with.\n * @property {MemoFunction} r Render function to generated abstract tree.\n */\n\n/**\n * Creates a MemoAbstract object.\n *\n * @param {MemoFunction} render Render function to generated abstract tree.\n * @param {any} memory Remembered data to compare with.\n * @returns {MemoAbstract} Memo abstract object.\n */\nexport const memo = (\n  render,\n  memory,\n) => ({\n  _: marker,\n  r: render,\n  m: memory,\n})\n", "import { arrayifyOrUndefined } from './array.js'\nimport { marker } from './marker.js'\nimport { selectorToTokenizer } from './selector.js'\n\n/**\n * @typedef {import('./node.js').NodeAbstract} NodeAbstract\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * Creates a NodeAbstract object from a selector and contents.\n *\n * @param {string} selector The selector string.\n * @param {NodeContent[] | NodeContent} [contents] Abstracts of children.\n * @returns {NodeAbstract} Node abstract representing the given data.\n */\nexport const nde = (\n  selector,\n  contents,\n) => {\n  const [type, attributes] = selectorToTokenizer(selector)\n\n  return {\n    _: marker,\n    a: attributes,\n    c: arrayifyOrUndefined(contents),\n    t: type.toUpperCase(),\n  }\n}\n", "import {\n  arrayifyOrUndefined,\n} from '@doars/staark-common/src/array.js'\n\nconst SELF_CLOSING = [\n  'base',\n  'br',\n  'hr',\n  'img',\n  'input',\n  'link',\n  'meta',\n  'source',\n  'wbr',\n]\n\n/**\n * @typedef {import('@doars/staark-common/src/node.js').NodeContent} NodeContent\n * @typedef {import('@doars/staark-common/src/node.js').NodeAttributes} NodeAttributes\n * @typedef {import('@doars/staark-common/src/node.js').NodeAbstract} NodeAbstract\n * @typedef {import('@doars/staark-common/src/memo.js').MemoAbstract} MemoAbstract\n */\n\n/**\n * @callback ViewFunction Render view function.\n * @param {Record<string, any>} state Current state.\n * @returns {NodeContent[] | NodeContent} Abstract tree.\n */\n\nconst MATCH_CAPITALS = /[A-Z]+(?![a-z])|[A-Z]/g\nconst HYPHENATE = (part, offset) => (offset ? '-' : '') + part\n\n/**\n * Render attributes to string.\n *\n * @param {NodeAttributes} [attributes] Attributes to render.\n * @returns {string} Rendered attributes.\n */\nconst renderAttributes = (\n  attributes,\n) => {\n  let rendered = ''\n  if (attributes) {\n    for (const name in attributes) {\n      let value = attributes[name]\n      if (value !== null && value !== undefined) {\n        const type = typeof value\n\n        // Ensure it is of type string.\n        if (type === 'boolean') {\n          value = value ? 'true' : 'false'\n        } else if (type !== 'string') {\n          value = value.toString()\n        }\n\n        if (name === 'class') {\n          if (typeof value === 'object') {\n            if (Array.isArray(value)) {\n              value = value.join(' ')\n            } else {\n              let classNames = ''\n              for (const className in value) {\n                if (value[className]) {\n                  classNames += ' ' + className\n                }\n              }\n              value = classNames\n            }\n          }\n        } else if (name === 'style') {\n          if (typeof value === 'object') {\n            if (Array.isArray(value)) {\n              value = value.join(';')\n            } else {\n              let styles = ''\n              for (let styleProperty in value) {\n                let styleValue = value[styleProperty]\n\n                // Convert to kebab case.\n                styleProperty = styleProperty\n                  .replace(MATCH_CAPITALS, HYPHENATE)\n                  .toLowerCase()\n\n                if (Array.isArray(styleValue)) {\n                  styles += ';' + styleProperty + ':' + styleValue.join(' ')\n                } else if (value) {\n                  styles += ';' + styleProperty + ':' + value\n                }\n              }\n              value = styles\n            }\n          }\n        }\n\n        rendered += ' ' + name + '=\"' + value + '\"'\n      }\n    }\n  }\n  return rendered\n}\n\n/**\n * Render elements to string.\n *\n * @param {NodeContent[]} [abstracts] Abstract tree.\n * @returns {string} Rendered elements.\n */\nconst renderElements = (\n  abstracts,\n) => {\n  let rendered = ''\n  if (abstracts) {\n    for (const abstract of abstracts) {\n      if (abstract) {\n        if (abstract.t) {\n          rendered += '<' + abstract.t.toLocaleLowerCase() + renderAttributes(abstract.a)\n          if (SELF_CLOSING.includes(abstract.t)) {\n            rendered += '/>'\n          } else {\n            rendered += '>'\n            if (abstract.c) {\n              rendered += renderElements(abstract.c)\n            }\n            rendered += '</' + abstract.t.toLocaleLowerCase() + '>'\n          }\n        } else {\n          rendered += ' ' + abstract + ' '\n        }\n      }\n    }\n  }\n  return rendered\n}\n\n/**\n * Stringify abstract tree.\n *\n * @param {NodeContent[] | NodeContent} [abstractTree] Abstract tree.\n * @returns {[string, NodeContent[] | undefined]} Rendered elements and abstract tree.\n */\nexport const stringifyPatch = (\n  abstractTree,\n) => {\n  abstractTree = arrayifyOrUndefined(abstractTree)\n  return [\n    renderElements(abstractTree),\n    abstractTree,\n  ]\n}\n\n/**\n * Stringify view.\n *\n * @param {ViewFunction} renderView Render view function.\n * @param {Record<string, any>} [initialState] Initial state.\n * @returns {[string, NodeContent[] | undefined]} Rendered elements and abstract tree.\n */\nexport const stringify = (\n  renderView,\n  initialState,\n) => {\n  if (!initialState) {\n    initialState = {}\n  }\n\n  /**\n   * @param {NodeContent[]} [abstracts]\n   * @returns {string}\n   */\n  const renderElements = (\n    abstracts,\n  ) => {\n    let rendered = ''\n    if (abstracts) {\n      for (const abstract of abstracts) {\n        if (abstract) {\n          if (abstract.m) {\n            rendered += renderElements(\n              arrayifyOrUndefined(\n                abstract.r(initialState, abstract.m),\n              ),\n            )\n          } else if (abstract.t) {\n            rendered += '<' + abstract.t.toLocaleLowerCase() + renderAttributes(abstract.a)\n            if (SELF_CLOSING.includes(abstract.t)) {\n              rendered += '/>'\n            } else {\n              rendered += '>'\n              if (abstract.c) {\n                rendered += renderElements(abstract.c)\n              }\n              rendered += '</' + abstract.t.toLocaleLowerCase() + '>'\n            }\n          } else {\n            rendered += ' ' + abstract + ' '\n          }\n        }\n      }\n    }\n    return rendered\n  }\n\n  const abstractTree = arrayifyOrUndefined(renderView(initialState))\n  return [\n    renderElements(abstractTree),\n    abstractTree,\n  ]\n}\n\n/**\n * Custom stringify function.\n *\n * @param {Record<string, any>} [data] Data to stringify.\n * @returns {string} Stringified data.\n */\nconst customStringify = (\n  data,\n) => {\n  if (\n    typeof data === 'number'\n    || typeof data === 'boolean'\n  ) {\n    return String(data)\n  }\n\n  if (typeof data === 'string') {\n    // Escape double quotes\n    return '\"' + data.replace(/\"/g, '\\\\\"') + '\"'\n  }\n\n  if (Array.isArray(data)) {\n    return '[' + data.map(\n      item => customStringify(item),\n    ).join(',') + ']'\n  }\n\n  if (typeof data === 'object') {\n    const keys = Object.keys(data)\n      .filter(key => !key.startsWith('_'))\n    const objectContent = keys\n      .map(key => '\"' + key + '\":' + customStringify(data[key]) + '\"')\n      .join(',')\n    return '{' + objectContent + '}'\n  }\n\n  return 'null'\n}\n\n/**\n * Stringify patch with abstract tree.\n *\n * @param {NodeContent[]} [abstracts] Abstract tree.\n * @returns {[string, string]} Rendered elements.\n */\nexport const stringifyPatchFull = (abstracts) => {\n  const [rendered, abstractTree] = stringifyPatch(abstracts)\n\n  return [\n    rendered,\n    customStringify(abstractTree),\n  ]\n}\n\n/**\n * Stringify view with abstract tree.\n *\n * @param {ViewFunction} renderView Render view function.\n * @param {Record<string, any>} [initialState] Initial state.\n * @returns {[string, string, string]} Rendered elements, abstract tree and initial state.\n */\nexport const stringifyFull = (\n  renderView,\n  initialState,\n) => {\n  if (!initialState) {\n    initialState = {}\n  }\n\n  const [\n    rendered,\n    abstractTree,\n  ] = stringify(renderView, initialState)\n\n  return [\n    rendered,\n    customStringify(abstractTree),\n    JSON.stringify(initialState),\n  ]\n}\n", "import { iife } from '../../../helpers/iife.js'\n\nimport { conditional } from '@doars/staark-common/src/conditional.js'\nimport { factory } from '@doars/staark-common/src/factory.js'\nimport { fctory } from '@doars/staark-common/src/fctory.js'\nimport { identifier } from '@doars/staark-common/src/identifier.js'\nimport { match } from '@doars/staark-common/src/match.js'\nimport { memo } from '@doars/staark-common/src/memo.js'\nimport { nde } from '@doars/staark-common/src/nde.js'\nimport { node } from '@doars/staark-common/src/node.js'\n\nimport {\n  stringify,\n  stringifyFull,\n  stringifyPatch,\n  stringifyPatchFull,\n} from './library/stringify.js'\n\niife([\n  'staark',\n], {\n  conditional,\n  factory,\n  fctory,\n  identifier,\n  match,\n  memo,\n  nde,\n  node,\n  stringify,\n  stringifyFull,\n  stringifyPatch,\n  stringifyPatchFull,\n})\n"],
  "mappings": "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",
  "names": ["renderElements"]
}
