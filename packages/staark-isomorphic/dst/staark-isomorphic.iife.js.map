{
  "version": 3,
  "sources": ["../../../.scripts/iife.ts", "../../staark-common/src/array.ts", "../../staark-common/src/conditional.ts", "../../staark-common/src/marker.ts", "../../staark-common/src/node.ts", "../../staark-common/src/factory.ts", "../../staark-common/src/selector.ts", "../../staark-common/src/fctory.ts", "../../staark-common/src/match.ts", "../../staark-common/src/memo.ts", "../../staark-common/src/nde.ts", "../../staark-common/src/text.ts", "../src/library/stringify.ts", "../src/index.iife.ts"],
  "sourcesContent": ["export const iife = function (\n  path: Array<string>,\n  data: any\n) {\n  let subject: Record<string, any> = window\n  for (let i = 0; i < path.length - 1; i++) {\n    if (\n      typeof (subject[path[i]]) !== 'object'\n      || !Array.isArray(subject[path[i]])\n    ) {\n      subject[path[i]] = {}\n    }\n    subject = subject[path[i]]\n  }\n  subject[path[path.length - 1]] = data\n}\n", "export const arrayify = function <T>(\n  data: T[] | T,\n): T[] {\n  if (Array.isArray(data)) {\n    return data\n  }\n  return [\n    data,\n  ]\n}\n", "import { arrayify } from './array.js'\nimport { NodeAbstract } from './node.js'\n\nexport const conditional = (\n  condition: any,\n  onTruth: NodeAbstract[] | NodeAbstract,\n  onFalse?: NodeAbstract[] | NodeAbstract,\n): NodeAbstract[] => {\n  if (condition) {\n    return arrayify(onTruth)\n  }\n  return arrayify(onFalse ?? [])\n}\n", "export const marker = Symbol()\n", "import {\n  marker,\n} from './marker.js'\nimport {\n  MemoAbstract,\n} from './memo.js'\nimport {\n  TextAbstract,\n} from './text.js'\n\nexport type NodeAttributeListener = (\n  event: Event\n) => unknown\n\nexport type NodeAttributes =\n  Record<string,\n    boolean |\n    null |\n    number |\n    string |\n    (number | string)[] |\n    NodeAttributeListener |\n    Record<string,\n      boolean | number | string\n    >\n  >\n\nexport type NodeContent =\n  string |\n  MemoAbstract |\n  NodeAbstract |\n  TextAbstract\n\nexport type NodeAbstract = {\n  _: Symbol\n  // Attributes\n  a?: NodeAttributes\n  // Content\n  c?: NodeContent[]\n  // Node type\n  t: string\n}\n\nexport const node = (\n  type: string,\n  attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n  contents?: NodeContent[] | NodeContent,\n): NodeAbstract => {\n  if (\n    typeof (attributesOrContents) !== 'object'\n    || (attributesOrContents as NodeAbstract)._ === marker\n    || Array.isArray(attributesOrContents)\n  ) {\n    contents = attributesOrContents as NodeContent\n    attributesOrContents = undefined\n  }\n\n  return {\n    _: marker,\n    a: attributesOrContents as (NodeAttributes | undefined),\n    c: (\n      contents\n        ? Array.isArray(contents)\n          ? contents\n          : [contents] as NodeContent[]\n        : []\n    ),\n    t: type.toUpperCase(),\n  }\n}\n", "import {\n  node,\n  NodeAbstract,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\n\nexport type Factory = (\n  attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n  contents?: NodeContent[] | NodeContent,\n) => NodeAbstract\n\nexport type FactoryCache = {\n  [key: string]: Factory,\n}\n\nexport const factory = new Proxy({}, {\n  get: (\n    target: FactoryCache,\n    type: string,\n  ): Factory => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n      contents?: NodeContent[] | NodeContent,\n    ): NodeAbstract => node(\n      typeConverted,\n      attributesOrContents,\n      contents,\n    )\n  },\n})\n", "const BRACKET_CLOSE = ']'\nconst BRACKET_OPEN = '['\nconst DOT = '.'\nconst EQUAL = '='\nconst HASH = '#'\nconst QUOTE_SINGLE = '\\''\nconst QUOTE_DOUBLE = '\"'\n\nenum TokenTypes {\n  attribute = 0,\n  class = 1,\n  id = 2,\n  type = 3,\n}\n\nexport const selectorToTokenizer = (\n  selector: string,\n): [string, Record<string, any>] => {\n  const length: number = selector.length\n  let i: number = 0\n\n  let type: string = ''\n  const attributes: Record<string, any> = {}\n\n  let tokenA: string = ''\n  let tokenB: string | true = true\n  let tokenType: TokenTypes = TokenTypes.type\n  const storeToken = () => {\n    if (tokenA) {\n      switch (tokenType) {\n        case TokenTypes.attribute:\n          attributes[tokenA] = tokenB === true ? true : tokenB\n          tokenB = true\n          break\n\n        case TokenTypes.class:\n          if (!attributes.class) {\n            attributes.class = tokenA\n            break\n          }\n          attributes.class += ' ' + tokenA\n          break\n\n        case TokenTypes.id:\n          attributes.id = tokenA\n          break\n\n        case TokenTypes.type:\n          type = tokenA\n          break\n      }\n      tokenA = ''\n    }\n  }\n\n  let character: string\n\n  let attributeBracketCount: number\n  const parseAttribute = (\n  ): void => {\n    attributeBracketCount = 0\n\n    while (i < length) {\n      character = selector[i]\n      i++\n      if (character === EQUAL) {\n        // Parse attribute value.\n        tokenB = ''\n        character = selector[i]\n        const endOnDoubleQuote = character === QUOTE_DOUBLE\n        const endOnSingleQuote = character === QUOTE_SINGLE\n        if (endOnDoubleQuote || endOnSingleQuote) {\n          tokenB += character\n          i++\n        }\n\n        while (i < length) {\n          character = selector[i]\n          if (\n            (endOnDoubleQuote && character === QUOTE_DOUBLE) ||\n            (endOnSingleQuote && character === QUOTE_SINGLE)\n          ) {\n            tokenB += character\n            i++\n            break\n          } else if (\n            !endOnDoubleQuote &&\n            !endOnSingleQuote &&\n            character === BRACKET_CLOSE\n          ) {\n            break\n          }\n          tokenB += character\n          i++\n        }\n\n        if (\n          (\n            tokenB[0] === QUOTE_DOUBLE &&\n            tokenB[tokenB.length - 1] === QUOTE_DOUBLE\n          ) ||\n          (\n            tokenB[0] === QUOTE_SINGLE &&\n            tokenB[tokenB.length - 1] === QUOTE_SINGLE\n          )\n        ) {\n          tokenB = tokenB.substring(1, tokenB.length - 1)\n        }\n\n\n        // Consume until closing bracket, but don't store the tokes since these are invalid.\n        while (i < length) {\n          character = selector[i]\n          i++\n          if (character === BRACKET_CLOSE) {\n            break\n          }\n        }\n        break\n      } else if (character === BRACKET_OPEN) {\n        attributeBracketCount++\n        continue\n      } else if (character === BRACKET_CLOSE) {\n        attributeBracketCount--\n        if (attributeBracketCount < 0) {\n          break\n        }\n        continue\n      }\n\n      tokenA += character\n    }\n    storeToken()\n  }\n\n  while (i < length) {\n    character = selector[i]\n    i++\n\n    if (character === HASH) {\n      storeToken()\n      tokenType = TokenTypes.id\n      continue\n    } else if (character === DOT) {\n      storeToken()\n      tokenType = TokenTypes.class\n      continue\n    } else if (character === BRACKET_OPEN) {\n      storeToken()\n      tokenType = TokenTypes.attribute\n      parseAttribute()\n      continue\n    }\n\n    tokenA += character\n  }\n\n  return [type, attributes]\n}\n", "\nimport {\n  node,\n  NodeAbstract,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\nimport {\n  selectorToTokenizer,\n} from './selector.js'\n\nexport type Fctory = (\n  attributes?: string,\n  contents?: NodeContent[] | NodeContent,\n) => NodeAbstract\n\nexport type FctoryCache = {\n  [key: string]: Fctory,\n}\n\nexport const fctory = new Proxy({}, {\n  get: (\n    target: FctoryCache,\n    type: string,\n  ): Fctory => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      selector?: string,\n      contents?: NodeContent[] | NodeContent,\n    ): NodeAbstract => {\n      let attributes: NodeAttributes | undefined\n      if (selector) {\n        const [_, _attributes] = selectorToTokenizer(selector)\n        attributes = _attributes\n      }\n      return node(\n        typeConverted,\n        attributes,\n        contents,\n      )\n    }\n  },\n})\n", "import { arrayify } from './array.js'\nimport { NodeAbstract } from './node.js'\n\nexport const match = (\n  pattern: any,\n  lookup: Record<any, NodeAbstract[] | NodeAbstract | null | undefined>,\n): NodeAbstract[] => {\n  if (\n    lookup\n    && (pattern in lookup)\n    && lookup[pattern]\n  ) {\n    return arrayify(lookup[pattern])\n  }\n  return []\n}\n", "import {\n  marker,\n} from './marker.js'\nimport { NodeContent } from './node.js'\n\nexport type MemoFunction = (\n  state: Record<string, any>,\n  memory: any,\n) => NodeContent[] | NodeContent\n\nexport type MemoAbstract = {\n  _: Symbol,\n  // Compare data\n  m: any,\n  // Render function\n  r: MemoFunction,\n}\n\nexport const memo = (\n  render: MemoFunction,\n  memory: any,\n) => ({\n  _: marker,\n  r: render,\n  m: memory,\n})\n", "import {\n  marker,\n} from './marker.js'\nimport {\n  NodeAbstract,\n  NodeContent,\n} from './node.js'\nimport {\n  selectorToTokenizer,\n} from './selector.js'\n\nexport const nde = (\n  selector: string,\n  contents?: NodeContent[] | NodeContent,\n): NodeAbstract => {\n  const [type, attributes] = selectorToTokenizer(selector)\n  return {\n    _: marker,\n    a: attributes,\n    c: (\n      contents\n        ? Array.isArray(contents)\n          ? contents\n          : [contents] as NodeContent[]\n        : []\n    ),\n    t: type.toUpperCase(),\n  }\n}\n", "import {\n  marker\n} from './marker.js'\n\nexport type TextAbstract = {\n  _: Symbol,\n  // Contents\n  c: string\n}\n\nexport const text = (\n  contents: number | string | (number | string)[],\n): TextAbstract => ({\n  _: marker,\n  c: (\n    Array.isArray(contents)\n      ? contents.join('')\n      : ('' + contents)\n  ),\n})\n", "import {\n  arrayify,\n} from '@doars/staark-common/src/array.js'\nimport {\n  MemoAbstract,\n} from '@doars/staark-common/src/memo.js'\nimport {\n  NodeAbstract,\n  NodeAttributes,\n  NodeContent,\n} from '@doars/staark-common/src/node.js'\nimport {\n  TextAbstract,\n} from '@doars/staark-common/src/text.js'\n\nconst SELF_CLOSING = [\n  'base',\n  'br',\n  'hr',\n  'img',\n  'input',\n  'link',\n  'meta',\n  'source',\n  'wbr',\n]\n\nexport type ViewFunction = (\n  state: Record<string, any>,\n) => NodeContent[] | NodeContent\n\nconst MATCH_CAPITALS = /[A-Z]+(?![a-z])|[A-Z]/g\nconst HYPHENATE = (\n  part: string,\n  offset: number,\n) => (offset ? '-' : '') + part\n\nconst renderAttributes = (\n  attributes?: NodeAttributes,\n): string => {\n  let rendered = ''\n  if (attributes) {\n    for (const name in attributes) {\n      let value = attributes[name]\n      if (value !== null && value !== undefined) {\n        const type = typeof (value)\n\n        // Ensure it is of type string.\n        if (type === 'boolean') {\n          value = value ? 'true' : 'false'\n        } else if (type !== 'string') {\n          value = value.toString()\n        }\n\n        if (name === 'class') {\n          if (typeof (value) === 'object') {\n            if (Array.isArray(value)) {\n              value = value.join(' ')\n            } else {\n              let classNames: string = ''\n              for (const className in value) {\n                if (value[className]) {\n                  classNames += ' ' + className\n                }\n              }\n              value = classNames\n            }\n          }\n        } else if (name === 'style') {\n          if (typeof (value) === 'object') {\n            if (Array.isArray(value)) {\n              value = value.join(';')\n            } else {\n              let styles: string = ''\n              for (let styleProperty in value) {\n                let styleValue = value[styleProperty]\n\n                // Convert to kebab case.\n                styleProperty = styleProperty\n                  .replace(MATCH_CAPITALS, HYPHENATE)\n                  .toLowerCase()\n\n                if (Array.isArray(styleValue)) {\n                  styles += ';' + styleProperty + ':' + styleValue.join(' ')\n                } else if (value) {\n                  styles += ';' + styleProperty + ':' + value\n                }\n              }\n              value = styles\n            }\n          }\n        }\n\n        rendered += ' ' + name + '=\"' + (value as string) + '\"'\n      }\n    }\n  }\n  return rendered\n}\n\nconst renderElements = (\n  abstracts?: NodeContent[],\n): string => {\n  let rendered = ''\n  if (abstracts) {\n    for (const abstract of abstracts) {\n      if (abstract) {\n        if ((abstract as NodeAbstract).t) {\n          rendered += '<' + (abstract as NodeAbstract).t.toLocaleLowerCase() + renderAttributes((abstract as NodeAbstract).a)\n          if (SELF_CLOSING.includes((abstract as NodeAbstract).t)) {\n            rendered += '/>'\n          } else {\n            rendered += '>'\n            if ((abstract as NodeAbstract).c) {\n              rendered += renderElements((abstract as NodeAbstract).c)\n            }\n            rendered += '</' + (abstract as NodeAbstract).t.toLocaleLowerCase() + '>'\n          }\n        } else {\n          rendered += ' ' + (\n            (abstract as TextAbstract).c ? (abstract as TextAbstract).c : (abstract as string)\n          ) + ' '\n        }\n      }\n    }\n  }\n  return rendered\n}\n\nexport const stringifyPatch = (\n  abstractTree?: NodeContent[] | NodeContent,\n): [string, NodeContent[]] => {\n  abstractTree = arrayify(abstractTree ?? [])\n  return [\n    renderElements(\n      abstractTree,\n    ),\n    abstractTree,\n  ]\n}\n\nexport const stringify = (\n  renderView: ViewFunction,\n  initialState?: Record<string, any>,\n): [string, NodeContent[]] => {\n  if (!initialState) {\n    initialState = {}\n  }\n\n  const renderElements = (\n    abstracts?: NodeContent[],\n  ): string => {\n    let rendered = ''\n    if (abstracts) {\n      for (const abstract of abstracts) {\n        if (abstract) {\n          if ((abstract as MemoAbstract).m) {\n            rendered += renderElements(\n              arrayify(\n                (abstract as MemoAbstract).r(\n                  initialState,\n                  (abstract as MemoAbstract).m,\n                )\n              )\n            )\n          } else if ((abstract as NodeAbstract).t) {\n            rendered += '<' + (abstract as NodeAbstract).t.toLocaleLowerCase() + renderAttributes((abstract as NodeAbstract).a)\n            if (SELF_CLOSING.includes((abstract as NodeAbstract).t)) {\n              rendered += '/>'\n            } else {\n              rendered += '>'\n              if ((abstract as NodeAbstract).c) {\n                rendered += renderElements((abstract as NodeAbstract).c)\n              }\n              rendered += '</' + (abstract as NodeAbstract).t.toLocaleLowerCase() + '>'\n            }\n          } else {\n            rendered += ' ' + (\n              (abstract as TextAbstract).c ? (abstract as TextAbstract).c : (abstract as string)\n            ) + ' '\n          }\n        }\n      }\n    }\n    return rendered\n  }\n\n  const abstractTree = arrayify(\n    renderView(initialState),\n  )\n  return [\n    renderElements(\n      abstractTree,\n    ),\n    abstractTree,\n  ]\n}\n\nconst customStringify = (\n  data: Record<string, any>,\n): string => {\n  if (\n    typeof data === 'number'\n    || typeof data === 'boolean'\n  ) {\n    return String(data)\n  }\n\n  if (typeof data === 'string') {\n    // Escape double quotes\n    return `\"${(data as string).replace(/\"/g, '\\\\\"')}\"`\n  }\n\n  if (Array.isArray(data)) {\n    return `[${data.map(item => customStringify(item)).join(',')}]`;\n  }\n\n  if (typeof data === 'object') {\n    const keys = Object.keys(data)\n      .filter((key: string) => !key.startsWith('_'))\n    const objectContent: string = keys\n      .map((key: string) => `\"${key}\":${customStringify(data[key])}`)\n      .join(',')\n    return `{${objectContent}}`\n  }\n\n  // For any unsupported types (like functions or undefined).\n  return 'null'\n}\n\nexport const stringifyPatchFull = (\n  abstracts?: NodeContent[],\n): [string, string] => {\n  const [\n    rendered,\n    abstractTree,\n  ] = stringifyPatch(\n    abstracts,\n  )\n\n  return [\n    rendered,\n    customStringify(abstractTree),\n  ]\n}\n\nexport const stringifyFull = (\n  renderView: ViewFunction,\n  initialState?: Record<string, any>,\n): [string, string, string] => {\n  if (!initialState) {\n    initialState = {}\n  }\n\n  const [\n    rendered,\n    abstractTree,\n  ] = stringify(\n    renderView,\n    initialState\n  )\n\n  return [\n    rendered,\n    customStringify(abstractTree),\n    JSON.stringify(initialState)\n  ]\n}\n", "import { iife } from '../../../.scripts/iife.js'\n\nimport { conditional } from '@doars/staark-common/src/conditional.js'\nimport { factory } from '@doars/staark-common/src/factory.js'\nimport { fctory } from '@doars/staark-common/src/fctory.js'\nimport { match } from '@doars/staark-common/src/match.js'\nimport { memo } from '@doars/staark-common/src/memo.js'\nimport { nde } from '@doars/staark-common/src/nde.js'\nimport { node } from '@doars/staark-common/src/node.js'\nimport { text } from '@doars/staark-common/src/text.js'\n\nimport {\n  stringify,\n  stringifyFull,\n  stringifyPatch,\n  stringifyPatchFull,\n} from './library/stringify.js'\n\niife([\n  'staark',\n], {\n  conditional,\n  factory,\n  fctory,\n  match,\n  memo,\n  nde,\n  node,\n  stringify,\n  stringifyFull,\n  stringifyPatch,\n  stringifyPatchFull,\n  text,\n})\n"],
  "mappings": "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",
  "names": ["renderElements"]
}
