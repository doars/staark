{
  "version": 3,
  "sources": ["../../../.scripts/iife.ts", "../../staark-common/src/array.js", "../../staark-common/src/conditional.js", "../../staark-common/src/marker.js", "../../staark-common/src/node.js", "../../staark-common/src/factory.js", "../../staark-common/src/selector.js", "../../staark-common/src/fctory.js", "../../staark-common/src/identifier.ts", "../../staark-common/src/match.js", "../../staark-common/src/memo.js", "../../staark-common/src/nde.js", "../src/library/stringify.js", "../src/index.iife.js"],
  "sourcesContent": ["export const iife = function (\n  path: Array<string>,\n  data: any\n) {\n  let subject: Record<string, any> = window\n  for (let i = 0; i < path.length - 1; i++) {\n    if (\n      typeof (subject[path[i]]) !== 'object'\n      || !Array.isArray(subject[path[i]])\n    ) {\n      subject[path[i]] = {}\n    }\n    subject = subject[path[i]]\n  }\n  subject[path[path.length - 1]] = data\n}\n", "/**\n * Ensure the data is an array if it isn't already. Non-truthy values are converted to empty arrays.\n *\n * @template T\n * @param {T|T[]} data - Data to \"arrify\".\n * @returns {T[]} An array containing the data.\n */\nexport const arrayify = (\n  data,\n) => arrayifyOrUndefined(data) || []\n\n/**\n * Ensure the data is an array if it isn't already. Non-truthy values are converted to undefined.\n *\n * @template T\n * @param {T|T[]} data - Data to \"arrify\".\n * @returns {(T[]|undefined)} An array containing the data or undefined.\n */\nexport const arrayifyOrUndefined = (\n  data,\n) => data ? (\n  Array.isArray(data)\n    ? data\n    : [data]\n) : undefined\n", "import { arrayify } from './array.js'\n\n/**\n * @typedef {import('./node.js').NodeContent} NodeContent\n * @typedef {import('./types.js').ResolveFunction} ResolveFunction\n */\n\n/**\n * @param {any} condition - The condition to evaluate.\n * @param {NodeContent[] | NodeContent | ResolveFunction} onTruth - The content to return if the condition is true.\n * @param {NodeContent[] | NodeContent | ResolveFunction} [onFalse] - The content to return if the condition is false.\n * @returns {NodeContent[]} - The resulting content as an array.\n */\nexport const conditional = (\n  condition,\n  onTruth,\n  onFalse,\n) => {\n  let result = (\n    condition\n      ? onTruth\n      : onFalse\n  )\n  if (typeof (result) === 'function') {\n    result = result()\n  }\n  return arrayify(result)\n}\n", "export const marker = 'n'\n", "import { arrayifyOrUndefined } from './array.js'\nimport { marker } from './marker.js'\n\n/**\n * @typedef {import('./memo.js').MemoAbstract} MemoAbstract\n */\n\n/**\n * @typedef {function(Event, Record<string, any>): unknown} NodeAttributeListener\n * @property {function(Event, Record<string, any>): unknown} [f]\n */\n\n/**\n * @typedef {Object.<string, boolean | null | number | string | (number | string)[] | NodeAttributeListener | Record<string, boolean | number | string>>} NodeAttributes\n */\n\n/**\n * @typedef {string | MemoAbstract | NodeAbstract} NodeContent\n */\n\n/**\n * @typedef {Object} NodeAbstract\n * @property {string} _ - Discriminator\n * @property {NodeAttributes} [a] - Attributes\n * @property {NodeContent[]} [c] - Content\n * @property {string} t - Node type\n */\n\n/**\n * @param {string} type\n * @param {NodeAttributes | NodeContent[] | NodeContent} [attributesOrContents]\n * @param {NodeContent[] | NodeContent} [contents]\n * @returns {NodeAbstract}\n */\nexport const node = (\n  type,\n  attributesOrContents,\n  contents,\n) => {\n  if (\n    typeof (attributesOrContents) !== 'object'\n    || attributesOrContents._ === marker\n    || Array.isArray(attributesOrContents)\n  ) {\n    contents = attributesOrContents\n    attributesOrContents = undefined\n  }\n\n  return {\n    _: marker,\n    a: attributesOrContents,\n    c: arrayifyOrUndefined(contents),\n    t: type.toUpperCase(),\n  }\n}\n", "import {\n  node,\n} from './node.js'\n\n/**\n * @typedef {import('./node.js').NodeAbstract} NodeAbstract\n * @typedef {import('./node.js').NodeAttributes} NodeAttributes\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * @typedef {Function} Factory\n * @param {NodeAttributes | NodeContent[] | NodeContent} [attributesOrContents]\n * @param {NodeContent[] | NodeContent} [contents]\n * @returns {NodeAbstract}\n */\n\n/**\n * @typedef {Object} FactoryCache\n */\n\nexport const factory = new Proxy({}, {\n  /**\n   * @param {FactoryCache} target\n   * @param {string} type\n   * @returns {Factory}\n   */\n  get: (\n    target,\n    type,\n  ) => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      attributesOrContents,\n      contents,\n    ) => node(\n      typeConverted,\n      attributesOrContents,\n      contents,\n    )\n  },\n})\n", "const BRACKET_CLOSE = ']'\nconst BRACKET_OPEN = '['\nconst DOT = '.'\nconst EQUAL = '='\nconst HASH = '#'\nconst QUOTE_SINGLE = '\\''\nconst QUOTE_DOUBLE = '\"'\n\n/**\n * @enum {number}\n */\nconst TokenTypes = {\n  attribute: 0,\n  class: 1,\n  id: 2,\n  type: 3,\n}\n\n/**\n * @typedef {Object.<string, any>} Attributes\n */\n\n/**\n * @param {string} selector\n * @returns {[string, Attributes]}\n */\nexport const selectorToTokenizer = (\n  selector,\n) => {\n  const length = selector.length\n  let i = 0\n\n  let type = ''\n  /** @type {Attributes} */\n  const attributes = {}\n\n  let tokenA = ''\n  let tokenB = true\n  let tokenType = TokenTypes.type\n  const storeToken = () => {\n    if (tokenA) {\n      switch (tokenType) {\n        case TokenTypes.attribute:\n          attributes[tokenA] = (\n            tokenB === true\n              ? true\n              : tokenB\n          )\n          tokenB = true\n          break\n\n        case TokenTypes.class:\n          if (!attributes.class) {\n            attributes.class = tokenA\n            break\n          }\n          attributes.class += ' ' + tokenA\n          break\n\n        case TokenTypes.id:\n          attributes.id = tokenA\n          break\n\n        case TokenTypes.type:\n          type = tokenA\n          break\n      }\n      tokenA = ''\n    }\n  }\n\n  let character\n\n  let attributeBracketCount\n  const parseAttribute = () => {\n    attributeBracketCount = 0\n\n    while (i < length) {\n      character = selector[i]\n      i++\n      if (character === EQUAL) {\n        // Parse attribute value.\n        tokenB = ''\n        character = selector[i]\n        const endOnDoubleQuote = character === QUOTE_DOUBLE\n        const endOnSingleQuote = character === QUOTE_SINGLE\n        if (\n          endOnDoubleQuote\n          || endOnSingleQuote\n        ) {\n          tokenB += character\n          i++\n        }\n\n        while (i < length) {\n          character = selector[i]\n          if (\n            (\n              endOnDoubleQuote\n              && character === QUOTE_DOUBLE\n            )\n            || (\n              endOnSingleQuote\n              && character === QUOTE_SINGLE\n            )\n          ) {\n            tokenB += character\n            i++\n            break\n          } else if (\n            !endOnDoubleQuote\n            && !endOnSingleQuote\n            && character === BRACKET_CLOSE\n          ) {\n            break\n          }\n          tokenB += character\n          i++\n        }\n\n        if (\n          (\n            tokenB[0] === QUOTE_DOUBLE\n            && tokenB[tokenB.length - 1] === QUOTE_DOUBLE\n          ) ||\n          (\n            tokenB[0] === QUOTE_SINGLE\n            && tokenB[tokenB.length - 1] === QUOTE_SINGLE\n          )\n        ) {\n          tokenB = tokenB.substring(1, tokenB.length - 1)\n        }\n\n        // Consume until closing bracket, but don't store the tokens since these are invalid.\n        while (i < length) {\n          character = selector[i]\n          i++\n          if (character === BRACKET_CLOSE) {\n            break\n          }\n        }\n        break\n      } else if (character === BRACKET_OPEN) {\n        attributeBracketCount++\n        continue\n      } else if (character === BRACKET_CLOSE) {\n        attributeBracketCount--\n        if (attributeBracketCount < 0) {\n          break\n        }\n        continue\n      }\n\n      tokenA += character\n    }\n    storeToken()\n  }\n\n  while (i < length) {\n    character = selector[i]\n    i++\n\n    if (character === HASH) {\n      storeToken()\n      tokenType = TokenTypes.id\n      continue\n    } else if (character === DOT) {\n      storeToken()\n      tokenType = TokenTypes.class\n      continue\n    } else if (character === BRACKET_OPEN) {\n      storeToken()\n      tokenType = TokenTypes.attribute\n      parseAttribute()\n      continue\n    }\n\n    tokenA += character\n  }\n\n  return [type, attributes]\n}\n", "import {\n  node,\n} from './node.js'\nimport {\n  selectorToTokenizer,\n} from './selector.js'\n\n/**\n * @typedef {import('./node.js').NodeAbstract} NodeAbstract\n * @typedef {import('./node.js').NodeAttributes} NodeAttributes\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * @typedef {function(string=, NodeContent[]|NodeContent=): NodeAbstract} Fctory\n */\n\n/**\n * @typedef {Object<string, Fctory>} FctoryCache\n */\n\nexport const fctory = new Proxy({}, {\n  /**\n   * @param {FctoryCache} target\n   * @param {string} type\n   * @returns {Fctory}\n   */\n  get: (target, type) => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      selector,\n      contents,\n    ) => {\n      let attributes\n      if (selector) {\n        const [_, _attributes] = selectorToTokenizer(selector)\n        attributes = _attributes\n      }\n      return node(\n        typeConverted,\n        attributes,\n        contents,\n      )\n    }\n  },\n})\n", "let identifierCount = 0\n\n/**\n * Generates a unique identifier with a given prefix.\n * @param {string} prefix - The prefix for the identifier.\n * @returns {string} The generated identifier.\n */\nexport const identifier = (\n  prefix,\n) => prefix + '-' + (identifierCount++)\n", "import { arrayify } from './array.js'\n\n/**\n * @typedef {import('./node.js').NodeContent} NodeContent\n * @typedef {import('./types.js').ResolveFunction} ResolveFunction\n */\n\n/**\n * Matches a key to a value in a lookup table, with a fallback option.\n *\n * @param {any} key - The key to match.\n * @param {Record<any, NodeContent[] | NodeContent | ResolveFunction | null | undefined>} lookup - The lookup table.\n * @param {NodeContent[] | NodeContent | ResolveFunction | null} [fallback] - The fallback value.\n * @returns {NodeContent[]} - The matched or fallback value, arrayified.\n */\nexport const match = (\n  key,\n  lookup,\n  fallback,\n) => {\n  let result\n  if (\n    lookup\n    && (key in lookup)\n    && lookup[key]\n  ) {\n    result = lookup[key]\n  } else {\n    result = fallback\n  }\n  if (typeof result === 'function') {\n    result = result()\n  }\n  return arrayify(result)\n}\n", "import { marker } from './marker.js'\n\n/**\n * @typedef {Object<string, any>} State\n */\n\n/**\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * @typedef {function(State, any): NodeContent[] | NodeContent} MemoFunction\n */\n\n/**\n * @typedef {Object} MemoAbstract\n * @property {string} _ - Marker\n * @property {any} m - Memory\n * @property {MemoFunction} r - Render function\n */\n\n/**\n * @param {MemoFunction} render\n * @param {any} memory\n * @returns {MemoAbstract}\n */\nexport const memo = (\n  render,\n  memory,\n) => ({\n  _: marker,\n  r: render,\n  m: memory,\n})\n", "import { arrayifyOrUndefined } from './array.js'\nimport { marker } from './marker.js'\nimport { selectorToTokenizer } from './selector.js'\n\n/**\n * @typedef {import('./node.js').NodeAbstract} NodeAbstract\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * Creates a NodeAbstract object from a selector and optional contents.\n *\n * @param {string} selector - The selector string.\n * @param {NodeContent[] | NodeContent} [contents] - The optional contents.\n * @returns {NodeAbstract} The created NodeAbstract object.\n */\nexport const nde = (\n  selector,\n  contents,\n) => {\n  const [type, attributes] = selectorToTokenizer(selector)\n\n  return {\n    _: marker,\n    a: attributes,\n    c: arrayifyOrUndefined(contents),\n    t: type.toUpperCase(),\n  }\n}\n", "import { arrayifyOrUndefined } from '@doars/staark-common/src/array.js'\n\nconst SELF_CLOSING = [\n  'base',\n  'br',\n  'hr',\n  'img',\n  'input',\n  'link',\n  'meta',\n  'source',\n  'wbr',\n]\n\n/**\n * @typedef {import('@doars/staark-common/src/node.js').NodeContent} NodeContent\n * @typedef {import('@doars/staark-common/src/node.js').NodeAttributes} NodeAttributes\n * @typedef {import('@doars/staark-common/src/node.js').NodeAbstract} NodeAbstract\n * @typedef {import('@doars/staark-common/src/memo.js').MemoAbstract} MemoAbstract\n */\n\n/**\n * @callback ViewFunction\n * @param {Record<string, any>} state\n * @returns {NodeContent[] | NodeContent}\n */\n\nconst MATCH_CAPITALS = /[A-Z]+(?![a-z])|[A-Z]/g\nconst HYPHENATE = (part, offset) => (offset ? '-' : '') + part\n\n/**\n * @param {NodeAttributes} [attributes]\n * @returns {string}\n */\nconst renderAttributes = (\n  attributes,\n) => {\n  let rendered = ''\n  if (attributes) {\n    for (const name in attributes) {\n      let value = attributes[name]\n      if (value !== null && value !== undefined) {\n        const type = typeof value\n\n        // Ensure it is of type string.\n        if (type === 'boolean') {\n          value = value ? 'true' : 'false'\n        } else if (type !== 'string') {\n          value = value.toString()\n        }\n\n        if (name === 'class') {\n          if (typeof value === 'object') {\n            if (Array.isArray(value)) {\n              value = value.join(' ')\n            } else {\n              let classNames = ''\n              for (const className in value) {\n                if (value[className]) {\n                  classNames += ' ' + className\n                }\n              }\n              value = classNames\n            }\n          }\n        } else if (name === 'style') {\n          if (typeof value === 'object') {\n            if (Array.isArray(value)) {\n              value = value.join(';')\n            } else {\n              let styles = ''\n              for (let styleProperty in value) {\n                let styleValue = value[styleProperty]\n\n                // Convert to kebab case.\n                styleProperty = styleProperty\n                  .replace(MATCH_CAPITALS, HYPHENATE)\n                  .toLowerCase()\n\n                if (Array.isArray(styleValue)) {\n                  styles += ';' + styleProperty + ':' + styleValue.join(' ')\n                } else if (value) {\n                  styles += ';' + styleProperty + ':' + value\n                }\n              }\n              value = styles\n            }\n          }\n        }\n\n        rendered += ' ' + name + '=\"' + value + '\"'\n      }\n    }\n  }\n  return rendered\n}\n\n/**\n * @param {NodeContent[]} [abstracts]\n * @returns {string}\n */\nconst renderElements = (\n  abstracts,\n) => {\n  let rendered = ''\n  if (abstracts) {\n    for (const abstract of abstracts) {\n      if (abstract) {\n        if (abstract.t) {\n          rendered += '<' + abstract.t.toLocaleLowerCase() + renderAttributes(abstract.a)\n          if (SELF_CLOSING.includes(abstract.t)) {\n            rendered += '/>'\n          } else {\n            rendered += '>'\n            if (abstract.c) {\n              rendered += renderElements(abstract.c)\n            }\n            rendered += '</' + abstract.t.toLocaleLowerCase() + '>'\n          }\n        } else {\n          rendered += ' ' + abstract + ' '\n        }\n      }\n    }\n  }\n  return rendered\n}\n\n/**\n * @param {NodeContent[] | NodeContent} [abstractTree]\n * @returns {[string, NodeContent[] | undefined]}\n */\nexport const stringifyPatch = (\n  abstractTree,\n) => {\n  abstractTree = arrayifyOrUndefined(abstractTree)\n  return [\n    renderElements(abstractTree),\n    abstractTree,\n  ]\n}\n\n/**\n * @param {ViewFunction} renderView\n * @param {Record<string, any>} [initialState]\n * @returns {[string, NodeContent[] | undefined]}\n */\nexport const stringify = (\n  renderView,\n  initialState,\n) => {\n  if (!initialState) {\n    initialState = {}\n  }\n\n  /**\n   * @param {NodeContent[]} [abstracts]\n   * @returns {string}\n   */\n  const renderElements = (\n    abstracts,\n  ) => {\n    let rendered = ''\n    if (abstracts) {\n      for (const abstract of abstracts) {\n        if (abstract) {\n          if (abstract.m) {\n            rendered += renderElements(\n              arrayifyOrUndefined(\n                abstract.r(initialState, abstract.m)\n              )\n            )\n          } else if (abstract.t) {\n            rendered += '<' + abstract.t.toLocaleLowerCase() + renderAttributes(abstract.a)\n            if (SELF_CLOSING.includes(abstract.t)) {\n              rendered += '/>'\n            } else {\n              rendered += '>'\n              if (abstract.c) {\n                rendered += renderElements(abstract.c)\n              }\n              rendered += '</' + abstract.t.toLocaleLowerCase() + '>'\n            }\n          } else {\n            rendered += ' ' + abstract + ' '\n          }\n        }\n      }\n    }\n    return rendered\n  }\n\n  const abstractTree = arrayifyOrUndefined(renderView(initialState))\n  return [\n    renderElements(abstractTree),\n    abstractTree,\n  ]\n}\n\n/**\n * @param {Record<string, any>} [data]\n * @returns {string}\n */\nconst customStringify = (\n  data,\n) => {\n  if (\n    typeof data === 'number'\n    || typeof data === 'boolean'\n  ) {\n    return String(data)\n  }\n\n  if (typeof data === 'string') {\n    // Escape double quotes\n    return '\"' + data.replace(/\"/g, '\\\\\"') + '\"'\n  }\n\n  if (Array.isArray(data)) {\n    return '[' + data.map(\n      item => customStringify(item)\n    ).join(',') + ']'\n  }\n\n  if (typeof data === 'object') {\n    const keys = Object.keys(data)\n      .filter(key => !key.startsWith('_'))\n    const objectContent = keys\n      .map(key => '\"' + key + '\":' + customStringify(data[key]) + '\"')\n      .join(',')\n    return '{' + objectContent + '}'\n  }\n\n  return 'null'\n}\n\n/**\n * @param {NodeContent[]} [abstracts]\n * @returns {[string, string]}\n */\nexport const stringifyPatchFull = (abstracts) => {\n  const [rendered, abstractTree] = stringifyPatch(abstracts)\n\n  return [\n    rendered,\n    customStringify(abstractTree),\n  ]\n}\n\n/**\n * @param {ViewFunction} renderView\n * @param {Record<string, any>} [initialState]\n * @returns {[string, string, string]}\n */\nexport const stringifyFull = (\n  renderView,\n  initialState,\n) => {\n  if (!initialState) {\n    initialState = {}\n  }\n\n  const [rendered, abstractTree] = stringify(renderView, initialState)\n\n  return [\n    rendered,\n    customStringify(abstractTree),\n    JSON.stringify(initialState)\n  ]\n}\n", "import { iife } from '../../../.scripts/iife.js'\n\nimport { conditional } from '@doars/staark-common/src/conditional.js'\nimport { factory } from '@doars/staark-common/src/factory.js'\nimport { fctory } from '@doars/staark-common/src/fctory.js'\nimport { identifier } from '@doars/staark-common/src/identifier.js'\nimport { match } from '@doars/staark-common/src/match.js'\nimport { memo } from '@doars/staark-common/src/memo.js'\nimport { nde } from '@doars/staark-common/src/nde.js'\nimport { node } from '@doars/staark-common/src/node.js'\n\nimport {\n  stringify,\n  stringifyFull,\n  stringifyPatch,\n  stringifyPatchFull,\n} from './library/stringify.js'\n\niife([\n  'staark',\n], {\n  conditional,\n  factory,\n  fctory,\n  identifier,\n  match,\n  memo,\n  nde,\n  node,\n  stringify,\n  stringifyFull,\n  stringifyPatch,\n  stringifyPatchFull,\n})\n"],
  "mappings": "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",
  "names": ["iife", "path", "data", "subject", "i", "arrayify", "data", "arrayifyOrUndefined", "conditional", "condition", "onTruth", "onFalse", "result", "arrayify", "marker", "node", "type", "attributesOrContents", "contents", "marker", "arrayifyOrUndefined", "factory", "target", "type", "typeConverted", "capital", "attributesOrContents", "contents", "node", "BRACKET_CLOSE", "BRACKET_OPEN", "DOT", "EQUAL", "HASH", "QUOTE_SINGLE", "QUOTE_DOUBLE", "TokenTypes", "selectorToTokenizer", "selector", "length", "i", "type", "attributes", "tokenA", "tokenB", "tokenType", "storeToken", "character", "attributeBracketCount", "parseAttribute", "endOnDoubleQuote", "endOnSingleQuote", "fctory", "target", "type", "typeConverted", "capital", "selector", "contents", "attributes", "_", "_attributes", "selectorToTokenizer", "node", "identifierCount", "identifier", "prefix", "match", "key", "lookup", "fallback", "result", "arrayify", "memo", "render", "memory", "marker", "nde", "selector", "contents", "type", "attributes", "selectorToTokenizer", "marker", "arrayifyOrUndefined", "SELF_CLOSING", "MATCH_CAPITALS", "HYPHENATE", "part", "offset", "renderAttributes", "attributes", "rendered", "name", "value", "type", "classNames", "className", "styles", "styleProperty", "styleValue", "renderElements", "abstracts", "abstract", "stringifyPatch", "abstractTree", "arrayifyOrUndefined", "stringify", "renderView", "initialState", "customStringify", "data", "item", "key", "stringifyPatchFull", "stringifyFull", "iife", "conditional", "factory", "fctory", "identifier", "match", "memo", "nde", "node", "stringify", "stringifyFull", "stringifyPatch", "stringifyPatchFull"]
}
