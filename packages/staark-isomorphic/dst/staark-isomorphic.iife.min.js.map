{
  "version": 3,
  "sources": ["../../../.scripts/iife.ts", "../../staark-common/src/array.ts", "../../staark-common/src/conditional.ts", "../../staark-common/src/marker.ts", "../../staark-common/src/node.ts", "../../staark-common/src/factory.ts", "../../staark-common/src/selector.ts", "../../staark-common/src/fctory.ts", "../../staark-common/src/match.ts", "../../staark-common/src/memo.ts", "../../staark-common/src/nde.ts", "../../staark-common/src/text.ts", "../src/library/stringify.ts", "../src/index.iife.ts"],
  "sourcesContent": ["export const iife = function (\n  path: Array<string>,\n  data: any\n) {\n  let subject: Record<string, any> = window\n  for (let i = 0; i < path.length - 1; i++) {\n    if (\n      typeof (subject[path[i]]) !== 'object'\n      || !Array.isArray(subject[path[i]])\n    ) {\n      subject[path[i]] = {}\n    }\n    subject = subject[path[i]]\n  }\n  subject[path[path.length - 1]] = data\n}\n", "export const arrayify = function <T>(\n  data: T[] | T,\n): T[] {\n  if (Array.isArray(data)) {\n    return data\n  }\n  return [\n    data,\n  ]\n}\n", "import { arrayify } from './array.js'\nimport { NodeAbstract } from './node.js'\n\nexport const conditional = (\n  condition: any,\n  onTruth: NodeAbstract[] | NodeAbstract,\n  onFalse?: NodeAbstract[] | NodeAbstract,\n): NodeAbstract[] => {\n  if (condition) {\n    return arrayify(onTruth)\n  }\n  return arrayify(onFalse ?? [])\n}\n", "export const marker = Symbol()\n", "import {\n  marker,\n} from './marker.js'\nimport {\n  MemoAbstract,\n} from './memo.js'\nimport {\n  TextAbstract,\n} from './text.js'\n\nexport type NodeAttributeListener = (\n  event: Event\n) => unknown\n\nexport type NodeAttributes =\n  Record<string,\n    boolean |\n    null |\n    number |\n    string |\n    (number | string)[] |\n    NodeAttributeListener |\n    Record<string,\n      boolean | number | string\n    >\n  >\n\nexport type NodeContent =\n  string |\n  MemoAbstract |\n  NodeAbstract |\n  TextAbstract\n\nexport type NodeAbstract = {\n  _: Symbol\n  // Attributes\n  a?: NodeAttributes\n  // Content\n  c?: NodeContent[]\n  // Node type\n  t: string\n}\n\nexport const node = (\n  type: string,\n  attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n  contents?: NodeContent[] | NodeContent,\n): NodeAbstract => {\n  if (\n    typeof (attributesOrContents) !== 'object'\n    || (attributesOrContents as NodeAbstract)._ === marker\n    || Array.isArray(attributesOrContents)\n  ) {\n    contents = attributesOrContents as NodeContent\n    attributesOrContents = undefined\n  }\n\n  return {\n    _: marker,\n    a: attributesOrContents as (NodeAttributes | undefined),\n    c: (\n      contents\n        ? Array.isArray(contents)\n          ? contents\n          : [contents] as NodeContent[]\n        : []\n    ),\n    t: type.toUpperCase(),\n  }\n}\n", "import {\n  node,\n  NodeAbstract,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\n\nexport type Factory = (\n  attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n  contents?: NodeContent[] | NodeContent,\n) => NodeAbstract\n\nexport type FactoryCache = {\n  [key: string]: Factory,\n}\n\nexport const factory = new Proxy({}, {\n  get: (\n    target: FactoryCache,\n    type: string,\n  ): Factory => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n      contents?: NodeContent[] | NodeContent,\n    ): NodeAbstract => node(\n      typeConverted,\n      attributesOrContents,\n      contents,\n    )\n  },\n})\n", "const BRACKET_CLOSE = ']'\nconst BRACKET_OPEN = '['\nconst DOT = '.'\nconst EQUAL = '='\nconst HASH = '#'\nconst QUOTE_SINGLE = '\\''\nconst QUOTE_DOUBLE = '\"'\n\nenum TokenTypes {\n  attribute = 0,\n  class = 1,\n  id = 2,\n  type = 3,\n}\n\nexport const selectorToTokenizer = (\n  selector: string,\n): [string, Record<string, any>] => {\n  const length: number = selector.length\n  let i: number = 0\n\n  let type: string = ''\n  const attributes: Record<string, any> = {}\n\n  let tokenA: string = ''\n  let tokenB: string | true = true\n  let tokenType: TokenTypes = TokenTypes.type\n  const storeToken = () => {\n    if (tokenA) {\n      switch (tokenType) {\n        case TokenTypes.attribute:\n          attributes[tokenA] = tokenB === true ? true : tokenB\n          tokenB = true\n          break\n\n        case TokenTypes.class:\n          if (!attributes.class) {\n            attributes.class = tokenA\n            break\n          }\n          attributes.class += ' ' + tokenA\n          break\n\n        case TokenTypes.id:\n          attributes.id = tokenA\n          break\n\n        case TokenTypes.type:\n          type = tokenA\n          break\n      }\n      tokenA = ''\n    }\n  }\n\n  let character: string\n\n  let attributeBracketCount: number\n  const parseAttribute = (\n  ): void => {\n    attributeBracketCount = 0\n\n    while (i < length) {\n      character = selector[i]\n      i++\n      if (character === EQUAL) {\n        // Parse attribute value.\n        tokenB = ''\n        character = selector[i]\n        const endOnDoubleQuote = character === QUOTE_DOUBLE\n        const endOnSingleQuote = character === QUOTE_SINGLE\n        if (endOnDoubleQuote || endOnSingleQuote) {\n          tokenB += character\n          i++\n        }\n\n        while (i < length) {\n          character = selector[i]\n          if (\n            (endOnDoubleQuote && character === QUOTE_DOUBLE) ||\n            (endOnSingleQuote && character === QUOTE_SINGLE)\n          ) {\n            tokenB += character\n            i++\n            break\n          } else if (\n            !endOnDoubleQuote &&\n            !endOnSingleQuote &&\n            character === BRACKET_CLOSE\n          ) {\n            break\n          }\n          tokenB += character\n          i++\n        }\n\n        if (\n          (\n            tokenB[0] === QUOTE_DOUBLE &&\n            tokenB[tokenB.length - 1] === QUOTE_DOUBLE\n          ) ||\n          (\n            tokenB[0] === QUOTE_SINGLE &&\n            tokenB[tokenB.length - 1] === QUOTE_SINGLE\n          )\n        ) {\n          tokenB = tokenB.substring(1, tokenB.length - 1)\n        }\n\n\n        // Consume until closing bracket, but don't store the tokes since these are invalid.\n        while (i < length) {\n          character = selector[i]\n          i++\n          if (character === BRACKET_CLOSE) {\n            break\n          }\n        }\n        break\n      } else if (character === BRACKET_OPEN) {\n        attributeBracketCount++\n        continue\n      } else if (character === BRACKET_CLOSE) {\n        attributeBracketCount--\n        if (attributeBracketCount < 0) {\n          break\n        }\n        continue\n      }\n\n      tokenA += character\n    }\n    storeToken()\n  }\n\n  while (i < length) {\n    character = selector[i]\n    i++\n\n    if (character === HASH) {\n      storeToken()\n      tokenType = TokenTypes.id\n      continue\n    } else if (character === DOT) {\n      storeToken()\n      tokenType = TokenTypes.class\n      continue\n    } else if (character === BRACKET_OPEN) {\n      storeToken()\n      tokenType = TokenTypes.attribute\n      parseAttribute()\n      continue\n    }\n\n    tokenA += character\n  }\n\n  return [type, attributes]\n}\n", "\nimport {\n  node,\n  NodeAbstract,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\nimport {\n  selectorToTokenizer,\n} from './selector.js'\n\nexport type Fctory = (\n  attributes?: string,\n  contents?: NodeContent[] | NodeContent,\n) => NodeAbstract\n\nexport type FctoryCache = {\n  [key: string]: Fctory,\n}\n\nexport const fctory = new Proxy({}, {\n  get: (\n    target: FctoryCache,\n    type: string,\n  ): Fctory => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      selector?: string,\n      contents?: NodeContent[] | NodeContent,\n    ): NodeAbstract => {\n      let attributes: NodeAttributes | undefined\n      if (selector) {\n        const [_, _attributes] = selectorToTokenizer(selector)\n        attributes = _attributes\n      }\n      return node(\n        typeConverted,\n        attributes,\n        contents,\n      )\n    }\n  },\n})\n", "import { arrayify } from './array.js'\nimport { NodeAbstract } from './node.js'\n\nexport const match = (\n  pattern: any,\n  lookup: Record<any, NodeAbstract[] | NodeAbstract | null | undefined>,\n): NodeAbstract[] => {\n  if (\n    lookup\n    && (pattern in lookup)\n    && lookup[pattern]\n  ) {\n    return arrayify(lookup[pattern])\n  }\n  return []\n}\n", "import {\n  marker,\n} from './marker.js'\nimport { NodeContent } from './node.js'\n\nexport type MemoFunction = (\n  state: Record<string, any>,\n  memory: any,\n) => NodeContent[] | NodeContent\n\nexport type MemoAbstract = {\n  _: Symbol,\n  // Compare data\n  m: any,\n  // Render function\n  r: MemoFunction,\n}\n\nexport const memo = (\n  render: MemoFunction,\n  memory: any,\n) => ({\n  _: marker,\n  r: render,\n  m: memory,\n})\n", "import {\n  marker,\n} from './marker.js'\nimport {\n  NodeAbstract,\n  NodeContent,\n} from './node.js'\nimport {\n  selectorToTokenizer,\n} from './selector.js'\n\nexport const nde = (\n  selector: string,\n  contents?: NodeContent[] | NodeContent,\n): NodeAbstract => {\n  const [type, attributes] = selectorToTokenizer(selector)\n  return {\n    _: marker,\n    a: attributes,\n    c: (\n      contents\n        ? Array.isArray(contents)\n          ? contents\n          : [contents] as NodeContent[]\n        : []\n    ),\n    t: type.toUpperCase(),\n  }\n}\n", "import {\n  marker\n} from './marker.js'\n\nexport type TextAbstract = {\n  _: Symbol,\n  // Contents\n  c: string\n}\n\nexport const text = (\n  contents: number | string | (number | string)[],\n): TextAbstract => ({\n  _: marker,\n  c: (\n    Array.isArray(contents)\n      ? contents.join('')\n      : ('' + contents)\n  ),\n})\n", "import {\n  arrayify,\n} from '@doars/staark-common/src/array.js'\nimport {\n  MemoAbstract,\n} from '@doars/staark-common/src/memo.js'\nimport {\n  NodeAbstract,\n  NodeAttributes,\n  NodeContent,\n} from '@doars/staark-common/src/node.js'\nimport {\n  TextAbstract,\n} from '@doars/staark-common/src/text.js'\n\nconst SELF_CLOSING = [\n  'base',\n  'br',\n  'hr',\n  'img',\n  'input',\n  'link',\n  'meta',\n  'source',\n  'wbr',\n]\n\nexport type ViewFunction = (\n  state: Record<string, any>,\n) => NodeContent[] | NodeContent\n\nconst MATCH_CAPITALS = /[A-Z]+(?![a-z])|[A-Z]/g\nconst HYPHENATE = (\n  part: string,\n  offset: number,\n) => (offset ? '-' : '') + part\n\nconst renderAttributes = (\n  attributes?: NodeAttributes,\n): string => {\n  let rendered = ''\n  if (attributes) {\n    for (const name in attributes) {\n      let value = attributes[name]\n      if (value !== null && value !== undefined) {\n        const type = typeof (value)\n\n        // Ensure it is of type string.\n        if (type === 'boolean') {\n          value = value ? 'true' : 'false'\n        } else if (type !== 'string') {\n          value = value.toString()\n        }\n\n        if (name === 'class') {\n          if (typeof (value) === 'object') {\n            if (Array.isArray(value)) {\n              value = value.join(' ')\n            } else {\n              let classNames: string = ''\n              for (const className in value) {\n                if (value[className]) {\n                  classNames += ' ' + className\n                }\n              }\n              value = classNames\n            }\n          }\n        } else if (name === 'style') {\n          if (typeof (value) === 'object') {\n            if (Array.isArray(value)) {\n              value = value.join(';')\n            } else {\n              let styles: string = ''\n              for (let styleProperty in value) {\n                let styleValue = value[styleProperty]\n\n                // Convert to kebab case.\n                styleProperty = styleProperty\n                  .replace(MATCH_CAPITALS, HYPHENATE)\n                  .toLowerCase()\n\n                if (Array.isArray(styleValue)) {\n                  styles += ';' + styleProperty + ':' + styleValue.join(' ')\n                } else if (value) {\n                  styles += ';' + styleProperty + ':' + value\n                }\n              }\n              value = styles\n            }\n          }\n        }\n\n        rendered += ' ' + name + '=\"' + (value as string) + '\"'\n      }\n    }\n  }\n  return rendered\n}\n\nconst renderElements = (\n  abstracts?: NodeContent[],\n): string => {\n  let rendered = ''\n  if (abstracts) {\n    for (const abstract of abstracts) {\n      if (abstract) {\n        if ((abstract as NodeAbstract).t) {\n          rendered += '<' + (abstract as NodeAbstract).t.toLocaleLowerCase() + renderAttributes((abstract as NodeAbstract).a)\n          if (SELF_CLOSING.includes((abstract as NodeAbstract).t)) {\n            rendered += '/>'\n          } else {\n            rendered += '>'\n            if ((abstract as NodeAbstract).c) {\n              rendered += renderElements((abstract as NodeAbstract).c)\n            }\n            rendered += '</' + (abstract as NodeAbstract).t.toLocaleLowerCase() + '>'\n          }\n        } else {\n          rendered += ' ' + (\n            (abstract as TextAbstract).c ? (abstract as TextAbstract).c : (abstract as string)\n          ) + ' '\n        }\n      }\n    }\n  }\n  return rendered\n}\n\nexport const stringifyPatch = (\n  abstractTree?: NodeContent[] | NodeContent,\n): [string, NodeContent[]] => {\n  abstractTree = arrayify(abstractTree ?? [])\n  return [\n    renderElements(\n      abstractTree,\n    ),\n    abstractTree,\n  ]\n}\n\nexport const stringify = (\n  renderView: ViewFunction,\n  initialState?: Record<string, any>,\n): [string, NodeContent[]] => {\n  if (!initialState) {\n    initialState = {}\n  }\n\n  const renderElements = (\n    abstracts?: NodeContent[],\n  ): string => {\n    let rendered = ''\n    if (abstracts) {\n      for (const abstract of abstracts) {\n        if (abstract) {\n          if ((abstract as MemoAbstract).m) {\n            rendered += renderElements(\n              arrayify(\n                (abstract as MemoAbstract).r(\n                  initialState,\n                  (abstract as MemoAbstract).m,\n                )\n              )\n            )\n          } else if ((abstract as NodeAbstract).t) {\n            rendered += '<' + (abstract as NodeAbstract).t.toLocaleLowerCase() + renderAttributes((abstract as NodeAbstract).a)\n            if (SELF_CLOSING.includes((abstract as NodeAbstract).t)) {\n              rendered += '/>'\n            } else {\n              rendered += '>'\n              if ((abstract as NodeAbstract).c) {\n                rendered += renderElements((abstract as NodeAbstract).c)\n              }\n              rendered += '</' + (abstract as NodeAbstract).t.toLocaleLowerCase() + '>'\n            }\n          } else {\n            rendered += ' ' + (\n              (abstract as TextAbstract).c ? (abstract as TextAbstract).c : (abstract as string)\n            ) + ' '\n          }\n        }\n      }\n    }\n    return rendered\n  }\n\n  const abstractTree = arrayify(\n    renderView(initialState),\n  )\n  return [\n    renderElements(\n      abstractTree,\n    ),\n    abstractTree,\n  ]\n}\n\nconst customStringify = (\n  data: Record<string, any>,\n): string => {\n  if (\n    typeof data === 'number'\n    || typeof data === 'boolean'\n  ) {\n    return String(data)\n  }\n\n  if (typeof data === 'string') {\n    // Escape double quotes\n    return `\"${(data as string).replace(/\"/g, '\\\\\"')}\"`\n  }\n\n  if (Array.isArray(data)) {\n    return `[${data.map(item => customStringify(item)).join(',')}]`;\n  }\n\n  if (typeof data === 'object') {\n    const keys = Object.keys(data)\n      .filter((key: string) => !key.startsWith('_'))\n    const objectContent: string = keys\n      .map((key: string) => `\"${key}\":${customStringify(data[key])}`)\n      .join(',')\n    return `{${objectContent}}`\n  }\n\n  // For any unsupported types (like functions or undefined).\n  return 'null'\n}\n\nexport const stringifyPatchFull = (\n  abstracts?: NodeContent[],\n): [string, string] => {\n  const [\n    rendered,\n    abstractTree,\n  ] = stringifyPatch(\n    abstracts,\n  )\n\n  return [\n    rendered,\n    customStringify(abstractTree),\n  ]\n}\n\nexport const stringifyFull = (\n  renderView: ViewFunction,\n  initialState?: Record<string, any>,\n): [string, string, string] => {\n  if (!initialState) {\n    initialState = {}\n  }\n\n  const [\n    rendered,\n    abstractTree,\n  ] = stringify(\n    renderView,\n    initialState\n  )\n\n  return [\n    rendered,\n    customStringify(abstractTree),\n    JSON.stringify(initialState)\n  ]\n}\n", "import { iife } from '../../../.scripts/iife.js'\n\nimport { conditional } from '@doars/staark-common/src/conditional.js'\nimport { factory } from '@doars/staark-common/src/factory.js'\nimport { fctory } from '@doars/staark-common/src/fctory.js'\nimport { match } from '@doars/staark-common/src/match.js'\nimport { memo } from '@doars/staark-common/src/memo.js'\nimport { nde } from '@doars/staark-common/src/nde.js'\nimport { node } from '@doars/staark-common/src/node.js'\nimport { text } from '@doars/staark-common/src/text.js'\n\nimport {\n  stringify,\n  stringifyFull,\n  stringifyPatch,\n  stringifyPatchFull,\n} from './library/stringify.js'\n\niife([\n  'staark',\n], {\n  conditional,\n  factory,\n  fctory,\n  match,\n  memo,\n  nde,\n  node,\n  stringify,\n  stringifyFull,\n  stringifyPatch,\n  stringifyPatchFull,\n  text,\n})\n"],
  "mappings": "mBAAO,IAAMA,EAAO,SAClBC,EACAC,EACA,CACA,IAAIC,EAA+B,OACnC,QAASC,EAAI,EAAGA,EAAIH,EAAK,OAAS,EAAGG,KAEjC,OAAQD,EAAQF,EAAKG,CAAC,CAAC,GAAO,UAC3B,CAAC,MAAM,QAAQD,EAAQF,EAAKG,CAAC,CAAC,CAAC,KAElCD,EAAQF,EAAKG,CAAC,CAAC,EAAI,CAAC,GAEtBD,EAAUA,EAAQF,EAAKG,CAAC,CAAC,EAE3BD,EAAQF,EAAKA,EAAK,OAAS,CAAC,CAAC,EAAIC,CACnC,ECfO,IAAMG,EAAW,SACtBC,EACK,CACL,OAAI,MAAM,QAAQA,CAAI,EACbA,EAEF,CACLA,CACF,CACF,ECNO,IAAMC,EAAc,CACzBC,EACAC,EACAC,IAEIF,EACKG,EAASF,CAAO,EAElBE,EAASD,GAAW,CAAC,CAAC,ECXxB,IAAME,EAAS,OAAO,EC2CtB,IAAMC,EAAO,CAClBC,EACAC,EACAC,MAGE,OAAQD,GAA0B,UAC9BA,EAAsC,IAAME,GAC7C,MAAM,QAAQF,CAAoB,KAErCC,EAAWD,EACXA,EAAuB,QAGlB,CACL,EAAGE,EACH,EAAGF,EACH,EACEC,EACI,MAAM,QAAQA,CAAQ,EACpBA,EACA,CAACA,CAAQ,EACX,CAAC,EAEP,EAAGF,EAAK,YAAY,CACtB,GCpDK,IAAMI,EAAU,IAAI,MAAM,CAAC,EAAG,CACnC,IAAK,CACHC,EACAC,IACY,CACZ,GAAID,EAAOC,CAAI,EACb,OAAOD,EAAOC,CAAI,EAGpB,IAAMC,GACJD,EAAK,CAAC,EAAIA,EAAK,UAAU,CAAC,EACvB,QACC,WACAE,GAAW,IAAMA,CACnB,GACF,YAAY,EAEd,OAAOH,EAAOC,CAAI,EAAI,CACpBG,EACAC,IACiBC,EACjBJ,EACAE,EACAC,CACF,CACF,CACF,CAAC,EC1CD,IAAME,EAAgB,IAChBC,EAAe,IACfC,EAAM,IACNC,EAAQ,IACRC,EAAO,IACPC,EAAe,IACfC,EAAe,IASd,IAAMC,EACXC,GACkC,CAClC,IAAMC,EAAiBD,EAAS,OAC5BE,EAAY,EAEZC,EAAe,GACbC,EAAkC,CAAC,EAErCC,EAAiB,GACjBC,EAAwB,GACxBC,EAAwB,EACtBC,EAAa,IAAM,CACvB,GAAIH,EAAQ,CACV,OAAQE,EAAW,CACjB,IAAK,GACHH,EAAWC,CAAM,EAAIC,IAAW,GAAO,GAAOA,EAC9CA,EAAS,GACT,MAEF,IAAK,GACH,GAAI,CAACF,EAAW,MAAO,CACrBA,EAAW,MAAQC,EACnB,KACF,CACAD,EAAW,OAAS,IAAMC,EAC1B,MAEF,IAAK,GACHD,EAAW,GAAKC,EAChB,MAEF,IAAK,GACHF,EAAOE,EACP,KACJ,CACAA,EAAS,EACX,CACF,EAEII,EAEAC,EACEC,EAAiB,IACZ,CAGT,IAFAD,EAAwB,EAEjBR,EAAID,GAAQ,CAGjB,GAFAQ,EAAYT,EAASE,CAAC,EACtBA,IACIO,IAAcG,EAAO,CAEvBN,EAAS,GACTG,EAAYT,EAASE,CAAC,EACtB,IAAMW,EAAmBJ,IAAcK,EACjCC,EAAmBN,IAAcO,EAMvC,KALIH,GAAoBE,KACtBT,GAAUG,EACVP,KAGKA,EAAID,GAAQ,CAEjB,GADAQ,EAAYT,EAASE,CAAC,EAEnBW,GAAoBJ,IAAcK,GAClCC,GAAoBN,IAAcO,EACnC,CACAV,GAAUG,EACVP,IACA,KACF,SACE,CAACW,GACD,CAACE,GACDN,IAAcQ,EAEd,MAEFX,GAAUG,EACVP,GACF,CAiBA,KAbII,EAAO,CAAC,IAAMQ,GACdR,EAAOA,EAAO,OAAS,CAAC,IAAMQ,GAG9BR,EAAO,CAAC,IAAMU,GACdV,EAAOA,EAAO,OAAS,CAAC,IAAMU,KAGhCV,EAASA,EAAO,UAAU,EAAGA,EAAO,OAAS,CAAC,GAKzCJ,EAAID,IACTQ,EAAYT,EAASE,CAAC,EACtBA,IACIO,IAAcQ,IAAlB,CAIF,KACF,SAAWR,IAAcS,EAAc,CACrCR,IACA,QACF,SAAWD,IAAcQ,EAAe,CAEtC,GADAP,IACIA,EAAwB,EAC1B,MAEF,QACF,CAEAL,GAAUI,CACZ,CACAD,EAAW,CACb,EAEA,KAAON,EAAID,GAAQ,CAIjB,GAHAQ,EAAYT,EAASE,CAAC,EACtBA,IAEIO,IAAcU,EAAM,CACtBX,EAAW,EACXD,EAAY,EACZ,QACF,SAAWE,IAAcW,EAAK,CAC5BZ,EAAW,EACXD,EAAY,EACZ,QACF,SAAWE,IAAcS,EAAc,CACrCV,EAAW,EACXD,EAAY,EACZI,EAAe,EACf,QACF,CAEAN,GAAUI,CACZ,CAEA,MAAO,CAACN,EAAMC,CAAU,CAC1B,EC1IO,IAAMiB,EAAS,IAAI,MAAM,CAAC,EAAG,CAClC,IAAK,CACHC,EACAC,IACW,CACX,GAAID,EAAOC,CAAI,EACb,OAAOD,EAAOC,CAAI,EAGpB,IAAMC,GACJD,EAAK,CAAC,EAAIA,EAAK,UAAU,CAAC,EACvB,QACC,WACAE,GAAW,IAAMA,CACnB,GACF,YAAY,EAEd,OAAOH,EAAOC,CAAI,EAAI,CACpBG,EACAC,IACiB,CACjB,IAAIC,EACJ,GAAIF,EAAU,CACZ,GAAM,CAACG,EAAGC,CAAW,EAAIC,EAAoBL,CAAQ,EACrDE,EAAaE,CACf,CACA,OAAOE,EACLR,EACAI,EACAD,CACF,CACF,CACF,CACF,CAAC,EClDM,IAAMM,EAAQ,CACnBC,EACAC,IAGEA,GACID,KAAWC,GACZA,EAAOD,CAAO,EAEVE,EAASD,EAAOD,CAAO,CAAC,EAE1B,CAAC,ECIH,IAAMG,EAAO,CAClBC,EACAC,KACI,CACJ,EAAGC,EACH,EAAGF,EACH,EAAGC,CACL,GCdO,IAAME,EAAM,CACjBC,EACAC,IACiB,CACjB,GAAM,CAACC,EAAMC,CAAU,EAAIC,EAAoBJ,CAAQ,EACvD,MAAO,CACL,EAAGK,EACH,EAAGF,EACH,EACEF,EACI,MAAM,QAAQA,CAAQ,EACpBA,EACA,CAACA,CAAQ,EACX,CAAC,EAEP,EAAGC,EAAK,YAAY,CACtB,CACF,EClBO,IAAMI,EACXC,IACkB,CAClB,EAAGC,EACH,EACE,MAAM,QAAQD,CAAQ,EAClBA,EAAS,KAAK,EAAE,EACf,GAAKA,CAEd,GCJA,IAAME,EAAe,CACnB,OACA,KACA,KACA,MACA,QACA,OACA,OACA,SACA,KACF,EAMMC,EAAiB,yBACjBC,EAAY,CAChBC,EACAC,KACIA,EAAS,IAAM,IAAMD,EAErBE,EACJC,GACW,CACX,IAAIC,EAAW,GACf,GAAID,EACF,QAAWE,KAAQF,EAAY,CAC7B,IAAIG,EAAQH,EAAWE,CAAI,EAC3B,GAAIC,GAAU,KAA6B,CACzC,IAAMC,EAAO,OAAQD,EASrB,GANIC,IAAS,UACXD,EAAQA,EAAQ,OAAS,QAChBC,IAAS,WAClBD,EAAQA,EAAM,SAAS,GAGrBD,IAAS,SACX,GAAI,OAAQC,GAAW,SACrB,GAAI,MAAM,QAAQA,CAAK,EACrBA,EAAQA,EAAM,KAAK,GAAG,MACjB,CACL,IAAIE,EAAqB,GACzB,QAAWC,KAAaH,EAClBA,EAAMG,CAAS,IACjBD,GAAc,IAAMC,GAGxBH,EAAQE,CACV,UAEOH,IAAS,SACd,OAAQC,GAAW,SACrB,GAAI,MAAM,QAAQA,CAAK,EACrBA,EAAQA,EAAM,KAAK,GAAG,MACjB,CACL,IAAII,EAAiB,GACrB,QAASC,KAAiBL,EAAO,CAC/B,IAAIM,EAAaN,EAAMK,CAAa,EAGpCA,EAAgBA,EACb,QAAQb,EAAgBC,CAAS,EACjC,YAAY,EAEX,MAAM,QAAQa,CAAU,EAC1BF,GAAU,IAAMC,EAAgB,IAAMC,EAAW,KAAK,GAAG,EAChDN,IACTI,GAAU,IAAMC,EAAgB,IAAML,EAE1C,CACAA,EAAQI,CACV,CAIJN,GAAY,IAAMC,EAAO,KAAQC,EAAmB,GACtD,CACF,CAEF,OAAOF,CACT,EAEMS,EACJC,GACW,CACX,IAAIV,EAAW,GACf,GAAIU,EACF,QAAWC,KAAYD,EACjBC,IACGA,EAA0B,GAC7BX,GAAY,IAAOW,EAA0B,EAAE,kBAAkB,EAAIb,EAAkBa,EAA0B,CAAC,EAC9GlB,EAAa,SAAUkB,EAA0B,CAAC,EACpDX,GAAY,MAEZA,GAAY,IACPW,EAA0B,IAC7BX,GAAYS,EAAgBE,EAA0B,CAAC,GAEzDX,GAAY,KAAQW,EAA0B,EAAE,kBAAkB,EAAI,MAGxEX,GAAY,KACTW,EAA0B,EAAKA,EAA0B,EAAKA,GAC7D,KAKZ,OAAOX,CACT,EAEaY,EACXC,IAEAA,EAAeC,EAASD,GAAgB,CAAC,CAAC,EACnC,CACLJ,EACEI,CACF,EACAA,CACF,GAGWE,EAAY,CACvBC,EACAC,IAC4B,CACvBA,IACHA,EAAe,CAAC,GAGlB,IAAMR,EACJC,GACW,CACX,IAAIV,EAAW,GACf,GAAIU,EACF,QAAWC,KAAYD,EACjBC,IACGA,EAA0B,EAC7BX,GAAYS,EACVK,EACGH,EAA0B,EACzBM,EACCN,EAA0B,CAC7B,CACF,CACF,EACUA,EAA0B,GACpCX,GAAY,IAAOW,EAA0B,EAAE,kBAAkB,EAAIb,EAAkBa,EAA0B,CAAC,EAC9GlB,EAAa,SAAUkB,EAA0B,CAAC,EACpDX,GAAY,MAEZA,GAAY,IACPW,EAA0B,IAC7BX,GAAYS,EAAgBE,EAA0B,CAAC,GAEzDX,GAAY,KAAQW,EAA0B,EAAE,kBAAkB,EAAI,MAGxEX,GAAY,KACTW,EAA0B,EAAKA,EAA0B,EAAKA,GAC7D,KAKZ,OAAOX,CACT,EAEMa,EAAeC,EACnBE,EAAWC,CAAY,CACzB,EACA,MAAO,CACLR,EACEI,CACF,EACAA,CACF,CACF,EAEMK,EACJC,GAGE,OAAOA,GAAS,UACb,OAAOA,GAAS,UAEZ,OAAOA,CAAI,EAGhB,OAAOA,GAAS,SAEX,IAAKA,EAAgB,QAAQ,KAAM,KAAK,CAAC,IAG9C,MAAM,QAAQA,CAAI,EACb,IAAIA,EAAK,IAAIC,GAAQF,EAAgBE,CAAI,CAAC,EAAE,KAAK,GAAG,CAAC,IAG1D,OAAOD,GAAS,SAMX,IALM,OAAO,KAAKA,CAAI,EAC1B,OAAQE,GAAgB,CAACA,EAAI,WAAW,GAAG,CAAC,EAE5C,IAAKA,GAAgB,IAAIA,CAAG,KAAKH,EAAgBC,EAAKE,CAAG,CAAC,CAAC,EAAE,EAC7D,KAAK,GAAG,CACa,IAInB,OAGIC,EACXZ,GACqB,CACrB,GAAM,CACJV,EACAa,CACF,EAAID,EACFF,CACF,EAEA,MAAO,CACLV,EACAkB,EAAgBL,CAAY,CAC9B,CACF,EAEaU,EAAgB,CAC3BP,EACAC,IAC6B,CACxBA,IACHA,EAAe,CAAC,GAGlB,GAAM,CACJjB,EACAa,CACF,EAAIE,EACFC,EACAC,CACF,EAEA,MAAO,CACLjB,EACAkB,EAAgBL,CAAY,EAC5B,KAAK,UAAUI,CAAY,CAC7B,CACF,ECzPAO,EAAK,CACH,QACF,EAAG,CACD,YAAAC,EACA,QAAAC,EACA,OAAAC,EACA,MAAAC,EACA,KAAAC,EACA,IAAAC,EACA,KAAAC,EACA,UAAAC,EACA,cAAAC,EACA,eAAAC,EACA,mBAAAC,EACA,KAAAC,CACF,CAAC",
  "names": ["iife", "path", "data", "subject", "i", "arrayify", "data", "conditional", "condition", "onTruth", "onFalse", "arrayify", "marker", "node", "type", "attributesOrContents", "contents", "marker", "factory", "target", "type", "typeConverted", "capital", "attributesOrContents", "contents", "node", "BRACKET_CLOSE", "BRACKET_OPEN", "DOT", "EQUAL", "HASH", "QUOTE_SINGLE", "QUOTE_DOUBLE", "selectorToTokenizer", "selector", "length", "i", "type", "attributes", "tokenA", "tokenB", "tokenType", "storeToken", "character", "attributeBracketCount", "parseAttribute", "EQUAL", "endOnDoubleQuote", "QUOTE_DOUBLE", "endOnSingleQuote", "QUOTE_SINGLE", "BRACKET_CLOSE", "BRACKET_OPEN", "HASH", "DOT", "fctory", "target", "type", "typeConverted", "capital", "selector", "contents", "attributes", "_", "_attributes", "selectorToTokenizer", "node", "match", "pattern", "lookup", "arrayify", "memo", "render", "memory", "marker", "nde", "selector", "contents", "type", "attributes", "selectorToTokenizer", "marker", "text", "contents", "marker", "SELF_CLOSING", "MATCH_CAPITALS", "HYPHENATE", "part", "offset", "renderAttributes", "attributes", "rendered", "name", "value", "type", "classNames", "className", "styles", "styleProperty", "styleValue", "renderElements", "abstracts", "abstract", "stringifyPatch", "abstractTree", "arrayify", "stringify", "renderView", "initialState", "customStringify", "data", "item", "key", "stringifyPatchFull", "stringifyFull", "iife", "conditional", "factory", "fctory", "match", "memo", "nde", "node", "stringify", "stringifyFull", "stringifyPatch", "stringifyPatchFull", "text"]
}
