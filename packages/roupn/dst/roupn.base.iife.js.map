{
  "version": 3,
  "sources": ["../../../helpers/iife.js", "../src/library/message-types.js", "../src/utilities/encoding-client.js", "../src/utilities/event.js", "../src/utilities/protocol.js", "../src/utilities/time.js", "../src/utilities/code.js", "../src/library/key-generator.js", "../src/library/payload-keys.js", "../src/library/client-connector.js", "../src/index.base.iife.js"],
  "sourcesContent": ["/**\n * Assigns data to window at the given path. If an object at the path already exists it will merge them instead of replacing it.\n * @param {Array<string>} path Path to assign the values to.\n * @param {any} data Data to assign to the window.\n */\nexport const iife = (\n  path,\n  data,\n) => {\n  let subject = window\n  for (let i = 0; i < path.length - 1; i++) {\n    if (\n      typeof (subject[path[i]]) !== 'object'\n      || !Array.isArray(subject[path[i]])\n    ) {\n      subject[path[i]] = {}\n    }\n    subject = subject[path[i]]\n  }\n  subject[path[path.length - 1]] = data\n}\n", "export const CONNECTION_CONNECTED = 'CONNECTED'\nexport const CONNECTION_CONNECTING = 'CONNECTING'\nexport const CONNECTION_DISCONNECTED = 'DISCONNECTED'\nexport const CONNECTION_DISCONNECTING = 'DISCONNECTING'\nexport const CONNECTION_PENDING_VERIFICATION = 'PENDING_VERIFICATION'\n\nexport const ERROR = '_ER'\nexport const MESSAGE = '_MS'\n\nexport const KEY_EXCHANGE_ACCEPT = '_KA'\nexport const KEY_EXCHANGE_OFFER = '_KO'\n\nexport const ROOM_CLOSED = '_RC'\nexport const ROOM_JOINED = '_RJ'\nexport const ROOM_LEFT = '_RL'\nexport const ROOM_REMOVED = '_RR'\n\nexport const STATE_UPDATE = '_SU'\nexport const STATE_SYNCH = '_SS'\n\nexport const USER_JOINED = '_UJ'\nexport const USER_KICK = '_UK'\nexport const USER_LEFT = '_UL'\nexport const USER_VERIFIED = '_UV'\n", "export const base64ToBuffer = (\n  base64,\n) => {\n  const binary = atob(base64)\n  return Uint8Array.from(\n    binary,\n    character => character.charCodeAt(0),\n  ).buffer\n}\n\nexport const base64ToString = (\n  base64,\n) => {\n  const binary = atob(base64)\n  const bytes = Uint8Array.from(\n    binary,\n    character => character.charCodeAt(0)\n  )\n  return new TextDecoder().decode(bytes)\n}\n\nexport const stringToBase64 = (\n  string,\n) => {\n  const bytes = new TextEncoder().encode(string)\n\n  if (bytes.length < 65536) {\n    return btoa(\n      String.fromCharCode(...bytes),\n    )\n  }\n\n  let binary = ''\n  const chunkSize = 65536\n  for (let i = 0; i < bytes.length; i += chunkSize) {\n    const chunk = bytes.subarray(i, i + chunkSize)\n    binary += String.fromCharCode(...chunk)\n  }\n  return btoa(binary)\n}\n\nexport const bufferToBase64 = (\n  buffer,\n) => {\n  const bytes = new Uint8Array(buffer)\n\n  if (bytes.length < 65536) {\n    return btoa(\n      String.fromCharCode(...bytes),\n    )\n  }\n\n  let binary = ''\n  const chunkSize = 65536\n  for (let i = 0; i < bytes.length; i += chunkSize) {\n    const chunk = bytes.subarray(i, i + chunkSize)\n    binary += String.fromCharCode(...chunk)\n  }\n  return btoa(binary)\n}\n", "/**\n * Type definition for event listener options.\n * @typedef {Object} EventListenerOptions\n * @property {boolean} [once] - If true, the listener will be removed after the first call.\n */\n\n/**\n * Type definition for an event listener callback.\n * @typedef {(data: any) => void} EventListenerCallback\n */\n\n/**\n * Type definition for the event object returned by createEvent.\n * @typedef {Object} Event\n * @property {(callback: EventListenerCallback, options?: EventListenerOptions) => void} addListener\n * @property {(callback: EventListenerCallback) => void} removeListener\n * @property {(data: any) => void} dispatch\n */\n\n/**\n * Creates a custom event system with add, remove, and dispatch capabilities.\n *\n * @returns {Event} An event object with methods to manage listeners.\n */\nexport const createEvent = (\n) => {\n  /** @type {Map<EventListenerCallback, EventListenerOptions | undefined>} */\n  const listeners = new Map()\n\n  return {\n    /**\n     * Adds a listener callback for the event.\n     * @param {EventListenerCallback} callback - The listener function to add.\n     * @param {EventListenerOptions} [options] - Optional options for the listener (e.g., { once: true }).\n     */\n    addListener: (\n      callback,\n      options,\n    ) => {\n      if (!listeners.has(callback)) {\n        listeners.set(callback, options)\n      }\n    },\n\n    /**\n     * Removes a listener callback from the event.\n     * @param {EventListenerCallback} callback - The listener function to remove.\n     */\n    removeListener: (\n      callback,\n    ) => {\n      listeners.delete(callback)\n    },\n\n    /**\n     * Dispatches the event to all registered listeners.\n     * @param {any} data - Data to pass to each listener callback.\n     */\n    dispatch: (\n      data,\n    ) => {\n      for (const [listener, options] of listeners.entries()) {\n        listener(data)\n        if (\n          options\n          && options.once\n        ) {\n          listeners.delete(listener)\n        }\n      }\n    },\n  }\n}\n", "const DELIMITER = '|'\nconst INFIX = ':'\n\nexport const encode = (\n  parts,\n  stringToBase64,\n) => {\n  const segments = []\n  for (const key in parts) {\n    const value = parts[key]\n    if (\n      value !== null\n      && value !== undefined\n    ) {\n      segments.push(key + INFIX + stringToBase64(\n        String(value)),\n      )\n    }\n  }\n  return segments.join(DELIMITER)\n}\n\nexport const decode = (\n  message,\n  base64ToString,\n) => {\n  const parts = {}\n  const segments = message.split(DELIMITER)\n  for (const segment of segments) {\n    const index = segment.indexOf(INFIX)\n    if (index > 0) {\n      const key = segment.substring(0, index)\n      const value = segment.substring(index + 1)\n      parts[key] = base64ToString(value)\n    }\n  }\n  return parts\n}\n", "\n/**\n * Calculates time synchronization values based on provided server and sender times.\n *\n * @param {string} serverTime - The date and time the server broadcasted the data.\n * @param {string} senderTime - The date and time the sender send the data.\n * @returns {{\n *   delay: number,\n *   offset: number,\n *   adjusted: number,\n * }} An object containing the calculated delay, offset, and adjusted time.\n */\nexport const calculateTime = (\n  serverTime,\n  senderTime,\n) => {\n  const receiverTime = Date.now()\n\n  if (!serverTime) {\n    return {\n      delay: 0,\n      offset: 0,\n      adjusted: receiverTime,\n    }\n  }\n\n  if (!senderTime) {\n    const offset = serverTime - receiverTime\n    return {\n      delay: 0,\n      offset: offset,\n      adjusted: (\n        receiverTime\n        + offset\n      ),\n    }\n  }\n\n  const delay = receiverTime - senderTime\n  const offset = (\n    (serverTime - senderTime)\n    + (serverTime - receiverTime)\n  ) / 2\n  return {\n    delay: delay,\n    offset: offset,\n    adjusted: (\n      receiverTime\n      - delay\n      + offset\n    ),\n  }\n}\n", "/**\n * A string containing the allowed characters for generating identifiers.\n * @type {string}\n */\nexport const ALPHANUMERIC_CHARACTERS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n\n/**\n * A string containing the allowed characters for generating codes. Excludes easily confused characters such as 'I', 'O', 'L', '1', and '0'.\n * @type {string}\n */\nexport const IDENTIFIABLE_CHARACTERS = 'ABCDEFGHKMNPQRSTUVWXYZ23456789'\n\n/**\n * Generates a random code string of the specified length.\n *\n * @param {number} [length=6] - The length of the code to generate.\n * @param {string} [characters='ABCDEFGHKMNPQRSTUVWXYZ23456789'] - The characters the code can consist of.\n * @returns {string} A randomly generated code.\n */\nexport const generateCode = (\n  length = 24,\n  characters = ALPHANUMERIC_CHARACTERS,\n) => {\n  let code = ''\n  for (let i = 0; i < length; i++) {\n    code += characters.charAt(\n      Math.floor(\n        Math.random()\n        * characters.length\n      ),\n    )\n  }\n  return code\n}\n", "export const DIFFIE_HELLMAN_ALGORITHM = 'ECDH'\nexport const DIFFIE_HELLMAN_CURVE = 'P-256'\nexport const DIFFIE_HELLMAN_EXPORT_FORMAT = 'raw'\nexport const HASH_ALGORITHM = 'SHA-256'\nexport const PUBLIC_KEY_EXPORT_FORMAT = 'spki'\nexport const SHARED_ENCRYPTION_ALGORITHM = 'AES-GCM'\nexport const SHARED_KEY_LENGTH = 256\nexport const USER_ENCRYPTION_ALGORITHM = 'RSA-OAEP'\nexport const USER_SIGNATURE_ALGORITHM = 'RSASSA-PKCS1-v1_5'\n\n// Values are inlined because of the string generated by the toString call will not have the same context. It is not written in a string in order to allow the build tool to minify and post-process the function's contents.\n\nexport const USER_KEY_GENERATOR = 'self.addEventListener(\\'message\\',' + ((\n) => {\n  Promise.all([\n    crypto.subtle.generateKey({\n      name: 'RSA-OAEP',\n      modulusLength: 4096,\n      publicExponent: new Uint8Array([1, 0, 1]),\n      hash: { name: 'SHA-256', },\n    }, true, ['encrypt', 'decrypt',]),\n    crypto.subtle.generateKey({\n      name: 'RSASSA-PKCS1-v1_5',\n      modulusLength: 4096,\n      publicExponent: new Uint8Array([1, 0, 1]),\n      hash: { name: 'SHA-256', },\n    }, true, ['sign', 'verify',]),\n    crypto.subtle.generateKey({\n      name: 'ECDH',\n      namedCurve: 'P-256',\n    }, true, ['deriveKey',]),\n  ])\n    .then(([\n      myEncryptKeys,\n      mySignKeys,\n      myExchangeKeys,\n    ]) => {\n      Promise.all([\n        crypto.subtle.exportKey(\n          'spki',\n          myEncryptKeys.publicKey,\n        ),\n        crypto.subtle.exportKey(\n          'spki',\n          mySignKeys.publicKey,\n        ),\n      ])\n        .then(([\n          myPublicEncryptKey,\n          myPublicSignKey,\n        ]) => {\n          self.postMessage({\n            success: true,\n            myEncryptKeys,\n            mySignKeys,\n            myExchangeKeys,\n            myPublicEncryptKey,\n            myPublicSignKey,\n          })\n        })\n        .catch((error) => {\n          self.postMessage({\n            success: false,\n            error: error.message,\n          })\n        })\n    })\n    .catch((error) => {\n      self.postMessage({\n        success: false,\n        error: error.message,\n      })\n    })\n}).toString() + ')'\n\nexport const SHARED_KEY_GENERATOR = 'self.addEventListener(\\'message\\',' + ((\n) => {\n  crypto.subtle.generateKey({\n    length: 256,\n    name: 'AES-GCM',\n  }, true, ['encrypt', 'decrypt'])\n    .then(sharedKey => {\n      self.postMessage({\n        success: true,\n        sharedKey,\n      })\n    })\n    .catch(error => {\n      self.postMessage({\n        success: false,\n        error: error.message,\n      })\n    })\n}).toString() + ')'\n", "export const SERVER_PAYLOAD = 'S'\nexport const SERVER_TIME = 'T'\n\nexport const SHARED_ENCRYPTION_PAYLOAD = 'E'\nexport const SHARED_ENCRYPTION_IV = 'I'\n\nexport const USER = 'U'\nexport const USER_DIRECT_PAYLOAD = 'D'\nexport const USER_ENCRYPTION_IV = 'V'\nexport const USER_ENCRYPTION_KEY = 'K'\nexport const USER_ENCRYPTION_PAYLOAD = 'P'\nexport const USER_ENCRYPTION_SIGNATURE = 'G'\n", "import {\n  CONNECTION_CONNECTED,\n  CONNECTION_CONNECTING,\n  CONNECTION_DISCONNECTED,\n  CONNECTION_DISCONNECTING,\n  CONNECTION_PENDING_VERIFICATION,\n\n  KEY_EXCHANGE_ACCEPT,\n  KEY_EXCHANGE_OFFER,\n  ROOM_CLOSED,\n  ROOM_JOINED,\n  USER_JOINED,\n  USER_KICK,\n  USER_LEFT,\n  USER_VERIFIED,\n} from './message-types.js'\n\nimport {\n  base64ToBuffer,\n  base64ToString,\n  stringToBase64,\n  bufferToBase64,\n} from '../utilities/encoding-client.js'\nimport {\n  createEvent,\n} from '../utilities/event.js'\nimport {\n  decode,\n  encode,\n} from '../utilities/protocol.js'\nimport {\n  calculateTime,\n} from '../utilities/time.js'\nimport {\n  IDENTIFIABLE_CHARACTERS,\n} from '../utilities/code.js'\nimport {\n  DIFFIE_HELLMAN_ALGORITHM,\n  DIFFIE_HELLMAN_CURVE,\n  DIFFIE_HELLMAN_EXPORT_FORMAT,\n  HASH_ALGORITHM,\n  PUBLIC_KEY_EXPORT_FORMAT,\n  SHARED_ENCRYPTION_ALGORITHM,\n  SHARED_KEY_LENGTH,\n  USER_ENCRYPTION_ALGORITHM,\n  USER_SIGNATURE_ALGORITHM,\n\n  SHARED_KEY_GENERATOR,\n  USER_KEY_GENERATOR,\n} from './key-generator.js'\nimport {\n  SERVER_PAYLOAD,\n  SERVER_TIME,\n\n  SHARED_ENCRYPTION_IV,\n  SHARED_ENCRYPTION_PAYLOAD,\n\n  USER,\n  USER_DIRECT_PAYLOAD,\n\n  USER_ENCRYPTION_IV,\n  USER_ENCRYPTION_KEY,\n  USER_ENCRYPTION_PAYLOAD,\n  USER_ENCRYPTION_SIGNATURE,\n} from './payload-keys.js'\n\n/**\n * @typedef {import('../utilities/event.js').Event} Event\n */\n\n/**\n * @typedef {Object} ConnectorOptions\n *\n * @property {string} [createRoomEndpoint='/create-room'] - HTTP endpoint for creating a room.\n * @property {string} [joinRoomEndpoint='/join-room'] - WebSocket endpoint for joining a room.\n *\n * @property {string} [contentType='application/json'] - Content-Type for HTTP requests.\n * @property {Function} [deserializeMessage=JSON.parse] - Function to deserialize incoming messages.\n * @property {Function} [serializeMessage=JSON.stringify] - Function to serialize outgoing messages.\n *\n * @property {string} [httpUrl='http://localhost:3000'] - Base HTTP URL for API requests.\n * @property {string} [wsUrl='http://localhost:3000'] - Base WebSocket URL for room connections.\n *\n * @property {number} [messageBufferMaxCount=50] - The maximum number of messages to store in the buffer.\n * @property {number} [messageBufferMaxDuration=60000] - The maximum duration in milliseconds to store a message in the buffer.\n *\n * @property {string} verificationCodeLength\n */\n\n/**\n * @typedef {Object} ConnectorAPI\n *\n * @property {Event} onConnection - Event for connection state change notifications.\n * @property {Event} onError - Event for error handling.\n * @property {Event} onMessage - Event for receiving messages.\n * @property {Event} onRoomJoin - Event for room join notifications.\n * @property {Event} onRoomLeave - Event for room leave notifications.\n * @property {Event} onUserJoin - Event for user join notifications.\n * @property {Event} onUserLeave - Event for user leave notifications.\n * @property {Event} onUserVerified - Event for user verified notifications.\n *\n * @property {Function} createRoom - Creates a new room and joins it.\n * @property {Function} closeRoom - Closes the room for all. Only allowed by the creator.\n * @property {Function} joinRoom - Joins an existing room.\n * @property {Function} leaveRoom - Leaves the current room.\n * @property {Function} messageRoom - Sends a message to the current room.\n *\n * @property {Function} kickUser - Removes a player's connection. Only allowed by the creator.\n */\n\n/**\n * Creates a connector for managing room-based WebSocket communication.\n *\n * @param {ConnectorOptions} [options={}] - Configuration options for the connector.\n * @returns {ConnectorAPI} Connector API with event handlers and room management methods.\n */\nexport const createClientConnector = (\n  options = {},\n) => {\n  const {\n    contentType = 'application/json',\n    deserializeMessage = JSON.parse,\n    serializeMessage = JSON.stringify,\n\n    createRoomEndpoint = '/create-room',\n    joinRoomEndpoint = '/join-room',\n\n    httpUrl = 'http://localhost:3000',\n    wsUrl = 'http://localhost:3000',\n\n    messageBufferMaxCount = 50,\n    messageBufferMaxDuration = 60 * 1000,\n  } = options\n\n  let _creatorId,\n    _generatedKeys,\n    _keyGenerationPromise,\n    _myId,\n    _myEncryptKeys,\n    _myExchangeKeys,\n    _myPublicEncryptKey,\n    _myPublicSignKey,\n    _mySignKeys,\n    _sharedKey,\n    _sharedMessagesBuffer = [],\n    _socket,\n    _roomCode,\n    _userDerivedKeys = new Map(),\n    _userEncryptKeys = new Map(),\n    _userSignKeys = new Map(),\n    _userVerification = new Map(),\n    _connectionState = CONNECTION_DISCONNECTED\n  const _generateMyKeys = (\n  ) => {\n    if (\n      !_generatedKeys\n      && !_keyGenerationPromise\n    ) {\n      _keyGenerationPromise = new Promise((\n        resolve,\n        reject,\n      ) => {\n        const worker = new Worker(\n          URL.createObjectURL(\n            new Blob([USER_KEY_GENERATOR,], {\n              type: 'text/javascript',\n            }),\n          ),\n        )\n\n        worker.addEventListener('message', (\n          event,\n        ) => {\n          if (event.data.success) {\n            _myEncryptKeys = event.data.myEncryptKeys\n            _mySignKeys = event.data.mySignKeys\n            _myExchangeKeys = event.data.myExchangeKeys\n            _myPublicEncryptKey = event.data.myPublicEncryptKey\n            _myPublicSignKey = event.data.myPublicSignKey\n\n            _generatedKeys = true\n            _keyGenerationPromise = null\n            resolve()\n          } else {\n            const error = new Error(event.data.error)\n            onError.dispatch({\n              error,\n            })\n            reject(error)\n          }\n          worker.terminate()\n        })\n\n        worker.addEventListener('error', (\n          error,\n        ) => {\n          onError.dispatch({\n            error,\n          })\n          reject(error)\n          worker.terminate()\n        })\n\n        worker.postMessage({\n          type: 'USER_KEYS',\n        })\n      })\n    }\n    return _keyGenerationPromise\n  }\n  // Start generating new keys.\n  _generateMyKeys()\n\n  const onError = createEvent()\n  const onMessage = createEvent()\n  const onRoomJoin = createEvent()\n  const onRoomLeave = createEvent()\n  const onUserJoin = createEvent()\n  const onUserLeave = createEvent()\n  const onUserVerified = createEvent()\n  const onUserVerificationCode = createEvent()\n  const onConnection = createEvent()\n\n  const _setConnectionState = (\n    state,\n  ) => {\n    if (_connectionState !== state) {\n      _connectionState = state\n      onConnection.dispatch({\n        state,\n      })\n    }\n  }\n\n  const _generateVerificationCode = async (\n    userId,\n  ) => {\n    const derivedKey = _userDerivedKeys.get(userId)\n    if (!derivedKey) {\n      return\n    }\n\n    _userVerification.set(\n      userId,\n      Array.from(\n        new Uint8Array(\n          await crypto.subtle.digest(\n            HASH_ALGORITHM,\n            new TextEncoder().encode(\n              _roomCode\n              + bufferToBase64(\n                await crypto.subtle.exportKey(\n                  'raw',\n                  derivedKey,\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    )\n\n    onUserVerificationCode.dispatch({\n      userId,\n      code: getVerificationCode(userId),\n    })\n  }\n\n  /**\n   * Closes the current socket connection and resets the socket reference. This function should be called when leaving a room to ensure that the socket connection is properly closed and the state is cleaned up.\n   */\n  const leaveRoom = (\n  ) => {\n    if (\n      _connectionState === CONNECTION_DISCONNECTED\n      || _connectionState === CONNECTION_DISCONNECTING\n    ) {\n      return\n    }\n    _setConnectionState(CONNECTION_DISCONNECTING)\n\n    if (_socket) {\n      _socket.close()\n    }\n\n    _creatorId = _generatedKeys = _keyGenerationPromise = _myId = _myEncryptKeys = _myExchangeKeys = _myPublicEncryptKey = _myPublicSignKey = _mySignKeys = _sharedKey = _sharedMessagesBuffer = _socket = null\n    _userDerivedKeys.clear()\n    _userEncryptKeys.clear()\n    _userSignKeys.clear()\n    _userVerification.clear()\n\n    // Setup new keys right away.\n    _generateMyKeys()\n\n    _setConnectionState(CONNECTION_DISCONNECTED)\n  }\n\n  /**\n   * Joins a WebSocket room with the specified room code and optional credentials. Establishes a WebSocket connection to the server, appending the room code, password, and creator secret (if provided) as query parameters. Sets up event listeners for 'close', 'error', and 'message' events to handle room leave, errors, and incoming messages.\n   *\n   * @param {string} roomCode - The code of the room to join.\n   * @param {string|null} [password=null] - Optional password for the room.\n   * @param {string|null} [creatorSecret=null] - Optional creator secret for verifying this user is the creator of the room.\n   */\n  const _joinRoom = (\n    roomCode,\n    creatorSecret = null,\n  ) => {\n    if (\n      !creatorSecret\n      && _connectionState\n      && _connectionState !== CONNECTION_DISCONNECTED\n    ) {\n      return\n    }\n    _setConnectionState(CONNECTION_CONNECTING)\n\n    _roomCode = roomCode\n\n    const url = new URL(\n      wsUrl + joinRoomEndpoint,\n    )\n    url.searchParams.append(\n      'code',\n      _roomCode,\n    )\n    if (creatorSecret) {\n      url.searchParams.append(\n        'creator',\n        creatorSecret,\n      )\n    }\n\n    _socket = new WebSocket(\n      url.toString(),\n    )\n\n    _socket.addEventListener('close', (\n      event,\n    ) => {\n      onRoomLeave.dispatch({\n        event,\n      })\n\n      leaveRoom()\n    })\n\n    _socket.addEventListener('error', (\n      event,\n    ) => {\n      onError.dispatch({\n        event,\n      })\n      leaveRoom()\n    })\n\n    _socket.addEventListener('message', async (\n      event,\n    ) => {\n      _processMessage(\n        decode(\n          event.data,\n          base64ToString,\n        ),\n        event.data,\n      )\n    })\n  }\n\n  const _processMessage = async (\n    parts,\n    raw,\n    isBuffered = false,\n  ) => {\n    const {\n      [SERVER_PAYLOAD]: serverPayload,\n      [SERVER_TIME]: serverTime,\n\n      [SHARED_ENCRYPTION_IV]: sharedEncryptionIv,\n      [SHARED_ENCRYPTION_PAYLOAD]: sharedEncryptionPayload,\n\n      [USER_DIRECT_PAYLOAD]: userDirectPayload,\n      [USER_ENCRYPTION_IV]: userEncryptionIv,\n      [USER_ENCRYPTION_KEY]: userEncryptionKey,\n      [USER_ENCRYPTION_PAYLOAD]: userEncryptionPayload,\n      [USER_ENCRYPTION_SIGNATURE]: userEncryptionSignature,\n      [USER]: userReceiver,\n    } = parts\n\n    let data, deserializedData, payload\n\n    if (serverPayload) {\n      payload = serverPayload\n    } else if (userDirectPayload) {\n      payload = userDirectPayload\n    } else {\n      payload = raw\n    }\n\n    if (sharedEncryptionPayload) {\n      if (\n        !_sharedKey\n        || (\n          !isBuffered\n          && _sharedMessagesBuffer.length > 0\n        )\n      ) {\n        // Can't decrypt without the key, store the messages for later.\n        _sharedMessagesBuffer.push({\n          time: Date.now(),\n          parts,\n          raw,\n        })\n\n        // Remove oldest message if buffer is full.\n        if (_sharedMessagesBuffer.length > messageBufferMaxCount) {\n          _sharedMessagesBuffer.shift()\n        }\n        return\n      }\n      if (!sharedEncryptionIv) {\n        onError.dispatch(\n          new Error('Missing IV to decrypt message')\n        )\n        return\n      }\n\n      data = await crypto.subtle.decrypt(\n        {\n          iv: base64ToBuffer(sharedEncryptionIv),\n          name: SHARED_ENCRYPTION_ALGORITHM,\n        },\n        _sharedKey,\n        base64ToBuffer(sharedEncryptionPayload),\n      )\n      data = new TextDecoder().decode(data)\n    } else if (userEncryptionPayload) {\n      if (\n        !userEncryptionSignature\n        || !userEncryptionKey\n        || !userEncryptionIv\n      ) {\n        // Assume the message is not encrypted just send as a user specific message.\n        return\n      }\n      if (!_generatedKeys) {\n        await _generateMyKeys()\n      }\n\n      const payloadData = deserializeMessage(\n        new TextDecoder()\n          .decode(\n            await crypto.subtle.decrypt(\n              {\n                iv: base64ToBuffer(userEncryptionIv),\n                name: SHARED_ENCRYPTION_ALGORITHM,\n              },\n              await crypto.subtle.importKey(\n                'raw',\n                await crypto.subtle.decrypt(\n                  {\n                    name: USER_ENCRYPTION_ALGORITHM,\n                  },\n                  _myEncryptKeys.privateKey,\n                  base64ToBuffer(userEncryptionKey),\n                ),\n                {\n                  name: SHARED_ENCRYPTION_ALGORITHM,\n                },\n                true,\n                ['encrypt', 'decrypt',],\n              ),\n              base64ToBuffer(userEncryptionPayload),\n            ),\n          ),\n      )\n\n      if (payloadData.type === KEY_EXCHANGE_ACCEPT) {\n        deserializedData = payloadData\n      } else {\n        const senderId = payloadData.sender\n\n        if (!senderId) {\n          onError.dispatch({\n            error: new Error('Message from unknown sender'),\n          })\n          return\n        }\n\n        const senderPublicKey = _userSignKeys.get(senderId)\n        if (!senderPublicKey) {\n          onError.dispatch({\n            error: new Error('No public key for ' + senderId),\n          })\n          return\n        }\n\n        if (!(await crypto.subtle.verify(\n          USER_SIGNATURE_ALGORITHM,\n          senderPublicKey,\n          base64ToBuffer(userEncryptionSignature),\n          dataBuffer,\n        ))) {\n          onError.dispatch({\n            error: new Error('Invalid signature from ' + senderId),\n          })\n          return\n        }\n\n        deserializedData = payloadData\n      }\n    } else {\n      data = payload\n    }\n\n    if (!deserializedData) {\n      try {\n        deserializedData = deserializeMessage(data)\n      } catch (error) {\n        onError.dispatch({\n          error: new Error('Failed to parse message ' + raw),\n        })\n        return\n      }\n    }\n    data = deserializedData\n\n    switch (data.type) {\n      case KEY_EXCHANGE_OFFER:\n        if (_myId === _creatorId) {\n          const newUserId = data.sender\n\n          _userEncryptKeys.set(\n            newUserId,\n            await crypto.subtle.importKey(\n              PUBLIC_KEY_EXPORT_FORMAT,\n              base64ToBuffer(data.publicEncryptKey),\n              { hash: HASH_ALGORITHM, name: USER_ENCRYPTION_ALGORITHM, },\n              true,\n              ['encrypt',],\n            ),\n          )\n\n          const publicSignKey = await crypto.subtle.importKey(\n            PUBLIC_KEY_EXPORT_FORMAT,\n            base64ToBuffer(data.publicSignKey),\n            { hash: HASH_ALGORITHM, name: USER_SIGNATURE_ALGORITHM, },\n            true,\n            ['verify',],\n          )\n\n          const publicExchangeKeyData = base64ToBuffer(data.publicExchangeKey)\n          if (!(await crypto.subtle.verify(\n            USER_SIGNATURE_ALGORITHM,\n            publicSignKey,\n            base64ToBuffer(data.signature),\n            publicExchangeKeyData,\n          ))) {\n            onError.dispatch({\n              error: new Error('Invalid signature for exchange from ' + newUserId),\n            })\n            return\n          }\n\n          _userSignKeys.set(newUserId, publicSignKey)\n\n          if (!_generatedKeys) {\n            await _generateMyKeys()\n          }\n\n          _userDerivedKeys.set(\n            newUserId,\n            await crypto.subtle.deriveKey(\n              {\n                name: DIFFIE_HELLMAN_ALGORITHM,\n                public: await crypto.subtle.importKey(\n                  DIFFIE_HELLMAN_EXPORT_FORMAT,\n                  publicExchangeKeyData,\n                  {\n                    name: DIFFIE_HELLMAN_ALGORITHM,\n                    namedCurve: DIFFIE_HELLMAN_CURVE,\n                  },\n                  true,\n                  [],\n                ),\n              },\n              _myExchangeKeys.privateKey,\n              {\n                length: SHARED_KEY_LENGTH,\n                name: SHARED_ENCRYPTION_ALGORITHM,\n              },\n              true,\n              ['encrypt', 'decrypt',],\n            ),\n          )\n\n          const myPublicExchangeKey = await crypto.subtle.exportKey(\n            DIFFIE_HELLMAN_EXPORT_FORMAT,\n            _myExchangeKeys.publicKey,\n          )\n          _message({\n            type: KEY_EXCHANGE_ACCEPT,\n\n            publicEncryptKey: bufferToBase64(_myPublicEncryptKey),\n            publicExchangeKey: bufferToBase64(myPublicExchangeKey),\n            publicSignKey: bufferToBase64(_myPublicSignKey),\n            signature: bufferToBase64(\n              await crypto.subtle.sign(\n                USER_SIGNATURE_ALGORITHM,\n                _mySignKeys.privateKey,\n                myPublicExchangeKey,\n              ),\n            ),\n          }, {\n            receiver: newUserId,\n          })\n          _generateVerificationCode(newUserId)\n        }\n        break\n\n      case KEY_EXCHANGE_ACCEPT:\n        if (\n          userReceiver === _myId\n          && data.sender === _creatorId\n        ) {\n          if (data.publicSignKey) {\n            const hostPublicSignKey = await crypto.subtle.importKey(\n              PUBLIC_KEY_EXPORT_FORMAT,\n              base64ToBuffer(data.publicSignKey),\n              {\n                hash: HASH_ALGORITHM,\n                name: USER_SIGNATURE_ALGORITHM,\n              },\n              true,\n              ['verify',],\n            )\n\n            if (\n              data.publicExchangeKey\n              && data.signature\n            ) {\n              if (!(await crypto.subtle.verify(\n                USER_SIGNATURE_ALGORITHM,\n                hostPublicSignKey,\n                base64ToBuffer(data.signature),\n                base64ToBuffer(data.publicExchangeKey),\n              ))) {\n                onError.dispatch({\n                  error: new Error('Invalid signature for exchange from ' + _creatorId),\n                })\n                leaveRoom()\n                return\n              }\n            }\n            _userSignKeys.set(\n              _creatorId,\n              hostPublicSignKey,\n            )\n          }\n\n          if (data.publicEncryptKey) {\n            _userEncryptKeys.set(\n              _creatorId,\n              await crypto.subtle.importKey(\n                PUBLIC_KEY_EXPORT_FORMAT,\n                base64ToBuffer(data.publicEncryptKey),\n                {\n                  hash: HASH_ALGORITHM,\n                  name: USER_ENCRYPTION_ALGORITHM,\n                },\n                true,\n                ['encrypt',],\n              ),\n            )\n          }\n\n          if (data.publicExchangeKey) {\n            if (!_generatedKeys) {\n              await _generateMyKeys()\n            }\n\n            _userDerivedKeys.set(\n              _creatorId,\n              await crypto.subtle.deriveKey(\n                {\n                  name: DIFFIE_HELLMAN_ALGORITHM,\n                  public: await crypto.subtle.importKey(\n                    DIFFIE_HELLMAN_EXPORT_FORMAT,\n                    base64ToBuffer(data.publicExchangeKey),\n                    {\n                      name: DIFFIE_HELLMAN_ALGORITHM,\n                      namedCurve: DIFFIE_HELLMAN_CURVE,\n                    },\n                    true,\n                    [],\n                  ),\n                },\n                _myExchangeKeys.privateKey,\n                {\n                  length: SHARED_KEY_LENGTH,\n                  name: SHARED_ENCRYPTION_ALGORITHM,\n                },\n                true,\n                ['encrypt', 'decrypt',],\n              )\n            )\n          }\n\n          if (\n            data.sharedKey\n            && data.sharedKeyIv\n          ) {\n            const derivedKey = _userDerivedKeys.get(_creatorId)\n            if (!derivedKey) {\n              onError.dispatch({\n                error: new Error('No derived key for host ' + _creatorId),\n              })\n              return\n            }\n\n            _sharedKey = await crypto.subtle.importKey(\n              'raw',\n              await crypto.subtle.decrypt(\n                {\n                  iv: base64ToBuffer(data.sharedKeyIv),\n                  name: SHARED_ENCRYPTION_ALGORITHM,\n                },\n                derivedKey,\n                base64ToBuffer(data.sharedKey),\n              ),\n              {\n                name: SHARED_ENCRYPTION_ALGORITHM,\n              },\n              true,\n              ['encrypt', 'decrypt',],\n            )\n\n            onUserVerified.dispatch({\n              userId: _myId,\n            })\n\n            if (_sharedMessagesBuffer.length > 0) {\n              const now = Date.now()\n              _sharedMessagesBuffer = _sharedMessagesBuffer.filter((item) => (\n                now - item.time < messageBufferMaxDuration\n              ))\n\n              while (_sharedMessagesBuffer.length > 0) {\n                const {\n                  parts,\n                  raw,\n                } = _sharedMessagesBuffer.shift()\n                _processMessage(\n                  parts,\n                  raw,\n                  true,\n                )\n              }\n            }\n\n            _setConnectionState(CONNECTION_CONNECTED)\n          } else {\n            _generateVerificationCode(_creatorId)\n          }\n        }\n        break\n\n      case ROOM_JOINED:\n        _creatorId = data.creatorId\n        _myId = data.userId\n\n        onRoomJoin.dispatch({\n          creatorId: data.creatorId,\n          roomCode: _roomCode,\n          userId: data.userId,\n          users: data.users,\n        })\n\n        if (_myId !== _creatorId) {\n          _setConnectionState(CONNECTION_PENDING_VERIFICATION)\n\n          if (!_generatedKeys) {\n            await _generateMyKeys()\n          }\n\n          const myPublicExchangeKey = await crypto.subtle.exportKey(\n            DIFFIE_HELLMAN_EXPORT_FORMAT,\n            _myExchangeKeys.publicKey,\n          )\n\n          _message({\n            type: KEY_EXCHANGE_OFFER,\n            publicEncryptKey: bufferToBase64(_myPublicEncryptKey),\n            publicExchangeKey: bufferToBase64(myPublicExchangeKey),\n            publicSignKey: bufferToBase64(_myPublicSignKey),\n            signature: bufferToBase64(\n              await crypto.subtle.sign(\n                USER_SIGNATURE_ALGORITHM,\n                _mySignKeys.privateKey,\n                myPublicExchangeKey,\n              ),\n            ),\n          }, {\n            allowUnencrypted: true,\n            receiver: _creatorId,\n          })\n        } else {\n          _setConnectionState(CONNECTION_CONNECTED)\n        }\n        break\n\n      case USER_LEFT:\n        onUserLeave.dispatch({\n          userId: data.userId,\n        })\n        _userDerivedKeys.delete(data.userId)\n        _userEncryptKeys.delete(data.userId)\n        _userSignKeys.delete(data.userId)\n        break\n\n      case USER_JOINED:\n        onUserJoin.dispatch({\n          userId: data.userId,\n        })\n        break\n\n      case USER_VERIFIED:\n        onUserVerified.dispatch({\n          userId: data.userId,\n        })\n        break\n\n      default:\n        onMessage.dispatch({\n          data,\n          time: calculateTime(\n            serverTime,\n            data?.senderTime,\n          ),\n        })\n        break\n    }\n  }\n\n  const _message = async (\n    data,\n    options = {},\n  ) => {\n    if (\n      !_socket\n      || _socket.readyState !== WebSocket.OPEN\n    ) {\n      onError.dispatch({\n        error: new Error('No open socket'),\n      })\n      return false\n    }\n\n    const message = serializeMessage({\n      ...data,\n      sender: _myId,\n      senderTime: Date.now(),\n    })\n    const parts = {}\n\n    if (options.receiver) {\n      const receiverPublicKey = _userEncryptKeys.get(options.receiver)\n      if (receiverPublicKey) {\n        const tempKey = await crypto.subtle.generateKey(\n          {\n            name: SHARED_ENCRYPTION_ALGORITHM,\n            length: 256,\n          },\n          true,\n          ['encrypt', 'decrypt',],\n        )\n        const iv = crypto.getRandomValues(\n          new Uint8Array(12),\n        )\n        const encryptedPayload = await crypto.subtle.encrypt(\n          {\n            iv,\n            name: SHARED_ENCRYPTION_ALGORITHM,\n          },\n          tempKey,\n          new TextEncoder().encode(message),\n        )\n\n        if (!_generatedKeys) {\n          await _generateMyKeys()\n        }\n\n        parts[USER_ENCRYPTION_SIGNATURE] = bufferToBase64(\n          await crypto.subtle.sign(\n            USER_SIGNATURE_ALGORITHM,\n            _mySignKeys.privateKey,\n            encryptedPayload,\n          ),\n        )\n        parts[USER_ENCRYPTION_KEY] = bufferToBase64(\n          await crypto.subtle.encrypt(\n            {\n              name: USER_ENCRYPTION_ALGORITHM,\n            },\n            receiverPublicKey,\n            await crypto.subtle.exportKey(\n              'raw',\n              tempKey,\n            ),\n          ),\n        )\n        parts[USER_ENCRYPTION_PAYLOAD] = bufferToBase64(encryptedPayload)\n        parts[USER_ENCRYPTION_IV] = bufferToBase64(iv)\n      } else if (!options.allowUnencrypted) {\n        onError.dispatch({\n          error: new Error('No public key for ' + options.receiver),\n        })\n        return false\n      } else {\n        parts[USER_DIRECT_PAYLOAD] = message\n      }\n\n      parts[USER] = options.receiver\n    } else if (options.server) {\n      parts[SERVER_PAYLOAD] = message\n    } else if (_sharedKey) {\n      const iv = crypto.getRandomValues(\n        new Uint8Array(12),\n      )\n\n      parts[SHARED_ENCRYPTION_IV] = bufferToBase64(iv)\n      parts[SHARED_ENCRYPTION_PAYLOAD] = bufferToBase64(\n        await crypto.subtle.encrypt(\n          {\n            iv,\n            name: SHARED_ENCRYPTION_ALGORITHM,\n          },\n          _sharedKey,\n          new TextEncoder().encode(message),\n        ),\n      )\n    } else {\n      onError.dispatch(\n        new Error('Trying to send without valid destination')\n      )\n      return false\n    }\n\n    _socket.send(\n      encode(\n        parts,\n        stringToBase64,\n      ),\n    )\n    return true\n  }\n\n  const messageServer = (\n    data,\n  ) => (\n    _myId\n    && _myId === _creatorId\n    && _message(data, {\n      server: true,\n    })\n  )\n  const messageUser = (\n    data,\n    userId,\n  ) => (\n    userId\n    && _message(data, {\n      receiver: userId,\n    })\n  )\n\n  const getVerificationCode = (\n    userId,\n    codeLength = 6,\n  ) => {\n    if (!_userVerification.has(userId)) {\n      return false\n    }\n    const hashArray = _userVerification.get(userId)\n    let code = ''\n    for (let i = 0; i < codeLength; i++) {\n      const index = hashArray[i] % IDENTIFIABLE_CHARACTERS.length\n      code += IDENTIFIABLE_CHARACTERS[index]\n    }\n    return code\n  }\n\n  return {\n    onConnection,\n    onError,\n    onMessage,\n\n    onRoomJoin,\n    onRoomLeave,\n\n    onUserJoin,\n    onUserLeave,\n    onUserVerified,\n    onUserVerificationCode,\n\n    messageRoom: (\n      data,\n    ) => _message(data),\n    messageServer,\n    messageUser,\n\n    closeRoom: (\n    ) => messageServer({\n      type: ROOM_CLOSED,\n    }),\n    createRoom: async (\n      options = {},\n    ) => {\n      if (\n        _connectionState\n        && _connectionState !== CONNECTION_DISCONNECTED\n      ) {\n        return\n      }\n      _setConnectionState(CONNECTION_CONNECTING)\n\n      try {\n        await new Promise((\n          resolve,\n          reject,\n        ) => {\n          const worker = new Worker(\n            URL.createObjectURL(\n              new Blob([SHARED_KEY_GENERATOR,], {\n                type: 'text/javascript',\n              }),\n            ),\n          )\n\n          worker.addEventListener('message', (\n            event,\n          ) => {\n            if (event.data.success) {\n              _sharedKey = event.data.sharedKey\n              resolve()\n            } else {\n              reject(\n                new Error(event.data.error)\n              )\n            }\n            worker.terminate()\n          })\n\n          worker.addEventListener('error', (\n            error,\n          ) => {\n            reject(error)\n            worker.terminate()\n          })\n\n          worker.postMessage({\n            type: 'SHARED_KEY',\n          })\n        })\n      } catch (error) {\n        _setConnectionState(CONNECTION_DISCONNECTED)\n        onError.dispatch({\n          error,\n        })\n        return\n      }\n\n      const url = new URL(\n        httpUrl\n        + createRoomEndpoint\n      )\n      if (options.limit) {\n        url.searchParams.append(\n          'limit',\n          options.limit,\n        )\n      }\n\n      const response = await fetch(url.toString(), {\n        method: 'GET',\n        headers: {\n          Accept: contentType,\n        },\n      })\n      if (!response.ok) {\n        throw new Error('Failed to create room')\n      }\n\n      let data = await response.text()\n      data = deserializeMessage(data)\n\n      _myId = data.userId\n\n      _joinRoom(\n        data.roomCode,\n        data.creatorSecret,\n      )\n\n      return data\n    },\n    joinRoom: (\n      roomCode,\n    ) => _joinRoom(\n      roomCode,\n    ),\n    leaveRoom,\n\n    kickUser: (\n      userId,\n    ) => messageServer({\n      type: USER_KICK,\n      userId,\n    }),\n\n    getVerificationCode,\n    verifyUser: async (\n      userId,\n      code,\n    ) => {\n      if (\n        _myId !== _creatorId\n        || !code\n      ) {\n        return false\n      }\n\n      const expectedCode = getVerificationCode(\n        userId,\n        code.length,\n      )\n      if (\n        !expectedCode\n        || !code\n        || expectedCode !== code\n      ) {\n        return false\n      }\n\n      const derivedKey = _userDerivedKeys.get(userId)\n      if (!derivedKey) {\n        return false\n      }\n\n      const iv = crypto.getRandomValues(\n        new Uint8Array(12),\n      )\n      _message({\n        type: KEY_EXCHANGE_ACCEPT,\n        sharedKey: bufferToBase64(\n          await crypto.subtle.encrypt(\n            {\n              iv,\n              name: SHARED_ENCRYPTION_ALGORITHM,\n            },\n            derivedKey,\n            await crypto.subtle.exportKey(\n              'raw',\n              _sharedKey,\n            ),\n          ),\n        ),\n        sharedKeyIv: bufferToBase64(iv),\n      }, {\n        receiver: userId,\n      })\n\n      onUserVerified.dispatch({\n        userId,\n      })\n      messageServer({\n        type: USER_VERIFIED,\n        userId,\n      })\n\n      return true\n    },\n  }\n}\n", "import { iife } from '../../../helpers/iife.js'\n\nimport {\n  createClientConnector,\n} from './library/client-connector.js'\n\niife([\n  'roupn',\n], {\n  createClientConnector,\n})\n"],
  "mappings": "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",
  "names": ["stringToBase64", "base64ToString", "offset", "parts", "raw", "options"]
}
