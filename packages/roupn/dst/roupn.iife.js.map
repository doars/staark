{
  "version": 3,
  "sources": ["../../../helpers/iife.js", "../src/library/message-types.js", "../src/utilities/code.js", "../src/utilities/encoding-client.js", "../src/utilities/event.js", "../src/utilities/protocol.js", "../src/utilities/time.js", "../src/library/key-generator.js", "../src/library/payload-keys.js", "../src/library/client-connector.js", "../../tiedliene/src/utilities/clone.js", "../../tiedliene/src/library/diff.js", "../src/library/client-synchronizer.js", "../src/index.iife.js"],
  "sourcesContent": ["/**\n * Assigns data to window at the given path. If an object at the path already exists it will merge them instead of replacing it.\n * @param {Array<string>} path Path to assign the values to.\n * @param {any} data Data to assign to the window.\n */\nexport const iife = (\n  path,\n  data,\n) => {\n  let subject = window\n  for (let i = 0; i < path.length - 1; i++) {\n    if (\n      typeof (subject[path[i]]) !== 'object'\n      || !Array.isArray(subject[path[i]])\n    ) {\n      subject[path[i]] = {}\n    }\n    subject = subject[path[i]]\n  }\n  subject[path[path.length - 1]] = data\n}\n", "export const CONNECTION_CONNECTED = 'CONNECTED'\nexport const CONNECTION_CONNECTING = 'CONNECTING'\nexport const CONNECTION_DISCONNECTED = 'DISCONNECTED'\nexport const CONNECTION_DISCONNECTING = 'DISCONNECTING'\nexport const CONNECTION_PENDING_VERIFICATION = 'PENDING_VERIFICATION'\n\nexport const ERROR = '_ER'\nexport const MESSAGE = '_MS'\n\nexport const EXCHANGE_0 = '_X0'\nexport const EXCHANGE_1 = '_X1'\nexport const EXCHANGE_2 = '_X2'\nexport const EXCHANGE_3 = '_X3'\nexport const EXCHANGE_4 = '_X4'\n\nexport const ROOM_CLOSED = '_RC'\nexport const ROOM_JOINED = '_RJ'\nexport const ROOM_LEFT = '_RL'\nexport const ROOM_REMOVED = '_RR'\n\nexport const STATE_UPDATE = '_SU'\nexport const STATE_SYNCH = '_SS'\n\nexport const USER_JOINED = '_UJ'\nexport const USER_KICK = '_UK'\nexport const USER_LEFT = '_UL'\nexport const USER_VERIFIED = '_UV'\n", "/**\n * A string containing the allowed characters for generating identifiers.\n * @type {string}\n */\nexport const ALPHANUMERIC_CHARACTERS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n\n/**\n * A string containing the allowed characters for generating codes. Excludes easily confused characters such as 'I', 'O', 'L', '1', and '0'.\n * @type {string}\n */\nexport const IDENTIFIABLE_CHARACTERS = 'ABCDEFGHKMNPQRSTUVWXYZ23456789'\n\n/**\n * Generates a random code string of the specified length.\n *\n * @param {number} [length=6] - The length of the code to generate.\n * @param {string} [characters='ABCDEFGHKMNPQRSTUVWXYZ23456789'] - The characters the code can consist of.\n * @returns {string} A randomly generated code.\n */\nexport const generateCode = (\n  length = 24,\n  characters = ALPHANUMERIC_CHARACTERS,\n) => {\n  let code = ''\n  for (let i = 0; i < length; i++) {\n    code += characters.charAt(\n      Math.floor(\n        Math.random()\n        * characters.length\n      ),\n    )\n  }\n  return code\n}\n", "export const base64ToBuffer = (\n  base64,\n) => {\n  const binary = atob(base64)\n  return Uint8Array.from(\n    binary,\n    character => character.charCodeAt(0),\n  ).buffer\n}\n\nexport const base64ToString = (\n  base64,\n) => {\n  const binary = atob(base64)\n  const bytes = Uint8Array.from(\n    binary,\n    character => character.charCodeAt(0)\n  )\n  return new TextDecoder().decode(bytes)\n}\n\nexport const stringToBase64 = (\n  string,\n) => {\n  const bytes = new TextEncoder().encode(string)\n\n  if (bytes.length < 65536) {\n    return btoa(\n      String.fromCharCode(...bytes),\n    )\n  }\n\n  let binary = ''\n  const chunkSize = 65536\n  for (let i = 0; i < bytes.length; i += chunkSize) {\n    const chunk = bytes.subarray(i, i + chunkSize)\n    binary += String.fromCharCode(...chunk)\n  }\n  return btoa(binary)\n}\n\nexport const bufferToBase64 = (\n  buffer,\n) => {\n  const bytes = new Uint8Array(buffer)\n\n  if (bytes.length < 65536) {\n    return btoa(\n      String.fromCharCode(...bytes),\n    )\n  }\n\n  let binary = ''\n  const chunkSize = 65536\n  for (let i = 0; i < bytes.length; i += chunkSize) {\n    const chunk = bytes.subarray(i, i + chunkSize)\n    binary += String.fromCharCode(...chunk)\n  }\n  return btoa(binary)\n}\n", "/**\n * Type definition for event listener options.\n * @typedef {Object} EventListenerOptions\n * @property {boolean} [once] - If true, the listener will be removed after the first call.\n */\n\n/**\n * Type definition for an event listener callback.\n * @typedef {(data: any) => void} EventListenerCallback\n */\n\n/**\n * Type definition for the event object returned by createEvent.\n * @typedef {Object} Event\n * @property {(callback: EventListenerCallback, options?: EventListenerOptions) => void} addListener\n * @property {(callback: EventListenerCallback) => void} removeListener\n * @property {(data: any) => void} dispatch\n */\n\n/**\n * Creates a custom event system with add, remove, and dispatch capabilities.\n *\n * @returns {Event} An event object with methods to manage listeners.\n */\nexport const createEvent = (\n) => {\n  /** @type {Map<EventListenerCallback, EventListenerOptions | undefined>} */\n  const listeners = new Map()\n\n  return {\n    /**\n     * Adds a listener callback for the event.\n     * @param {EventListenerCallback} callback - The listener function to add.\n     * @param {EventListenerOptions} [options] - Optional options for the listener (e.g., { once: true }).\n     */\n    addListener: (\n      callback,\n      options,\n    ) => {\n      if (!listeners.has(callback)) {\n        listeners.set(callback, options)\n      }\n    },\n\n    /**\n     * Removes a listener callback from the event.\n     * @param {EventListenerCallback} callback - The listener function to remove.\n     */\n    removeListener: (\n      callback,\n    ) => {\n      listeners.delete(callback)\n    },\n\n    /**\n     * Dispatches the event to all registered listeners.\n     * @param {any} data - Data to pass to each listener callback.\n     */\n    dispatch: (\n      data,\n    ) => {\n      for (const [listener, options] of listeners.entries()) {\n        listener(data)\n        if (\n          options\n          && options.once\n        ) {\n          listeners.delete(listener)\n        }\n      }\n    },\n  }\n}\n", "const DELIMITER = '|'\nconst INFIX = ':'\n\nexport const encode = (\n  parts,\n  stringToBase64,\n) => {\n  const segments = []\n  for (const key in parts) {\n    const value = parts[key]\n    if (\n      value !== null\n      && value !== undefined\n    ) {\n      segments.push(key + INFIX + stringToBase64(\n        String(value)),\n      )\n    }\n  }\n  return segments.join(DELIMITER)\n}\n\nexport const decode = (\n  message,\n  base64ToString,\n) => {\n  const parts = {}\n  const segments = message.split(DELIMITER)\n  for (const segment of segments) {\n    const index = segment.indexOf(INFIX)\n    if (index > 0) {\n      const key = segment.substring(0, index)\n      const value = segment.substring(index + 1)\n      parts[key] = base64ToString(value)\n    }\n  }\n  return parts\n}\n", "\n/**\n * Calculates time synchronization values based on provided server and sender times.\n *\n * @param {string} serverTime - The date and time the server broadcasted the data.\n * @param {string} senderTime - The date and time the sender send the data.\n * @returns {{\n *   delay: number,\n *   offset: number,\n *   adjusted: number,\n * }} An object containing the calculated delay, offset, and adjusted time.\n */\nexport const calculateTime = (\n  serverTime,\n  senderTime,\n) => {\n  const receiverTime = Date.now()\n\n  if (!serverTime) {\n    return {\n      delay: 0,\n      offset: 0,\n      adjusted: receiverTime,\n    }\n  }\n\n  if (!senderTime) {\n    const offset = serverTime - receiverTime\n    return {\n      delay: 0,\n      offset: offset,\n      adjusted: (\n        receiverTime\n        + offset\n      ),\n    }\n  }\n\n  const delay = receiverTime - senderTime\n  const offset = (\n    (serverTime - senderTime)\n    + (serverTime - receiverTime)\n  ) / 2\n  return {\n    delay: delay,\n    offset: offset,\n    adjusted: (\n      receiverTime\n      - delay\n      + offset\n    ),\n  }\n}\n", "export const DIFFIE_HELLMAN_ALGORITHM = 'ECDH'\nexport const DIFFIE_HELLMAN_CURVE = 'P-256'\nexport const DIFFIE_HELLMAN_EXPORT_FORMAT = 'raw'\nexport const HASH_ALGORITHM = 'SHA-256'\nexport const PUBLIC_KEY_EXPORT_FORMAT = 'spki'\nexport const SHARED_ENCRYPTION_ALGORITHM = 'AES-GCM'\nexport const SHARED_KEY_LENGTH = 256\nexport const USER_ENCRYPTION_ALGORITHM = 'RSA-OAEP'\nexport const USER_SIGNATURE_ALGORITHM = 'RSASSA-PKCS1-v1_5'\n\n// Values are inlined because of the string generated by the toString call will not have the same context. It is not written in a string in order to allow the build tool to minify and post-process the function's contents.\n\nexport const USER_KEY_GENERATOR = 'self.addEventListener(\\'message\\',' + ((\n) => {\n  Promise.all([\n    crypto.subtle.generateKey({\n      name: 'RSA-OAEP',\n      modulusLength: 4096,\n      publicExponent: new Uint8Array([1, 0, 1]),\n      hash: { name: 'SHA-256', },\n    }, true, ['encrypt', 'decrypt',]),\n    crypto.subtle.generateKey({\n      name: 'RSASSA-PKCS1-v1_5',\n      modulusLength: 4096,\n      publicExponent: new Uint8Array([1, 0, 1]),\n      hash: { name: 'SHA-256', },\n    }, true, ['sign', 'verify',]),\n    crypto.subtle.generateKey({\n      name: 'ECDH',\n      namedCurve: 'P-256',\n    }, true, ['deriveKey',]),\n  ])\n    .then(([\n      myEncryptKeys,\n      mySignKeys,\n      myExchangeKeys,\n    ]) => {\n      Promise.all([\n        crypto.subtle.exportKey(\n          'spki',\n          myEncryptKeys.publicKey,\n        ),\n        crypto.subtle.exportKey(\n          'spki',\n          mySignKeys.publicKey,\n        ),\n      ])\n        .then(([\n          myPublicEncryptKey,\n          myPublicSignKey,\n        ]) => {\n          self.postMessage({\n            success: true,\n            myEncryptKeys,\n            mySignKeys,\n            myExchangeKeys,\n            myPublicEncryptKey,\n            myPublicSignKey,\n          })\n        })\n        .catch((error) => {\n          self.postMessage({\n            success: false,\n            error: error.message,\n          })\n        })\n    })\n    .catch((error) => {\n      self.postMessage({\n        success: false,\n        error: error.message,\n      })\n    })\n}).toString() + ')'\n\nexport const SHARED_KEY_GENERATOR = 'self.addEventListener(\\'message\\',' + ((\n) => {\n  crypto.subtle.generateKey({\n    length: 256,\n    name: 'AES-GCM',\n  }, true, ['encrypt', 'decrypt'])\n    .then(sharedKey => {\n      self.postMessage({\n        success: true,\n        sharedKey,\n      })\n    })\n    .catch(error => {\n      self.postMessage({\n        success: false,\n        error: error.message,\n      })\n    })\n}).toString() + ')'\n", "export const SERVER_PAYLOAD = 'S'\nexport const SERVER_TIME = 'T'\n\nexport const SHARED_ENCRYPTION_PAYLOAD = 'E'\nexport const SHARED_ENCRYPTION_IV = 'I'\n\nexport const USER = 'U'\nexport const USER_DIRECT_PAYLOAD = 'D'\nexport const USER_ENCRYPTION_IV = 'V'\nexport const USER_ENCRYPTION_KEY = 'K'\nexport const USER_ENCRYPTION_PAYLOAD = 'P'\nexport const USER_ENCRYPTION_SIGNATURE = 'G'\n", "import {\n    CONNECTION_CONNECTED,\n    CONNECTION_CONNECTING,\n    CONNECTION_DISCONNECTED,\n    CONNECTION_DISCONNECTING,\n    CONNECTION_PENDING_VERIFICATION,\n\n    EXCHANGE_0,\n    EXCHANGE_1,\n    EXCHANGE_2,\n    EXCHANGE_3,\n    EXCHANGE_4,\n\n    ROOM_CLOSED,\n    ROOM_JOINED,\n\n    USER_JOINED,\n    USER_KICK,\n    USER_LEFT,\n    USER_VERIFIED,\n} from './message-types.js'\n\nimport {\n    IDENTIFIABLE_CHARACTERS,\n} from '../utilities/code.js'\nimport {\n    base64ToBuffer,\n    base64ToString,\n    bufferToBase64,\n    stringToBase64,\n} from '../utilities/encoding-client.js'\nimport {\n    createEvent,\n} from '../utilities/event.js'\nimport {\n    decode,\n    encode,\n} from '../utilities/protocol.js'\nimport {\n    calculateTime,\n} from '../utilities/time.js'\nimport {\n    DIFFIE_HELLMAN_ALGORITHM,\n    DIFFIE_HELLMAN_CURVE,\n    DIFFIE_HELLMAN_EXPORT_FORMAT,\n    HASH_ALGORITHM,\n    PUBLIC_KEY_EXPORT_FORMAT,\n    SHARED_ENCRYPTION_ALGORITHM,\n    SHARED_KEY_GENERATOR,\n    SHARED_KEY_LENGTH,\n    USER_ENCRYPTION_ALGORITHM,\n    USER_KEY_GENERATOR,\n    USER_SIGNATURE_ALGORITHM,\n} from './key-generator.js'\nimport {\n    SERVER_PAYLOAD,\n    SERVER_TIME,\n\n    SHARED_ENCRYPTION_IV,\n    SHARED_ENCRYPTION_PAYLOAD,\n    USER,\n    USER_DIRECT_PAYLOAD,\n\n    USER_ENCRYPTION_IV,\n    USER_ENCRYPTION_KEY,\n    USER_ENCRYPTION_PAYLOAD,\n    USER_ENCRYPTION_SIGNATURE\n} from './payload-keys.js'\n\n/**\n * @typedef {import('../utilities/event.js').Event} Event\n */\n\n/**\n * @typedef {Object} ConnectorOptions\n *\n * @property {string} [createRoomEndpoint='/create-room'] - HTTP endpoint for creating a room.\n * @property {string} [joinRoomEndpoint='/join-room'] - WebSocket endpoint for joining a room.\n *\n * @property {string} [contentType='application/json'] - Content-Type for HTTP requests.\n * @property {Function} [deserializeMessage=JSON.parse] - Function to deserialize incoming messages.\n * @property {Function} [serializeMessage=JSON.stringify] - Function to serialize outgoing messages.\n *\n * @property {string} [httpUrl='http://localhost:3000'] - Base HTTP URL for API requests.\n * @property {string} [wsUrl='http://localhost:3000'] - Base WebSocket URL for room connections.\n *\n * @property {any} [publicData={}] - Public data to be shared with other clients in the room.\n * @property {Function} [verifyPublicData] - Callback for verifying the public data of other users.\n * @property {any} [privateData={}] - Private data to be shared with other clients in the room.\n * @property {Function} [verifyPrivateData] - Callback for verifying the private data of other users.\n *\n * @property {number} [messageBufferMaxCount=50] - The maximum number of messages to store in the buffer.\n * @property {number} [messageBufferMaxDuration=60000] - The maximum duration in milliseconds to store a message in the buffer.\n */\n\n/**\n * @typedef {Object} ConnectorAPI\n *\n * @property {Event} onConnection - Event for connection state change notifications.\n * @property {Event} onError - Event for error handling.\n * @property {Event} onMessage - Event for receiving messages.\n * @property {Event} onRoomJoin - Event for room join notifications.\n * @property {Event} onRoomLeave - Event for room leave notifications.\n * @property {Event} onUserJoin - Event for user join notifications.\n * @property {Event} onUserLeave - Event for user leave notifications.\n * @property {Event} onUserVerified - Event for user verified notifications.\n *\n * @property {Function} createRoom - Creates a new room and joins it.\n * @property {Function} closeRoom - Closes the room for all. Only allowed by the creator.\n * @property {Function} joinRoom - Joins an existing room.\n * @property {Function} leaveRoom - Leaves the current room.\n * @property {Function} messageRoom - Sends a message to the current room.\n *\n * @property {Function} kickUser - Removes a player's connection. Only allowed by the creator.\n */\n\n/**\n * Creates a connector for managing room-based WebSocket communication.\n *\n * @param {ConnectorOptions} [options={}] - Configuration options for the connector.\n * @returns {ConnectorAPI} Connector API with event handlers and room management methods.\n */\nexport const createClientConnector = (\n  options = {},\n) => {\n  const {\n    contentType = 'application/json',\n    deserializeMessage = JSON.parse,\n    serializeMessage = JSON.stringify,\n\n    createRoomEndpoint = '/create-room',\n    joinRoomEndpoint = '/join-room',\n\n    httpUrl = 'http://localhost:3000',\n    wsUrl = 'http://localhost:3000',\n\n    messageBufferMaxCount = 50,\n    messageBufferMaxDuration = 60 * 1000,\n  } = options\n\n  let _connectionState = CONNECTION_DISCONNECTED,\n    _creatorId,\n    _generatedKeys,\n    _keyGenerationPromise,\n    _myEncryptKeys,\n    _myExchangeKeys,\n    _myId,\n    _myPublicEncryptKey,\n    _myPublicSignKey,\n    _mySignKeys,\n    _privateData,\n    _privateDataVerify,\n    _publicData,\n    _publicDataVerify,\n    _roomCode,\n    _sharedKey,\n    _sharedMessagesBuffer = [],\n    _socket,\n    _userDerivedKeys = new Map(),\n    _userEncryptKeys = new Map(),\n    _userSignKeys = new Map(),\n    _userVerification = new Map(),\n    _userVerified = new Map()\n  const _generateMyKeys = (\n  ) => {\n    if (\n      !_generatedKeys\n      && !_keyGenerationPromise\n    ) {\n      _keyGenerationPromise = new Promise((\n        resolve,\n        reject,\n      ) => {\n        const worker = new Worker(\n          URL.createObjectURL(\n            new Blob([USER_KEY_GENERATOR,], {\n              type: 'text/javascript',\n            }),\n          ),\n        )\n\n        worker.addEventListener('message', (\n          event,\n        ) => {\n          if (event.data.success) {\n            _myEncryptKeys = event.data.myEncryptKeys\n            _mySignKeys = event.data.mySignKeys\n            _myExchangeKeys = event.data.myExchangeKeys\n            _myPublicEncryptKey = event.data.myPublicEncryptKey\n            _myPublicSignKey = event.data.myPublicSignKey\n\n            _generatedKeys = true\n            _keyGenerationPromise = null\n            resolve()\n          } else {\n            const error = new Error(event.data.error)\n            onError.dispatch({\n              error,\n            })\n            reject(error)\n          }\n          worker.terminate()\n        })\n\n        worker.addEventListener('error', (\n          error,\n        ) => {\n          onError.dispatch({\n            error,\n          })\n          reject(error)\n          worker.terminate()\n        })\n\n        worker.postMessage({\n          type: 'USER_KEYS',\n        })\n      })\n    }\n    return _keyGenerationPromise\n  }\n  // Start generating new keys.\n  _generateMyKeys()\n\n  const onError = createEvent()\n  const onMessage = createEvent()\n  const onRoomJoin = createEvent()\n  const onRoomLeave = createEvent()\n  const onUserJoin = createEvent()\n  const onUserLeave = createEvent()\n  const onUserVerified = createEvent()\n  const onUserVerificationCode = createEvent()\n  const onConnection = createEvent()\n\n  const _setConnectionState = (\n    state,\n  ) => {\n    if (_connectionState !== state) {\n      _connectionState = state\n      onConnection.dispatch({\n        state,\n      })\n    }\n  }\n\n  const _generateVerificationCode = async (\n    userId,\n  ) => {\n    const derivedKey = _userDerivedKeys.get(userId)\n    if (!derivedKey) {\n      return\n    }\n\n    _userVerification.set(\n      userId,\n      Array.from(\n        new Uint8Array(\n          await crypto.subtle.digest(\n            HASH_ALGORITHM,\n            new TextEncoder().encode(\n              _roomCode\n              + bufferToBase64(\n                await crypto.subtle.exportKey(\n                  'raw',\n                  derivedKey,\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    )\n\n    onUserVerificationCode.dispatch({\n      userId,\n      code: getVerificationCode(userId),\n    })\n  }\n\n  /**\n   * Closes the current socket connection and resets the socket reference. This function should be called when leaving a room to ensure that the socket connection is properly closed and the state is cleaned up.\n   */\n  const leaveRoom = (\n  ) => {\n    if (\n      _connectionState === CONNECTION_DISCONNECTED\n      || _connectionState === CONNECTION_DISCONNECTING\n    ) {\n      return\n    }\n    _setConnectionState(CONNECTION_DISCONNECTING)\n\n    if (_socket) {\n      _socket.close()\n    }\n\n    _creatorId = _generatedKeys = _keyGenerationPromise = _myId = _myEncryptKeys = _myExchangeKeys = _myPublicEncryptKey = _myPublicSignKey = _mySignKeys = _privateData = _privateDataVerify = _publicData = _publicDataVerify = _sharedKey = _sharedMessagesBuffer = _socket = null\n    _userDerivedKeys.clear()\n    _userEncryptKeys.clear()\n    _userSignKeys.clear()\n    _userVerification.clear()\n    _userVerified.clear()\n\n    // Setup new keys right away.\n    _generateMyKeys()\n\n    _setConnectionState(CONNECTION_DISCONNECTED)\n  }\n  const kickUser = (\n    userId,\n  ) => messageServer({\n    type: USER_KICK,\n    userId,\n  })\n\n  /**\n   * Joins a WebSocket room with the specified room code and optional credentials. Establishes a WebSocket connection to the server, appending the room code, password, and creator secret (if provided) as query parameters. Sets up event listeners for 'close', 'error', and 'message' events to handle room leave, errors, and incoming messages.\n   *\n   * @param {string} roomCode - The code of the room to join.\n   * @param {string|null} [password=null] - Optional password for the room.\n   * @param {string|null} [creatorSecret=null] - Optional creator secret for verifying this user is the creator of the room.\n   */\n  const _joinRoom = (\n    roomCode,\n    creatorSecret = null,\n  ) => {\n    if (\n      !creatorSecret\n      && _connectionState\n      && _connectionState !== CONNECTION_DISCONNECTED\n    ) {\n      return\n    }\n    _setConnectionState(CONNECTION_CONNECTING)\n\n    _roomCode = roomCode\n\n    const url = new URL(\n      wsUrl + joinRoomEndpoint,\n    )\n    url.searchParams.append(\n      'code',\n      _roomCode,\n    )\n    if (creatorSecret) {\n      url.searchParams.append(\n        'creator',\n        creatorSecret,\n      )\n    }\n\n    _socket = new WebSocket(\n      url.toString(),\n    )\n\n    _socket.addEventListener('close', (\n      event,\n    ) => {\n      onRoomLeave.dispatch({\n        event,\n      })\n\n      leaveRoom()\n    })\n\n    _socket.addEventListener('error', (\n      event,\n    ) => {\n      onError.dispatch({\n        event,\n      })\n      leaveRoom()\n    })\n\n    _socket.addEventListener('message', async (\n      event,\n    ) => {\n      _processMessage(\n        decode(\n          event.data,\n          base64ToString,\n        ),\n        event.data,\n      )\n    })\n  }\n\n  const _processMessage = async (\n    parts,\n    raw,\n    isBuffered = false,\n  ) => {\n    const {\n      [SERVER_PAYLOAD]: serverPayload,\n      [SERVER_TIME]: serverTime,\n\n      [SHARED_ENCRYPTION_IV]: sharedEncryptionIv,\n      [SHARED_ENCRYPTION_PAYLOAD]: sharedEncryptionPayload,\n\n      [USER_DIRECT_PAYLOAD]: userDirectPayload,\n      [USER_ENCRYPTION_IV]: userEncryptionIv,\n      [USER_ENCRYPTION_KEY]: userEncryptionKey,\n      [USER_ENCRYPTION_PAYLOAD]: userEncryptionPayload,\n      [USER_ENCRYPTION_SIGNATURE]: userEncryptionSignature,\n      [USER]: userReceiver,\n    } = parts\n\n    let data,\n      deserializedData,\n      payload,\n      wasEncrypted\n\n    if (serverPayload) {\n      payload = serverPayload\n    } else if (userDirectPayload) {\n      payload = userDirectPayload\n    } else {\n      payload = raw\n    }\n\n    if (sharedEncryptionPayload) {\n      if (\n        !_sharedKey\n        || (\n          !isBuffered\n          && _sharedMessagesBuffer.length > 0\n        )\n      ) {\n        // Can't decrypt without the key, store the messages for later.\n        _sharedMessagesBuffer.push({\n          time: Date.now(),\n          parts,\n          raw,\n        })\n\n        // Remove oldest message if buffer is full.\n        if (_sharedMessagesBuffer.length > messageBufferMaxCount) {\n          _sharedMessagesBuffer.shift()\n        }\n        return\n      }\n      if (!sharedEncryptionIv) {\n        onError.dispatch(\n          new Error('Missing IV to decrypt message')\n        )\n        return\n      }\n\n      data = await crypto.subtle.decrypt(\n        {\n          iv: base64ToBuffer(sharedEncryptionIv),\n          name: SHARED_ENCRYPTION_ALGORITHM,\n        },\n        _sharedKey,\n        base64ToBuffer(sharedEncryptionPayload),\n      )\n      data = new TextDecoder().decode(data)\n      wasEncrypted = true\n    } else if (userEncryptionPayload) {\n      if (\n        !userEncryptionKey\n        || !userEncryptionIv\n      ) {\n        // Assume the message is not encrypted just send as a user specific message.\n        onError.dispatch({\n          error: new Error('Missing signature or IV to decrypt message.'),\n        })\n        return\n      }\n      if (!_generatedKeys) {\n        await _generateMyKeys()\n      }\n\n      const encryptedPayload = base64ToBuffer(userEncryptionPayload)\n      const payloadData = deserializeMessage(\n        new TextDecoder()\n          .decode(\n            await crypto.subtle.decrypt(\n              {\n                iv: base64ToBuffer(userEncryptionIv),\n                name: SHARED_ENCRYPTION_ALGORITHM,\n              },\n              await crypto.subtle.importKey(\n                'raw',\n                await crypto.subtle.decrypt(\n                  {\n                    name: USER_ENCRYPTION_ALGORITHM,\n                  },\n                  _myEncryptKeys.privateKey,\n                  base64ToBuffer(userEncryptionKey),\n                ),\n                {\n                  name: SHARED_ENCRYPTION_ALGORITHM,\n                },\n                true,\n                ['encrypt', 'decrypt',],\n              ),\n              encryptedPayload\n            ),\n          ),\n      )\n      wasEncrypted = true\n\n      if (payloadData.type === EXCHANGE_1) {\n        // We can't check the signature because we don't have the sender's public key yet.\n        deserializedData = payloadData\n      } else if (userEncryptionSignature) {\n        const senderId = payloadData.sender\n\n        if (!senderId) {\n          onError.dispatch({\n            error: new Error('Message from unknown sender'),\n          })\n          return\n        }\n\n        const senderPublicKey = _userSignKeys.get(senderId)\n        if (!senderPublicKey) {\n          onError.dispatch({\n            error: new Error('No public key for ' + senderId),\n          })\n          return\n        }\n\n        if (\n          !(await crypto.subtle.verify(\n            USER_SIGNATURE_ALGORITHM,\n            senderPublicKey,\n            base64ToBuffer(userEncryptionSignature),\n            encryptedPayload,\n          ))\n        ) {\n          onError.dispatch({\n            error: new Error('Invalid signature from ' + senderId),\n          })\n          return\n        }\n\n        deserializedData = payloadData\n      } else {\n        onError.dispatch({\n          error: new Error('Missing encryption signature'),\n        })\n        return\n      }\n    } else {\n      data = payload\n    }\n\n    if (!deserializedData) {\n      try {\n        deserializedData = deserializeMessage(data)\n      } catch (error) {\n        onError.dispatch({\n          error: new Error('Failed to parse message ' + raw),\n        })\n        return\n      }\n    }\n    data = deserializedData\n\n    switch (data.type) {\n      case ROOM_JOINED:\n        _creatorId = data.creatorId\n        _myId = data.userId\n\n        onRoomJoin.dispatch({\n          creatorId: data.creatorId,\n          roomCode: _roomCode,\n          userId: data.userId,\n          users: data.users,\n        })\n\n        if (_myId === _creatorId) {\n          _setConnectionState(CONNECTION_CONNECTED)\n        } else {\n          _setConnectionState(CONNECTION_PENDING_VERIFICATION)\n\n          if (!_generatedKeys) {\n            await _generateMyKeys()\n          }\n\n          const myPublicExchangeKey = await crypto.subtle.exportKey(\n            DIFFIE_HELLMAN_EXPORT_FORMAT,\n            _myExchangeKeys.publicKey,\n          )\n\n          _message({\n            type: EXCHANGE_0,\n            publicData: (\n              typeof(_publicData) === 'function'\n                ? _publicData()\n                : _publicData\n            ),\n            publicEncryptKey: bufferToBase64(_myPublicEncryptKey),\n            publicExchangeKey: bufferToBase64(myPublicExchangeKey),\n            publicSignKey: bufferToBase64(_myPublicSignKey),\n          }, {\n            allowUnencrypted: true,\n            receiver: _creatorId,\n          })\n        }\n        break\n\n      case EXCHANGE_0:\n        if (\n          userReceiver === _creatorId\n          && _myId === _creatorId\n        ) {\n          const newUserId = data.sender\n\n          if (\n            _publicDataVerify\n            && !_publicDataVerify({\n              data: data.publicData,\n              userId: newUserId,\n            })\n          ) {\n            kickUser(newUserId)\n            return\n          }\n\n          _userEncryptKeys.set(\n            newUserId,\n            await crypto.subtle.importKey(\n              PUBLIC_KEY_EXPORT_FORMAT,\n              base64ToBuffer(data.publicEncryptKey),\n              {\n                hash: HASH_ALGORITHM,\n                name: USER_ENCRYPTION_ALGORITHM,\n              },\n              true,\n              ['encrypt',],\n            ),\n          )\n\n          const publicSignKey = await crypto.subtle.importKey(\n            PUBLIC_KEY_EXPORT_FORMAT,\n            base64ToBuffer(data.publicSignKey),\n            {\n              hash: HASH_ALGORITHM,\n              name: USER_SIGNATURE_ALGORITHM,\n            },\n            true,\n            ['verify',],\n          )\n\n          const publicExchangeKeyData = base64ToBuffer(\n            data.publicExchangeKey,\n          )\n          if (!(await crypto.subtle.verify(\n            USER_SIGNATURE_ALGORITHM,\n            publicSignKey,\n            base64ToBuffer(data.signature),\n            publicExchangeKeyData,\n          ))) {\n            onError.dispatch({\n              error: new Error('Invalid signature for exchange from ' + newUserId),\n            })\n            return\n          }\n\n          _userSignKeys.set(newUserId, publicSignKey)\n\n          if (!_generatedKeys) {\n            await _generateMyKeys()\n          }\n\n          _userDerivedKeys.set(\n            newUserId,\n            await crypto.subtle.deriveKey(\n              {\n                name: DIFFIE_HELLMAN_ALGORITHM,\n                public: await crypto.subtle.importKey(\n                  DIFFIE_HELLMAN_EXPORT_FORMAT,\n                  publicExchangeKeyData,\n                  {\n                    name: DIFFIE_HELLMAN_ALGORITHM,\n                    namedCurve: DIFFIE_HELLMAN_CURVE,\n                  },\n                  true,\n                  [],\n                ),\n              },\n              _myExchangeKeys.privateKey,\n              {\n                length: SHARED_KEY_LENGTH,\n                name: SHARED_ENCRYPTION_ALGORITHM,\n              },\n              true,\n              ['encrypt', 'decrypt',],\n            ),\n          )\n\n          const myPublicExchangeKey = await crypto.subtle.exportKey(\n            DIFFIE_HELLMAN_EXPORT_FORMAT,\n            _myExchangeKeys.publicKey,\n          )\n          _message({\n            type: EXCHANGE_1,\n            publicData: (\n              typeof(_publicData) === 'function'\n                ? _publicData()\n                : _publicData\n            ),\n            publicEncryptKey: bufferToBase64(_myPublicEncryptKey),\n            publicExchangeKey: bufferToBase64(myPublicExchangeKey),\n            publicSignKey: bufferToBase64(_myPublicSignKey),\n          }, {\n            receiver: newUserId,\n          })\n\n          _generateVerificationCode(newUserId)\n        }\n        break\n\n      case EXCHANGE_1:\n        if (\n          userReceiver === _myId\n          && data.sender === _creatorId\n        ) {\n          if (\n            _publicDataVerify\n            && !_publicDataVerify({\n              data: data.publicData,\n              userId: _creatorId,\n            })\n          ) {\n            leaveRoom()\n            return\n          }\n\n          const hostPublicSignKey = await crypto.subtle.importKey(\n            PUBLIC_KEY_EXPORT_FORMAT,\n            base64ToBuffer(data.publicSignKey),\n            {\n              hash: HASH_ALGORITHM,\n              name: USER_SIGNATURE_ALGORITHM,\n            },\n            true,\n            ['verify',],\n          )\n\n          if (\n            data.publicExchangeKey\n            && data.signature\n          ) {\n            if (!(await crypto.subtle.verify(\n              USER_SIGNATURE_ALGORITHM,\n              hostPublicSignKey,\n              base64ToBuffer(data.signature),\n              base64ToBuffer(data.publicExchangeKey),\n            ))) {\n              onError.dispatch({\n                error: new Error('Invalid signature for exchange from ' + _creatorId),\n              })\n              leaveRoom()\n              return\n            }\n          }\n          _userSignKeys.set(\n            _creatorId,\n            hostPublicSignKey,\n          )\n\n          _userEncryptKeys.set(\n            _creatorId,\n            await crypto.subtle.importKey(\n              PUBLIC_KEY_EXPORT_FORMAT,\n              base64ToBuffer(data.publicEncryptKey),\n              {\n                hash: HASH_ALGORITHM,\n                name: USER_ENCRYPTION_ALGORITHM,\n              },\n              true,\n              ['encrypt',],\n            ),\n          )\n\n          if (!_generatedKeys) {\n            await _generateMyKeys()\n          }\n\n          _userDerivedKeys.set(\n            _creatorId,\n            await crypto.subtle.deriveKey(\n              {\n                name: DIFFIE_HELLMAN_ALGORITHM,\n                public: await crypto.subtle.importKey(\n                  DIFFIE_HELLMAN_EXPORT_FORMAT,\n                  base64ToBuffer(data.publicExchangeKey),\n                  {\n                    name: DIFFIE_HELLMAN_ALGORITHM,\n                    namedCurve: DIFFIE_HELLMAN_CURVE,\n                  },\n                  true,\n                  [],\n                ),\n              },\n              _myExchangeKeys.privateKey,\n              {\n                length: SHARED_KEY_LENGTH,\n                name: SHARED_ENCRYPTION_ALGORITHM,\n              },\n              true,\n              ['encrypt', 'decrypt',],\n            )\n          )\n\n          _generateVerificationCode(_creatorId)\n        }\n        break\n\n      case EXCHANGE_2:\n        if (\n          userReceiver === _myId\n          && data.sender === _creatorId\n        ) {\n          if (!wasEncrypted) {\n            onError.dispatch({\n              error: new Error('Message was not encrypted'),\n            })\n            return\n          }\n\n          if (\n            _privateDataVerify\n            && !_privateDataVerify({\n              data: data.privateData,\n              userId: _creatorId,\n            })\n          ) {\n            leaveRoom()\n            return\n          }\n\n          _message({\n            type: EXCHANGE_3,\n            privateData: _privateData,\n          }, {\n            receiver: _creatorId,\n          })\n        }\n        break\n\n      case EXCHANGE_3:\n        if (\n          userReceiver === _creatorId\n          && _myId === _creatorId\n        ) {\n          if (!wasEncrypted) {\n            onError.dispatch({\n              error: new Error('Message was not encrypted'),\n            })\n            return\n          }\n          const userId = data.sender\n\n          if (!_userVerified.get(userId)) {\n            onError.dispatch({\n              error: new Error('User not verified'),\n            })\n            kickUser(userId)\n            return\n          }\n\n          if (\n            _privateDataVerify\n            && !_privateDataVerify({\n              data: data.privateData,\n              userId,\n            })\n          ) {\n            kickUser(userId)\n            return\n          }\n\n          _message({\n            type: EXCHANGE_4,\n            sharedKey: bufferToBase64(\n              await crypto.subtle.exportKey(\n                'raw',\n                _sharedKey,\n              ),\n            ),\n          }, {\n            receiver: userId,\n          })\n\n          onUserVerified.dispatch({\n            userId,\n          })\n          messageServer({\n            type: USER_VERIFIED,\n            userId,\n          })\n        }\n        break\n\n      case EXCHANGE_4:\n        if (\n          userReceiver === _myId\n          && data.sender === _creatorId\n        ) {\n          if (!wasEncrypted) {\n            onError.dispatch({\n              error: new Error('Message was not encrypted'),\n            })\n            return\n          }\n\n          _sharedKey = await crypto.subtle.importKey(\n            'raw',\n            base64ToBuffer(\n              data.sharedKey,\n            ),\n            {\n              name: SHARED_ENCRYPTION_ALGORITHM,\n            },\n            true,\n            ['encrypt', 'decrypt',],\n          )\n\n          onUserVerified.dispatch({\n            userId: _myId,\n          })\n\n          // Replay stored messages to catch up.\n          if (_sharedMessagesBuffer.length > 0) {\n            const now = Date.now()\n            _sharedMessagesBuffer = _sharedMessagesBuffer.filter((item) => (\n              now - item.time < messageBufferMaxDuration\n            ))\n\n            while (_sharedMessagesBuffer.length > 0) {\n              const {\n                parts,\n                raw,\n              } = _sharedMessagesBuffer.shift()\n              _processMessage(\n                parts,\n                raw,\n                true,\n              )\n            }\n          }\n\n          _setConnectionState(CONNECTION_CONNECTED)\n        }\n      break\n\n      case USER_LEFT:\n        onUserLeave.dispatch({\n          userId: data.userId,\n        })\n        _userDerivedKeys.delete(data.userId)\n        _userEncryptKeys.delete(data.userId)\n        _userSignKeys.delete(data.userId)\n        break\n\n      case USER_JOINED:\n        onUserJoin.dispatch({\n          userId: data.userId,\n        })\n        break\n\n      case USER_VERIFIED:\n        onUserVerified.dispatch({\n          userId: data.userId,\n        })\n        break\n\n      default:\n        if (!wasEncrypted) {\n          onError.dispatch({\n            error: new Error('Message was not encrypted'),\n          })\n          return\n        }\n\n        onMessage.dispatch({\n          data,\n          time: calculateTime(\n            serverTime,\n            data?.senderTime,\n          ),\n        })\n        break\n    }\n  }\n\n  const _message = async (\n    data,\n    options = {},\n  ) => {\n    if (\n      !_socket\n      || _socket.readyState !== WebSocket.OPEN\n    ) {\n      onError.dispatch({\n        error: new Error('No open socket'),\n      })\n      return false\n    }\n\n    const message = serializeMessage({\n      ...data,\n      sender: _myId,\n      senderTime: Date.now(),\n    })\n    const parts = {}\n\n    const receiver = options.receiver\n    if (receiver) {\n      const receiverPublicKey = _userEncryptKeys.get(receiver)\n      if (receiverPublicKey) {\n        // Create a temporary symmetric encryption key that is only used once since asymmetric encryption is slower.\n        const tempKey = await crypto.subtle.generateKey(\n          {\n            name: SHARED_ENCRYPTION_ALGORITHM,\n            length: 256,\n          },\n          true,\n          ['encrypt', 'decrypt',],\n        )\n        const iv = crypto.getRandomValues(\n          new Uint8Array(12),\n        )\n        const encryptedPayload = await crypto.subtle.encrypt(\n          {\n            iv,\n            name: SHARED_ENCRYPTION_ALGORITHM,\n          },\n          tempKey,\n          new TextEncoder().encode(message),\n        )\n\n        if (!_generatedKeys) {\n          await _generateMyKeys()\n        }\n\n        parts[USER_ENCRYPTION_IV] = bufferToBase64(iv)\n        parts[USER_ENCRYPTION_KEY] = bufferToBase64(\n          await crypto.subtle.encrypt(\n            {\n              name: USER_ENCRYPTION_ALGORITHM,\n            },\n            receiverPublicKey,\n            await crypto.subtle.exportKey(\n              'raw',\n              tempKey,\n            ),\n          ),\n        )\n        parts[USER_ENCRYPTION_PAYLOAD] = bufferToBase64(encryptedPayload)\n        parts[USER_ENCRYPTION_SIGNATURE] = bufferToBase64(\n          await crypto.subtle.sign(\n            USER_SIGNATURE_ALGORITHM,\n            _mySignKeys.privateKey,\n            encryptedPayload,\n          ),\n        )\n      } else if (!options.allowUnencrypted) {\n        onError.dispatch({\n          error: new Error('No public key for ' + receiver),\n        })\n        return false\n      } else {\n        parts[USER_DIRECT_PAYLOAD] = message\n      }\n\n      parts[USER] = receiver\n    } else if (options.server) {\n      parts[SERVER_PAYLOAD] = message\n    } else if (_sharedKey) {\n      const iv = crypto.getRandomValues(\n        new Uint8Array(12),\n      )\n\n      parts[SHARED_ENCRYPTION_IV] = bufferToBase64(iv)\n      parts[SHARED_ENCRYPTION_PAYLOAD] = bufferToBase64(\n        await crypto.subtle.encrypt(\n          {\n            iv,\n            name: SHARED_ENCRYPTION_ALGORITHM,\n          },\n          _sharedKey,\n          new TextEncoder().encode(message),\n        ),\n      )\n    } else {\n      onError.dispatch(\n        new Error('Trying to send without valid destination')\n      )\n      return false\n    }\n\n    _socket.send(\n      encode(\n        parts,\n        stringToBase64,\n      ),\n    )\n    return true\n  }\n\n  const messageServer = (\n    data,\n  ) => (\n    _myId\n    && _myId === _creatorId\n    && _message(data, {\n      server: true,\n    })\n  )\n  const messageUser = (\n    data,\n    userId,\n  ) => (\n    userId\n    && _message(data, {\n      receiver: userId,\n    })\n  )\n\n  const getVerificationCode = (\n    userId,\n    codeLength = 6,\n  ) => {\n    if (!_userVerification.has(userId)) {\n      return false\n    }\n    const hashArray = _userVerification.get(userId)\n    let code = ''\n    for (let i = 0; i < codeLength; i++) {\n      const index = hashArray[i] % IDENTIFIABLE_CHARACTERS.length\n      code += IDENTIFIABLE_CHARACTERS[index]\n    }\n    return code\n  }\n\n  return {\n    onConnection,\n    onError,\n    onMessage,\n\n    onRoomJoin,\n    onRoomLeave,\n\n    onUserJoin,\n    onUserLeave,\n    onUserVerified,\n    onUserVerificationCode,\n\n    messageRoom: (\n      data,\n    ) => _message(data),\n    messageServer,\n    messageUser,\n\n    closeRoom: (\n    ) => messageServer({\n      type: ROOM_CLOSED,\n    }),\n    createRoom: async (\n      options = {},\n    ) => {\n      if (\n        _connectionState\n        && _connectionState !== CONNECTION_DISCONNECTED\n      ) {\n        return\n      }\n      _setConnectionState(CONNECTION_CONNECTING)\n\n      if (options.publicData) {\n        _publicData = options.publicData\n      }\n      if (options.verifyPublicData) {\n        _publicDataVerify = options.verifyPublicData\n      }\n\n      try {\n        await new Promise((\n          resolve,\n          reject,\n        ) => {\n          const worker = new Worker(\n            URL.createObjectURL(\n              new Blob([SHARED_KEY_GENERATOR,], {\n                type: 'text/javascript',\n              }),\n            ),\n          )\n\n          worker.addEventListener('message', (\n            event,\n          ) => {\n            if (event.data.success) {\n              _sharedKey = event.data.sharedKey\n              resolve()\n            } else {\n              reject(\n                new Error(event.data.error)\n              )\n            }\n            worker.terminate()\n          })\n\n          worker.addEventListener('error', (\n            error,\n          ) => {\n            reject(error)\n            worker.terminate()\n          })\n\n          worker.postMessage({\n            type: 'SHARED_KEY',\n          })\n        })\n      } catch (error) {\n        _setConnectionState(CONNECTION_DISCONNECTED)\n        onError.dispatch({\n          error,\n        })\n        return\n      }\n\n      const url = new URL(\n        httpUrl\n        + createRoomEndpoint\n      )\n      if (options.limit) {\n        url.searchParams.append(\n          'limit',\n          options.limit,\n        )\n      }\n\n      const response = await fetch(url.toString(), {\n        method: 'GET',\n        headers: {\n          Accept: contentType,\n        },\n      })\n      if (!response.ok) {\n        throw new Error('Failed to create room')\n      }\n\n      let data = await response.text()\n      data = deserializeMessage(data)\n\n      _myId = data.userId\n\n      _joinRoom(\n        data.roomCode,\n        data.creatorSecret,\n      )\n\n      return data\n    },\n    joinRoom: (\n      roomCode,\n      options = {},\n    ) => {\n      if (options.publicData) {\n        _publicData = options.publicData\n      }\n      if (options.verifyPublicData) {\n        _publicDataVerify = options.verifyPublicData\n      }\n      _joinRoom(\n        roomCode,\n      )\n    },\n    leaveRoom,\n    kickUser,\n\n    getVerificationCode,\n    verifyUser: async (\n      userId,\n      code,\n    ) => {\n      if (\n        _myId !== _creatorId\n        || !code\n      ) {\n        return false\n      }\n\n      const expectedCode = getVerificationCode(\n        userId,\n        code.length,\n      )\n      if (\n        !expectedCode\n        || !code\n        || expectedCode !== code\n      ) {\n        return false\n      }\n      _userVerified.set(userId, true)\n\n      const derivedKey = _userDerivedKeys.get(userId)\n      if (!derivedKey) {\n        return false\n      }\n\n      _message({\n        type: EXCHANGE_2,\n        privateData: _privateData,\n      }, {\n        receiver: userId,\n      })\n\n      return true\n    },\n  }\n}\n", "/**\n * Creates a deep clone of a javascript value.\n *\n * @param {any} value Data to clone.\n * @returns {any} Clone of the data.\n */\nexport const cloneRecursive = (\n  value,\n) => {\n  if (typeof (value) === 'object') {\n    const clone = (\n      Array.isArray(value)\n        ? []\n        : {}\n    )\n    for (const key in value) {\n      clone[key] = cloneRecursive(value[key])\n    }\n    return clone\n  }\n  return value\n}\n", "import {\n  cloneRecursive,\n} from '../utilities/clone.js'\n\n/**\n * @typedef {Object} Change A change to a state object.\n * @property {'delete' | 'set'} type The type of change.\n * @property {string[]} path The path to the value that changed.\n * @property {*} [new] The new value.\n * @property {*} [old] The old value.\n */\n\n/**\n * Function to set a value at a given path.\n *\n * @param {Record<string, any>} record The record to update.\n * @param {string[]} path The path to the value to update.\n * @param {*} value The new value.\n */\nconst setValueAtPath = (\n  record,\n  path,\n  value,\n) => {\n  let current = record\n  for (let i = 0; i < path.length - 1; i++) {\n    const key = path[i]\n    if (!(key in current)) {\n      current[key] = {}\n    }\n    current = current[key]\n  }\n  current[path[path.length - 1]] = cloneRecursive(value)\n}\n\n/**\n * Function to delete a value at a given path.\n *\n * @param {Record<string, any>} record The record to update.\n * @param {string[]} path The path to the value to delete.\n */\nconst deleteValueAtPath = (\n  record,\n  path,\n) => {\n  let current = record\n  for (let i = 0; i < path.length - 1; i++) {\n    current = current[path[i]]\n    if (!current) {\n      // Path doesn't exist, so nothing to delete.\n      return\n    }\n  }\n  if (Array.isArray(current)) {\n    current.splice(parseInt(path[path.length - 1]), 1)\n  } else {\n    delete current[path[path.length - 1]]\n  }\n}\n\n/**\n * Determine the differences between two objects.\n *\n * @param {Record<string, any>} before The object before the change.\n * @param {Record<string, any>} after The object after the change.\n * @param {string[]} [path=[]] The path to the current object.\n * @returns {Change[]} The changes between the two objects.\n */\nexport const determineDiff = (\n  before,\n  after,\n  path = [],\n) => {\n  const changes = []\n\n  // Check for keys in the \"before\" object that are not in \"after\".\n  for (const key in before) {\n    const currentPath = [...path, key]\n\n    if (!(key in after)) {\n      changes.unshift({\n        type: 'delete',\n        path: currentPath,\n        old: cloneRecursive(before[key]),\n      })\n    } else if (\n      typeof before[key] === 'object'\n      && typeof after[key] === 'object'\n    ) {\n      // If both are objects, recurse deeper.\n      changes.unshift(\n        ...determineDiff(before[key], after[key], currentPath),\n      )\n    } else if (before[key] !== after[key]) {\n      // If the value has changed, record the new and old value.\n      changes.unshift({\n        type: 'set',\n        path: currentPath,\n        old: cloneRecursive(before[key]),\n        new: cloneRecursive(after[key]),\n      })\n    }\n  }\n\n  // Check for keys in the \"after\" object that were not in \"before\".\n  for (const key in after) {\n    if (!(key in before)) {\n      changes.unshift({\n        type: 'set',\n        path: [...path, key],\n        new: cloneRecursive(after[key]),\n      })\n    }\n  }\n\n  return changes\n}\n\n/**\n * Apply a diff to a state object.\n *\n * @param {Record<string, any>} state The state object to update.\n * @param {Change[]} diff The diff to apply.\n * @returns {Record<string, any>} The updated state object.\n */\nexport const applyDiff = (\n  state,\n  diff,\n) => {\n  for (const change of diff) {\n    if (change.type === 'set') {\n      setValueAtPath(state, change.path, change.new)\n    } else if (change.type === 'delete') {\n      deleteValueAtPath(state, change.path)\n    }\n  }\n  return state\n}\n\n/**\n * Revert a diff on a state object.\n *\n * @param {Record<string, any>} state The state object to revert.\n * @param {Change[]} diff The diff to revert.\n * @returns {Record<string, any>} The updated state object.\n */\nexport const revertDiff = (\n  state,\n  diff,\n) => {\n  for (const change of diff) {\n    if (change.type === 'set') {\n      if (change.old === undefined) {\n        deleteValueAtPath(state, change.path)\n      } else {\n        setValueAtPath(state, change.path, change.old)\n      }\n    } else if (change.type === 'delete') {\n      setValueAtPath(state, change.path, change.old)\n    }\n  }\n  return state\n}\n", "import {\n    applyDiff,\n    cloneRecursive,\n    determineDiff,\n    revertDiff,\n} from '@doars/tiedliene'\n\nimport {\n    createClientConnector\n} from './client-connector.js'\nimport {\n    STATE_SYNCH,\n    STATE_UPDATE,\n} from './message-types.js'\n\nimport {\n    generateCode,\n} from '../utilities/code.js'\n\n/**\n * @typedef {import('../utilities/event.js').Event} Event\n */\n\n/**\n * Options for creating a synchronizer.\n * @typedef {Object} createClientSynchronizerOptions\n *\n * @property {string} [createRoomEndpoint='/create-room'] - HTTP endpoint for creating a room.\n * @property {string} [joinRoomEndpoint='/join-room'] - WebSocket endpoint for joining a room.\n *\n * @property {string} [contentType='application/json'] - Content-Type for HTTP requests.\n * @property {Function} [deserializeMessage=JSON.parse] - Function to deserialize incoming messages.\n * @property {Function} [serializeMessage=JSON.stringify] - Function to serialize outgoing messages.\n *\n * @property {string} [httpUrl='http://localhost:3000'] - Base HTTP URL for API requests.\n * @property {string} [wsUrl='http://localhost:3000'] - Base WebSocket URL for room connections.\n *\n * @property {any} [publicData={}] - Public data to be shared with other clients in the room.\n * @property {Function} [verifyPublicData] - Callback for verifying the public data of other users.\n * @property {any} [privateData={}] - Private data to be shared with other clients in the room.\n * @property {Function} [verifyPrivateData] - Callback for verifying the private data of other users.\n *\n * @property {number} [messageBufferMaxCount=50] - The maximum number of messages to store in the buffer.\n * @property {number} [messageBufferMaxDuration=60000] - The maximum duration in milliseconds to store a message in the buffer.\n *\n * @property {number} [windowPerUser=16] - Number of state updates to keep per joined user. Used in case of rollbacks.\n * @property {number} [synchronisationInterval=60000] - Interval in milliseconds for a full state synchronisation.\n */\n\n/**\n * The object returned by createClientSynchronizer.\n * @typedef {Object} Synchronizer\n *\n * @property {Event} onConnection - Event for connection state change notifications.\n * @property {Event} onError - Event for error handling.\n * @property {Event} onMessage - Event for receiving messages.\n * @property {Event} onRoomJoin - Event for room join notifications.\n * @property {Event} onRoomLeave - Event for room leave notifications.\n * @property {Event} onUserJoin - Event for user join notifications.\n * @property {Event} onUserLeave - Event for user leave notifications.\n * @property {Event} onUserVerified - Event for user verified notifications.\n * @property {Event} onUserVerificationCode - Event for verification code ready notifications.\n *\n * @property {Object} privateState - Internal state, including user and room information.\n * @property {Object} publicState - Shared state object synchronized across users.\n *\n * @property {Function} getConnectionState - Get the current connection state.\n *\n * @property {Function} closeRoom - Closes the room for all. Only allowed by the creator.\n * @property {Function} createRoom - Creates a new room and joins it.\n * @property {Function} joinRoom - Joins an existing room.\n * @property {Function} leaveRoom - Leaves the current room.\n * @property {Function} messageRoom - Sends a message to the current room.\n *\n * @property {Function} kickUser - Remove's a player's connection. Only allowed by the creator.\n *\n * @property {Function} sendUpdate - Sends the current state delta to other users.\n */\n\n/**\n * Creates a synchronizer for collaborative state management across users in a room.\n *\n * @param {createClientSynchronizerOptions} [options={}] - Configuration options for the synchronizer.\n * @param {Object} [privateState={}] - Internal state object for private data.\n * @param {Object} [publicState={}] - Shared state object to be synchronized.\n * @returns {Synchronizer} The synchronizer instance with state and synchronization methods.\n */\nexport const createClientSynchronizer = (\n  options = {},\n  privateState = {},\n  publicState = {},\n) => {\n  const connector = createClientConnector(options)\n  const {\n    messageRoom,\n  } = connector\n\n  const {\n    windowPerUser = 16,\n    synchronisationInterval = 60 * 1e3,\n  } = options\n  const _stateUpdates = []\n  let _synchronisationIntervalId,\n    _messageDelay = 0,\n    _messageOffset = 0,\n    _stateUpdatesWindow = windowPerUser\n\n  const _sendDelta = (\n    stateDelta,\n  ) => {\n    const identifier = generateCode()\n    const previous = (\n      stateDelta.length > 0\n        ? stateDelta[0].identifier\n        : null\n    )\n\n    // Store the update for reference later.\n    _stateUpdates.unshift({\n      identifier,\n      previous,\n      sender: privateState.userId,\n      stateDelta,\n      time: {\n        adjusted: (\n          Date.now()\n          + _messageDelay\n          - _messageOffset\n        ),\n      },\n    })\n    if (_stateUpdates.length > _stateUpdatesWindow) {\n      _stateUpdates.splice(\n        _stateUpdatesWindow,\n      )\n    }\n    messageRoom({\n      identifier,\n      previous,\n      stateDelta,\n      type: STATE_UPDATE,\n    })\n\n    _updatePreviousState()\n  }\n  const sendUpdate = (\n  ) => {\n    if (privateState.previousState) {\n      const stateDelta = determineDiff(\n        privateState.previousState,\n        publicState,\n      )\n      if (stateDelta.length > 0) {\n        _sendDelta(\n          stateDelta,\n        )\n      }\n    }\n  }\n\n  const _synchroniseState = (\n  ) => {\n    if (privateState.users.length > 1) {\n      messageRoom({\n        type: STATE_SYNCH,\n        state: cloneRecursive(\n          publicState,\n        ),\n      })\n    }\n  }\n\n  const _updatePreviousState = (\n  ) => {\n    privateState.previousState = cloneRecursive(\n      publicState,\n    )\n  }\n\n  connector.onMessage.addListener(({\n    data,\n    time,\n  }) => {\n    // Check if the message is not from yourself, or is not intended for the current user.\n    if (\n      data.sender === privateState.userId\n      || (\n        data.receiver\n        && data.receiver !== privateState.userId\n      )\n    ) {\n      return\n    }\n\n    // Update the estimated message delay and offset.\n    _messageDelay = (\n      _messageDelay\n      + time.delay\n    ) / 2\n    _messageOffset = (\n      _messageOffset\n      + time.offset\n    ) / 2\n\n    if (data.type === STATE_SYNCH) {\n      // Remove any state updates older than the given synch data.\n      let index = 0\n      for (; index < _stateUpdates.length; index++) {\n        const previousUpdate = _stateUpdates[index]\n        if (previousUpdate.time.adjusted >= time.adjusted) {\n          break\n        }\n      }\n      _stateUpdates.splice(0, index)\n\n      // Replace the existing state with the given state.\n      for (const key in publicState) {\n        delete publicState[key]\n      }\n      for (const key in data.state) {\n        publicState[key] = data.state[key]\n      }\n\n      // Apply any newer state updates.\n      for (let index = 0; index < _stateUpdates.length; index++) {\n        applyDiff(\n          publicState,\n          _stateUpdates[index].stateDelta,\n        )\n      }\n\n      _updatePreviousState()\n    } else if (data.type === STATE_UPDATE) {\n      let failedToInsert = true\n      for (let index = 0; index < _stateUpdates.length; index++) {\n        const previousUpdate = _stateUpdates[index]\n        if (\n          // If the update's identifier matches the data's previous, we can insert it here.\n          previousUpdate.identifier === data.previous\n          || (\n            // If the previous updates are the same. If the time of this update is newer than the previous one, we can insert it before the previous one.\n            previousUpdate.previous === data.previous\n            && previousUpdate.time.adjusted < time.adjusted\n          )\n        ) {\n          _stateUpdates.splice(index, 0, {\n            ...data,\n            time,\n          })\n          failedToInsert = false\n          break\n        }\n      }\n      if (failedToInsert) {\n        // If the update was not inserted just assume it will make sense later.\n        _stateUpdates.unshift({\n          ...data,\n          time,\n        })\n      }\n\n      // Undo the state until the new given diff is reached the apply the diff's in order.\n      for (let index = 0; index < _stateUpdates.length; index++) {\n        const update = _stateUpdates[index]\n        if (update.identifier === data.identifier) {\n          // We found the update, we can stop searching.\n          break\n        }\n        revertDiff(\n          publicState,\n          update.stateDelta,\n        )\n      }\n\n      // Redo the state including the new given diff.\n      for (let index = 0; index < _stateUpdates.length; index++) {\n        const update = _stateUpdates[index]\n        // Revert the previous state to the current state.\n        applyDiff(\n          publicState,\n          update.stateDelta,\n        )\n        if (update.identifier === data.identifier) {\n          // We found the update, we can stop searching.\n          break\n        }\n      }\n\n      _updatePreviousState()\n    }\n  })\n\n  connector.onConnection.addListener(({\n    state,\n  }) => {\n    privateState.connectionState = state\n  })\n\n  connector.onRoomJoin.addListener(({\n    creatorId,\n    roomCode,\n    userId,\n    users,\n  }) => {\n    // Set new room data.\n    privateState.creatorId = creatorId\n    privateState.roomCode = roomCode\n    privateState.userId = userId\n    privateState.users = users\n    privateState.verifiedUsers = []\n    privateState.previousState = cloneRecursive(\n      publicState,\n    )\n\n    if (userId === creatorId) {\n      privateState.verifiedUsers.push(userId)\n\n      // Let the creator send resynchronisation messages every once in a well to get all users in sync.\n      _synchronisationIntervalId = setInterval(\n        _synchroniseState,\n        synchronisationInterval,\n      )\n    }\n  })\n  connector.onRoomLeave.addListener((\n  ) => {\n    for (const key in privateState) {\n      delete privateState[key]\n    }\n    if (_synchronisationIntervalId) {\n      clearInterval(_synchronisationIntervalId)\n    }\n  })\n\n  connector.onUserJoin.addListener(({\n    userId,\n  }) => {\n    privateState.users.push(\n      userId,\n    )\n\n    // Update the amount state updates to store.\n    _stateUpdatesWindow = windowPerUser + (\n      windowPerUser * privateState.users.length\n    )\n  })\n  connector.onUserVerificationCode.addListener((\n    event\n  ) => {\n    if (event.userId === privateState.creatorId) {\n      privateState.verificationCode = event.code\n    }\n  })\n  connector.onUserVerified.addListener(({\n    userId,\n  }) => {\n    privateState.verifiedUsers.push(\n      userId,\n    )\n\n    // Update the amount state updates to store.\n    _stateUpdatesWindow = windowPerUser + (\n      windowPerUser * privateState.users.length\n    )\n\n    // Synchronise the state when a new user joins, if the user is the creator.\n    if (privateState.userId === privateState.creatorId) {\n      _synchroniseState()\n    }\n  })\n  connector.onUserLeave.addListener(({\n    userId,\n  }) => {\n    for (let index = 0; index < privateState.users.length; index++) {\n      if (privateState.users[index] === userId) {\n        privateState.users.splice(index, 1)\n        break\n      }\n    }\n    for (let index = 0; index < privateState.verifiedUsers.length; index++) {\n      if (privateState.verifiedUsers[index] === userId) {\n        privateState.verifiedUsers.splice(index, 1)\n        break\n      }\n    }\n\n    // Update the amount state updates to store.\n    _stateUpdatesWindow = windowPerUser + (\n      windowPerUser * privateState.users.length\n    )\n  })\n\n  return Object.assign({\n    privateState,\n    publicState,\n    sendUpdate,\n  }, connector)\n}\n", "import { iife } from '../../../helpers/iife.js'\n\nimport {\n  createClientConnector,\n} from './library/client-connector.js'\nimport {\n  createClientSynchronizer,\n} from './library/client-synchronizer.js'\n\niife([\n  'roupn',\n], {\n  createClientConnector,\n  createClientSynchronizer,\n})\n"],
  "mappings": "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",
  "names": ["stringToBase64", "base64ToString", "offset", "parts", "raw", "options", "index"]
}
