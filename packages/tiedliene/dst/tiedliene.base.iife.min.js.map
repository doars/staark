{
  "version": 3,
  "sources": ["../../../.scripts/iife.ts", "../src/library/diff.ts", "../src/index.base.iife.ts"],
  "sourcesContent": ["export const iife = function (\n  path: Array<string>,\n  data: any\n) {\n  let subject: Record<string, any> = window\n  for (let i = 0; i < path.length - 1; i++) {\n    if (\n      typeof (subject[path[i]]) !== 'object'\n      || !Array.isArray(subject[path[i]])\n    ) {\n      subject[path[i]] = {}\n    }\n    subject = subject[path[i]]\n  }\n  subject[path[path.length - 1]] = data\n}\n", "export interface Change {\n  type: 'delete' | 'set',\n  path: string[],\n  new?: any,\n  old?: any,\n}\n\n// Function to set a value at a given path.\nconst setValueAtPath = (\n  record: Record<string, any>,\n  path: string[],\n  value: any,\n) => {\n  let current = record\n  for (let i = 0; i < path.length - 1; i++) {\n    const key = path[i]\n    if (!(key in current)) {\n      current[key] = {}\n    }\n    current = current[key]\n  }\n  current[path[path.length - 1]] = structuredClone(value)\n}\n\n// Function to delete a value at a given path.\nconst deleteValueAtPath = (\n  record: Record<string, any>,\n  path: string[],\n) => {\n  let current = record\n  for (let i = 0; i < path.length - 1; i++) {\n    current = current[path[i]]\n    if (!current) {\n      // Path doesn't exist, so nothing to delete.\n      return\n    }\n  }\n  if (Array.isArray(current)) {\n    current.splice(parseInt(path[path.length - 1]), 1)\n  } else {\n    delete current[path[path.length - 1]]\n  }\n}\n\nexport const determineDiff = (\n  before: Record<string, any>,\n  after: Record<string, any>,\n  path: string[] = [],\n): Change[] => {\n  const changes: Change[] = []\n\n  // Check for keys in the \"before\" object that are not in \"after\".\n  for (const key in before) {\n    const currentPath = [...path, key]\n\n    if (!(key in after)) {\n      changes.unshift({\n        type: 'delete',\n        path: currentPath,\n        old: structuredClone(before[key]),\n      })\n    } else if (\n      typeof before[key] === 'object'\n      && typeof after[key] === 'object'\n    ) {\n      // If both are objects, recurse deeper.\n      changes.unshift(\n        ...determineDiff(before[key], after[key], currentPath)\n      )\n    } else if (before[key] !== after[key]) {\n      // If the value has changed, record the new and old value.\n      changes.unshift({\n        type: 'set',\n        path: currentPath,\n        old: structuredClone(before[key]),\n        new: structuredClone(after[key]),\n      })\n    }\n  }\n\n  // Check for keys in the \"after\" object that were not in \"before\".\n  for (const key in after) {\n    if (!(key in before)) {\n      changes.unshift({\n        type: 'set',\n        path: [...path, key],\n        new: structuredClone(after[key]),\n      })\n    }\n  }\n\n  return changes\n}\n\nexport const applyDiff = (\n  state: Record<string, any>,\n  diff: Change[],\n): Record<string, any> => {\n  for (const change of diff) {\n    if (change.type === 'set') {\n      setValueAtPath(state, change.path, change.new)\n    } else if (change.type === 'delete') {\n      deleteValueAtPath(state, change.path)\n    }\n  }\n  return state\n}\n\nexport const revertDiff = (\n  state: Record<string, any>,\n  diff: Change[],\n): Record<string, any> => {\n  for (const change of diff) {\n    if (change.type === 'set') {\n      if (change.old === undefined) {\n        deleteValueAtPath(state, change.path)\n      } else {\n        setValueAtPath(state, change.path, change.old)\n      }\n    } else if (change.type === 'delete') {\n      setValueAtPath(state, change.path, change.old)\n    }\n  }\n  return state\n}\n", "import { iife } from '../../../.scripts/iife.js'\n\nimport {\n  determineDiff,\n  applyDiff,\n  revertDiff,\n} from './library/diff.js'\n\niife([\n  'tiedliene',\n], {\n  determineDiff,\n  applyDiff,\n  revertDiff,\n})\n"],
  "mappings": "mBAAO,IAAMA,EAAO,SAClBC,EACAC,EACA,CACA,IAAIC,EAA+B,OACnC,QAASC,EAAI,EAAGA,EAAIH,EAAK,OAAS,EAAGG,KAEjC,OAAQD,EAAQF,EAAKG,CAAC,CAAC,GAAO,UAC3B,CAAC,MAAM,QAAQD,EAAQF,EAAKG,CAAC,CAAC,CAAC,KAElCD,EAAQF,EAAKG,CAAC,CAAC,EAAI,CAAC,GAEtBD,EAAUA,EAAQF,EAAKG,CAAC,CAAC,EAE3BD,EAAQF,EAAKA,EAAK,OAAS,CAAC,CAAC,EAAIC,CACnC,ECPA,IAAMG,EAAiB,CACrBC,EACAC,EACAC,IACG,CACH,IAAIC,EAAUH,EACd,QAAS,EAAI,EAAG,EAAIC,EAAK,OAAS,EAAG,IAAK,CACxC,IAAMG,EAAMH,EAAK,CAAC,EACZG,KAAOD,IACXA,EAAQC,CAAG,EAAI,CAAC,GAElBD,EAAUA,EAAQC,CAAG,CACvB,CACAD,EAAQF,EAAKA,EAAK,OAAS,CAAC,CAAC,EAAI,gBAAgBC,CAAK,CACxD,EAGMG,EAAoB,CACxBL,EACAC,IACG,CACH,IAAIE,EAAUH,EACd,QAASM,EAAI,EAAGA,EAAIL,EAAK,OAAS,EAAGK,IAEnC,GADAH,EAAUA,EAAQF,EAAKK,CAAC,CAAC,EACrB,CAACH,EAEH,OAGA,MAAM,QAAQA,CAAO,EACvBA,EAAQ,OAAO,SAASF,EAAKA,EAAK,OAAS,CAAC,CAAC,EAAG,CAAC,EAEjD,OAAOE,EAAQF,EAAKA,EAAK,OAAS,CAAC,CAAC,CAExC,EAEaM,EAAgB,CAC3BC,EACAC,EACAR,EAAiB,CAAC,IACL,CACb,IAAMS,EAAoB,CAAC,EAG3B,QAAWN,KAAOI,EAAQ,CACxB,IAAMG,EAAc,CAAC,GAAGV,EAAMG,CAAG,EAE3BA,KAAOK,EAOX,OAAOD,EAAOJ,CAAG,GAAM,UACpB,OAAOK,EAAML,CAAG,GAAM,SAGzBM,EAAQ,QACN,GAAGH,EAAcC,EAAOJ,CAAG,EAAGK,EAAML,CAAG,EAAGO,CAAW,CACvD,EACSH,EAAOJ,CAAG,IAAMK,EAAML,CAAG,GAElCM,EAAQ,QAAQ,CACd,KAAM,MACN,KAAMC,EACN,IAAK,gBAAgBH,EAAOJ,CAAG,CAAC,EAChC,IAAK,gBAAgBK,EAAML,CAAG,CAAC,CACjC,CAAC,EApBDM,EAAQ,QAAQ,CACd,KAAM,SACN,KAAMC,EACN,IAAK,gBAAgBH,EAAOJ,CAAG,CAAC,CAClC,CAAC,CAkBL,CAGA,QAAWA,KAAOK,EACVL,KAAOI,GACXE,EAAQ,QAAQ,CACd,KAAM,MACN,KAAM,CAAC,GAAGT,EAAMG,CAAG,EACnB,IAAK,gBAAgBK,EAAML,CAAG,CAAC,CACjC,CAAC,EAIL,OAAOM,CACT,EAEaE,EAAY,CACvBC,EACAC,IACwB,CACxB,QAAWC,KAAUD,EACfC,EAAO,OAAS,MAClBhB,EAAec,EAAOE,EAAO,KAAMA,EAAO,GAAG,EACpCA,EAAO,OAAS,UACzBV,EAAkBQ,EAAOE,EAAO,IAAI,EAGxC,OAAOF,CACT,EAEaG,EAAa,CACxBH,EACAC,IACwB,CACxB,QAAWC,KAAUD,EACfC,EAAO,OAAS,MACdA,EAAO,MAAQ,OACjBV,EAAkBQ,EAAOE,EAAO,IAAI,EAEpChB,EAAec,EAAOE,EAAO,KAAMA,EAAO,GAAG,EAEtCA,EAAO,OAAS,UACzBhB,EAAec,EAAOE,EAAO,KAAMA,EAAO,GAAG,EAGjD,OAAOF,CACT,ECpHAI,EAAK,CACH,WACF,EAAG,CACD,cAAAC,EACA,UAAAC,EACA,WAAAC,CACF,CAAC",
  "names": ["iife", "path", "data", "subject", "i", "setValueAtPath", "record", "path", "value", "current", "key", "deleteValueAtPath", "i", "determineDiff", "before", "after", "changes", "currentPath", "applyDiff", "state", "diff", "change", "revertDiff", "iife", "determineDiff", "applyDiff", "revertDiff"]
}
