var o=(t,n,e)=>{let s=t;for(let r=0;r<n.length-1;r++){let i=n[r];i in s||(s[i]={}),s=s[i]}s[n[n.length-1]]=structuredClone(e)},l=(t,n)=>{let e=t;for(let s=0;s<n.length-1;s++)if(e=e[n[s]],!e)return;Array.isArray(e)?e.splice(parseInt(n[n.length-1]),1):delete e[n[n.length-1]]},c=(t,n,e=[])=>{let s=[];for(let r in t){let i=[...e,r];r in n?typeof t[r]=="object"&&typeof n[r]=="object"?s.unshift(...c(t[r],n[r],i)):t[r]!==n[r]&&s.unshift({type:"set",path:i,old:structuredClone(t[r]),new:structuredClone(n[r])}):s.unshift({type:"delete",path:i,old:structuredClone(t[r])})}for(let r in n)r in t||s.unshift({type:"set",path:[...e,r],new:structuredClone(n[r])});return s},d=(t,n)=>{for(let e of n)e.type==="set"?o(t,e.path,e.new):e.type==="delete"&&l(t,e.path);return t},y=(t,n)=>{for(let e of n)e.type==="set"?e.old===void 0?l(t,e.path):o(t,e.path,e.old):e.type==="delete"&&o(t,e.path,e.old);return t};export{d as applyDiff,c as determineDiff,y as revertDiff};
//# sourceMappingURL=tiedliene.base.min.js.map
