{
  "version": 3,
  "sources": ["../../../.scripts/iife.ts", "../../staark-common/src/clone.ts", "../src/library/diff.ts", "../src/index.base.iife.ts"],
  "sourcesContent": ["export const iife = function (\n  path: Array<string>,\n  data: any\n) {\n  let subject: Record<string, any> = window\n  for (let i = 0; i < path.length - 1; i++) {\n    if (\n      typeof (subject[path[i]]) !== 'object'\n      || !Array.isArray(subject[path[i]])\n    ) {\n      subject[path[i]] = {}\n    }\n    subject = subject[path[i]]\n  }\n  subject[path[path.length - 1]] = data\n}\n", "/**\n * Creates a deep clone of a javascript value.\n * @param value Data to clone.\n * @returns Clone of the data.\n */\nexport const cloneRecursive = (\n  value: any,\n) => {\n  if (typeof (value) === 'object') {\n    const clone: Record<any, any> = Array.isArray(value) ? [] : {}\n    for (const key in value) {\n      clone[key] = cloneRecursive(value[key])\n    }\n    return clone\n  }\n  return value\n}\n", "import {\n  cloneRecursive,\n} from '@doars/staark-common/src/clone.js'\n\nexport interface Change {\n  type: 'delete' | 'set',\n  path: string[],\n  new?: any,\n  old?: any,\n}\n\n// Function to set a value at a given path.\nconst setValueAtPath = (\n  record: Record<string, any>,\n  path: string[],\n  value: any,\n) => {\n  let current = record\n  for (let i = 0; i < path.length - 1; i++) {\n    const key = path[i]\n    if (!(key in current)) {\n      current[key] = {}\n    }\n    current = current[key]\n  }\n  current[path[path.length - 1]] = cloneRecursive(value)\n}\n\n// Function to delete a value at a given path.\nconst deleteValueAtPath = (\n  record: Record<string, any>,\n  path: string[],\n) => {\n  let current = record\n  for (let i = 0; i < path.length - 1; i++) {\n    current = current[path[i]]\n    if (!current) {\n      // Path doesn't exist, so nothing to delete.\n      return\n    }\n  }\n  if (Array.isArray(current)) {\n    current.splice(parseInt(path[path.length - 1]), 1)\n  } else {\n    delete current[path[path.length - 1]]\n  }\n}\n\nexport const determineDiff = (\n  before: Record<string, any>,\n  after: Record<string, any>,\n  path: string[] = [],\n): Change[] => {\n  const changes: Change[] = []\n\n  // Check for keys in the \"before\" object that are not in \"after\".\n  for (const key in before) {\n    const currentPath = [...path, key]\n\n    if (!(key in after)) {\n      changes.unshift({\n        type: 'delete',\n        path: currentPath,\n        old: cloneRecursive(before[key]),\n      })\n    } else if (\n      typeof before[key] === 'object'\n      && typeof after[key] === 'object'\n    ) {\n      // If both are objects, recurse deeper.\n      changes.unshift(\n        ...determineDiff(before[key], after[key], currentPath)\n      )\n    } else if (before[key] !== after[key]) {\n      // If the value has changed, record the new and old value.\n      changes.unshift({\n        type: 'set',\n        path: currentPath,\n        old: cloneRecursive(before[key]),\n        new: cloneRecursive(after[key]),\n      })\n    }\n  }\n\n  // Check for keys in the \"after\" object that were not in \"before\".\n  for (const key in after) {\n    if (!(key in before)) {\n      changes.unshift({\n        type: 'set',\n        path: [...path, key],\n        new: cloneRecursive(after[key]),\n      })\n    }\n  }\n\n  return changes\n}\n\nexport const applyDiff = (\n  state: Record<string, any>,\n  diff: Change[],\n): Record<string, any> => {\n  for (const change of diff) {\n    if (change.type === 'set') {\n      setValueAtPath(state, change.path, change.new)\n    } else if (change.type === 'delete') {\n      deleteValueAtPath(state, change.path)\n    }\n  }\n  return state\n}\n\nexport const revertDiff = (\n  state: Record<string, any>,\n  diff: Change[],\n): Record<string, any> => {\n  for (const change of diff) {\n    if (change.type === 'set') {\n      if (change.old === undefined) {\n        deleteValueAtPath(state, change.path)\n      } else {\n        setValueAtPath(state, change.path, change.old)\n      }\n    } else if (change.type === 'delete') {\n      setValueAtPath(state, change.path, change.old)\n    }\n  }\n  return state\n}\n", "import { iife } from '../../../.scripts/iife.js'\n\nimport {\n  determineDiff,\n  applyDiff,\n  revertDiff,\n} from './library/diff.js'\n\niife([\n  'tiedliene',\n], {\n  determineDiff,\n  applyDiff,\n  revertDiff,\n})\n"],
  "mappings": "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",
  "names": []
}
