{
  "version": 3,
  "sources": ["../../staark-common/src/clone.ts", "../src/library/diff.ts", "../src/library/state.ts"],
  "sourcesContent": ["export const cloneRecursive = (\n  value: any,\n) => {\n  if (typeof (value) === 'object') {\n    if (Array.isArray(value)) {\n      const clone: any[] = []\n      for (let i = 0; i < value.length; i++) {\n        clone.push(cloneRecursive(value[i]))\n      }\n      value = clone\n    } else {\n      const clone: Record<string, any> = {}\n      for (const key in value) {\n        clone[key] = cloneRecursive(value[key])\n      }\n      value = clone\n    }\n  }\n  return value\n}\n", "import {\n  cloneRecursive,\n} from '@doars/staark-common/src/clone.js'\n\nexport interface Change {\n  type: 'delete' | 'set',\n  path: string[],\n  new?: any,\n  old?: any,\n}\n\n// Function to set a value at a given path.\nconst setValueAtPath = (\n  record: Record<string, any>,\n  path: string[],\n  value: any,\n) => {\n  let current = record\n  for (let i = 0; i < path.length - 1; i++) {\n    const key = path[i]\n    if (!(key in current)) {\n      current[key] = {}\n    }\n    current = current[key]\n  }\n  current[path[path.length - 1]] = cloneRecursive(value)\n}\n\n// Function to delete a value at a given path.\nconst deleteValueAtPath = (\n  record: Record<string, any>,\n  path: string[],\n) => {\n  let current = record\n  for (let i = 0; i < path.length - 1; i++) {\n    current = current[path[i]]\n    if (!current) {\n      // Path doesn't exist, so nothing to delete.\n      return\n    }\n  }\n  if (Array.isArray(current)) {\n    current.splice(parseInt(path[path.length - 1]), 1)\n  } else {\n    delete current[path[path.length - 1]]\n  }\n}\n\nexport const determineDiff = (\n  before: Record<string, any>,\n  after: Record<string, any>,\n  path: string[] = [],\n): Change[] => {\n  const changes: Change[] = []\n\n  // Check for keys in the \"before\" object that are not in \"after\".\n  for (const key in before) {\n    const currentPath = [...path, key]\n\n    if (!(key in after)) {\n      changes.unshift({\n        type: 'delete',\n        path: currentPath,\n        old: cloneRecursive(before[key]),\n      })\n    } else if (\n      typeof before[key] === 'object'\n      && typeof after[key] === 'object'\n    ) {\n      // If both are objects, recurse deeper.\n      changes.unshift(\n        ...determineDiff(before[key], after[key], currentPath)\n      )\n    } else if (before[key] !== after[key]) {\n      // If the value has changed, record the new and old value.\n      changes.unshift({\n        type: 'set',\n        path: currentPath,\n        old: cloneRecursive(before[key]),\n        new: cloneRecursive(after[key]),\n      })\n    }\n  }\n\n  // Check for keys in the \"after\" object that were not in \"before\".\n  for (const key in after) {\n    if (!(key in before)) {\n      changes.unshift({\n        type: 'set',\n        path: [...path, key],\n        new: cloneRecursive(after[key]),\n      })\n    }\n  }\n\n  return changes\n}\n\nexport const applyDiff = (\n  state: Record<string, any>,\n  diff: Change[],\n): Record<string, any> => {\n  for (const change of diff) {\n    if (change.type === 'set') {\n      setValueAtPath(state, change.path, change.new)\n    } else if (change.type === 'delete') {\n      deleteValueAtPath(state, change.path)\n    }\n  }\n  return state\n}\n\nexport const revertDiff = (\n  state: Record<string, any>,\n  diff: Change[],\n): Record<string, any> => {\n  for (const change of diff) {\n    if (change.type === 'set') {\n      if (change.old === undefined) {\n        deleteValueAtPath(state, change.path)\n      } else {\n        setValueAtPath(state, change.path, change.old)\n      }\n    } else if (change.type === 'delete') {\n      setValueAtPath(state, change.path, change.old)\n    }\n  }\n  return state\n}\n", "import {\n  cloneRecursive,\n} from '@doars/staark-common/src/clone.js'\nimport {\n  Change,\n  determineDiff,\n  applyDiff,\n  revertDiff,\n} from './diff.js'\n\ninterface ManageOptions {\n  maximumHistory?: number,\n}\n\nexport const manageState = function (\n  state: Record<string, any>,\n  options?: ManageOptions,\n) {\n  state = cloneRecursive(state)\n  options = Object.assign({\n    maximumHistory: 50,\n  }, options)\n\n  const undoStack: Change[][] = []\n  const redoStack: Change[][] = []\n\n  return {\n    get: (\n    ) => {\n      return cloneRecursive(state)\n    },\n\n    set: (\n      newState: Record<string, any>,\n    ) => {\n      newState = cloneRecursive(newState)\n\n      const diffs = determineDiff(state, newState)\n      if (diffs.length > 0) {\n        undoStack.push(diffs)\n\n        // Cap stack size.\n        if (\n          options.maximumHistory\n          && undoStack.length > options.maximumHistory\n        ) {\n          for (let i = undoStack.length - options.maximumHistory; i > 0; i--) {\n            undoStack.shift()\n          }\n        }\n\n        // Clear the redo stack when a new state is set.\n        redoStack.splice(0)\n      }\n\n      state = newState\n      return cloneRecursive(state)\n    },\n\n    undo: (\n    ) => {\n      if (undoStack.length > 0) {\n        const lastDiffs = undoStack.pop()\n        if (lastDiffs) {\n          redoStack.push(lastDiffs)\n\n          // Cap stack size.\n          if (\n            options.maximumHistory\n            && redoStack.length > options.maximumHistory\n          ) {\n            for (let i = redoStack.length - options.maximumHistory; i > 0; i--) {\n              redoStack.shift()\n            }\n          }\n\n          state = revertDiff(state, lastDiffs)\n        }\n      }\n\n      return cloneRecursive(state)\n    },\n\n    redo: (\n    ) => {\n      if (redoStack.length > 0) {\n        const diffs = redoStack.pop()\n        if (diffs) {\n          undoStack.push(diffs)\n\n          // Cap stack size.\n          if (\n            options.maximumHistory\n            && undoStack.length > options.maximumHistory\n          ) {\n            for (let i = undoStack.length - options.maximumHistory; i > 0; i--) {\n              undoStack.shift()\n            }\n          }\n\n          state = applyDiff(state, diffs)\n        }\n      }\n\n      return cloneRecursive(state)\n    },\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
