{
  "version": 3,
  "sources": ["../../../.scripts/iife.ts", "../../staark-common/src/marker.ts", "../../staark-common/src/memo.ts", "../../staark-common/src/node.ts", "../../staark-common/src/array.ts", "../../staark-common/src/clone.ts", "../../staark-common/src/compare.ts", "../../staark-common/src/element.ts", "../src/utilities/proxy.ts", "../src/library/mount.ts", "../src/index.base.iife.ts"],
  "sourcesContent": ["export const iife = function (\n  path: Array<string>,\n  data: any\n) {\n  let subject: Record<string, any> = window\n  for (let i = 0; i < path.length - 1; i++) {\n    if (\n      typeof (subject[path[i]]) !== 'object'\n      || !Array.isArray(subject[path[i]])\n    ) {\n      subject[path[i]] = {}\n    }\n    subject = subject[path[i]]\n  }\n  subject[path[path.length - 1]] = data\n}\n", "export const marker = 'n'\n", "import {\n  marker,\n} from './marker.js'\nimport { NodeContent } from './node.js'\n\nexport type MemoFunction = (\n  state: Record<string, any>,\n  memory: any,\n) => NodeContent[] | NodeContent\n\nexport type MemoAbstract = {\n  _: Symbol,\n  // Compare data\n  m: any,\n  // Render function\n  r: MemoFunction,\n}\n\nexport const memo = (\n  render: MemoFunction,\n  memory: any,\n) => ({\n  _: marker,\n  r: render,\n  m: memory,\n})\n", "import {\n  marker,\n} from './marker.js'\nimport {\n  MemoAbstract,\n} from './memo.js'\n\ntype _NodeAttributeListener = {\n  (event: Event, state: Record<string, any>): unknown\n  (event: Event): unknown\n  (): unknown\n}\n\nexport interface NodeAttributeListener extends _NodeAttributeListener {\n  f?: _NodeAttributeListener\n}\n\nexport type NodeAttributes =\n  Record<string,\n    boolean |\n    null |\n    number |\n    string |\n    (number | string)[] |\n    NodeAttributeListener |\n    Record<string,\n      boolean | number | string\n    >\n  >\n\nexport type NodeContent =\n  string |\n  MemoAbstract |\n  NodeAbstract\n\nexport type NodeAbstract = {\n  // Discriminator\n  _: string,\n  // Attributes\n  a?: NodeAttributes\n  // Content\n  c?: NodeContent[]\n  // Node type\n  t: string\n}\n\nexport const node = (\n  type: string,\n  attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n  contents?: NodeContent[] | NodeContent,\n): NodeAbstract => {\n  if (\n    typeof (attributesOrContents) !== 'object'\n    || (attributesOrContents as NodeAbstract)._ === marker\n    || Array.isArray(attributesOrContents)\n  ) {\n    contents = attributesOrContents as NodeContent\n    attributesOrContents = undefined\n  }\n\n  return {\n    _: marker,\n    a: attributesOrContents as (NodeAttributes | undefined),\n    c: (\n      contents\n        ? Array.isArray(contents)\n          ? contents\n          : [contents] as NodeContent[]\n        : []\n    ),\n    t: type.toUpperCase(),\n  }\n}\n", "export const arrayify = <T>(\n  data: T[] | T,\n): T[] => (\n  Array.isArray(data)\n    ? data :\n    [data,]\n)\n", "/**\n * Creates a deep clone of a javascript value.\n * @param value Data to clone.\n * @returns Clone of the data.\n */\nexport const cloneRecursive = (\n  value: any,\n) => {\n  if (typeof (value) === 'object') {\n    const clone: Record<any, any> = Array.isArray(value) ? [] : {}\n    for (const key in value) {\n      clone[key] = cloneRecursive(value[key])\n    }\n    return clone\n  }\n  return value\n}\n", "export const equalRecursive = (\n  valueA: any,\n  valueB: any,\n): boolean => {\n  if (valueA === valueB) {\n    return true\n  }\n\n  if (\n    !valueA\n    || !valueB\n    || typeof valueA !== 'object'\n    || typeof valueB !== 'object'\n  ) {\n    return valueA === valueB\n  }\n\n  if (\n    valueA instanceof Date) {\n    return (\n      valueB instanceof Date\n      && valueA.getTime() === valueB.getTime()\n    )\n  }\n\n  // if (valueA.prototype !== valueB.prototype) {\n  //   return false\n  // }\n\n  const keys = Object.keys(valueA)\n  return (\n    keys.length === Object.keys(valueB).length\n    && keys.every(k => equalRecursive(valueA[k], valueB[k]))\n  )\n}\n", "import {\n  node,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\n\nexport const childrenToNodes = (\n  element: Element | ChildNode,\n) => {\n  const abstractChildNodes: NodeContent[] = []\n  for (let i = 0; i < element.childNodes.length; i++) {\n    const childNode = element.childNodes[i]\n    if (childNode instanceof Text) {\n      abstractChildNodes.push(\n        childNode.textContent ?? ''\n      )\n    } else {\n      let attributes: NodeAttributes = {}\n      for (let i = 0; i < (childNode as Element).attributes.length; i++) {\n        const attribute = (childNode as Element).attributes[i]\n        attributes[attribute.name] = attribute.value\n      }\n\n      abstractChildNodes.push(\n        node(\n          childNode.nodeName,\n          attributes,\n          childrenToNodes(childNode),\n        )\n      )\n    }\n  }\n  return abstractChildNodes\n}\n", "export const proxify = (\n  root: Record<string, any>,\n  onChange: () => void\n) => {\n  const map = new WeakMap()\n\n  const handler = {\n    deleteProperty: (\n      target: Record<string, any>,\n      key: string,\n    ) => {\n      if (Reflect.has(target, key)) {\n        const value = target[key]\n        if (\n          typeof value === 'object'\n          && value\n          && map.has(value)\n        ) {\n          map.get(value).revoke()\n        }\n\n        const deleted = Reflect.deleteProperty(target, key)\n        if (deleted) {\n          onChange()\n        }\n        return deleted\n      }\n      return true\n    },\n\n    set: (\n      target: Record<string, any>,\n      key: string,\n      value: any,\n    ) => {\n      const existingValue = target[key]\n      if (existingValue !== value) {\n        if (\n          typeof existingValue === 'object'\n          && existingValue\n          && map.has(existingValue)\n        ) {\n          map.get(existingValue).revoke()\n        }\n\n        target[key] = (\n          typeof value === 'object'\n            && value\n            ? (\n              map.has(value)\n                ? map.get(value).proxy\n                : createProxy(value)\n            )\n            : value\n        )\n\n        onChange()\n      }\n      return true\n    }\n  }\n\n  const createProxy = (\n    target: Record<string, any>\n  ): Record<string, any> => {\n    if (map.has(target)) {\n      return map.get(target).proxy\n    }\n\n    for (const key in target) {\n      const value = target[key]\n      if (\n        value\n        && typeof value === 'object'\n      ) {\n        target[key] = createProxy(value)\n      }\n    }\n\n    const revocable = Proxy.revocable(target, handler)\n    map.set(target, revocable)\n    return revocable.proxy\n  }\n\n  return createProxy(root)\n}\n", "import {\n  arrayify,\n} from '@doars/staark-common/src/array.js'\nimport {\n  cloneRecursive\n} from '@doars/staark-common/src/clone.js'\nimport {\n  equalRecursive,\n} from '@doars/staark-common/src/compare.js'\nimport {\n  childrenToNodes,\n} from '@doars/staark-common/src/element.js'\nimport {\n  MemoAbstract,\n  MemoFunction,\n} from '@doars/staark-common/src/memo.js'\nimport {\n  NodeAbstract,\n  NodeAttributes,\n  NodeAttributeListener,\n  NodeContent,\n} from '@doars/staark-common/src/node.js'\nimport {\n  proxify,\n} from '../utilities/proxy.js'\n\nexport type GenericFunction<DataType, ReturnType> = (\n  argument: DataType\n) => ReturnType\n\nexport type GenericFunctionUnknown = (\n) => unknown\n\ntype MemoData = {\n  c: NodeContent[],\n  m: any,\n  r: MemoFunction,\n}\n\nexport type ViewFunction = (\n  state: Record<string, any>,\n) => NodeContent[] | NodeContent\n\nconst MATCH_CAPITALS = /[A-Z]+(?![a-z])|[A-Z]/g\nconst HYPHENATE = (\n  part: string,\n  offset: number,\n) => (offset ? '-' : '') + part\n\nexport const mount = (\n  rootElement: HTMLElement | Element | string,\n  renderView: ViewFunction,\n  initialState?: Record<string, any> | string,\n  oldAbstractTree?: NodeContent[] | string,\n): undefined | [GenericFunction<string[], void>, GenericFunctionUnknown, Record<string, any>] => {\n  if (typeof (initialState) === 'string') {\n    initialState = JSON.parse(initialState) as Record<string, any>\n  }\n  initialState ??= {}\n  let proxyChanged = true\n  const triggerUpdate = (\n  ): void => {\n    if (!proxyChanged) {\n      proxyChanged = true\n      Promise.resolve()\n        .then(updateAbstracts)\n    }\n  }\n  let state = (\n    Object.getPrototypeOf(initialState) === Proxy.prototype\n      ? initialState\n      : proxify(\n        initialState,\n        triggerUpdate,\n      )\n  )\n\n  const updateAttributes = (\n    element: Element,\n    newAttributes?: NodeAttributes,\n    oldAttributes?: NodeAttributes,\n  ): void => {\n    if (newAttributes) {\n      for (const name in newAttributes) {\n        let value = newAttributes[name]\n        if (value) {\n          const type = typeof (value)\n          if (type === 'function') {\n            // Wrap listeners so comparisons can be done between updates.\n            if (\n              oldAttributes\n              && oldAttributes[name]\n            ) {\n              if ((oldAttributes[name] as NodeAttributeListener).f === value) {\n                continue\n              }\n              element.removeEventListener(\n                name,\n                oldAttributes[name] as NodeAttributeListener,\n              )\n            }\n\n            const listener: NodeAttributeListener = newAttributes[name] = (\n              function (event: Event) {\n                (value as NodeAttributeListener)(event, state)\n              } as NodeAttributeListener\n            )\n            listener.f = (value as NodeAttributeListener)\n\n            element.addEventListener(\n              name,\n              listener,\n            )\n          } else {\n            if (name === 'class') {\n              if (typeof (value) === 'object') {\n                if (Array.isArray(value)) {\n                  value = value.join(' ')\n                } else {\n                  let classNames: string = ''\n                  for (const className in value) {\n                    if (value[className]) {\n                      classNames += ' ' + className\n                    }\n                  }\n                  value = classNames\n                }\n              }\n              element.className = value as string\n            } else if (name === 'style') {\n              if (typeof (value) === 'object') {\n                if (Array.isArray(value)) {\n                  for (const style of value) {\n                    const [styleProperty, ...styleValue] = (style as string).split(':');\n                    (element as HTMLElement).style.setProperty(\n                      styleProperty,\n                      styleValue.join(':'),\n                    )\n                  }\n                } else {\n                  for (let styleProperty in value) {\n                    let styleValue: boolean | string | number | (boolean | string | number)[] = value[styleProperty]\n\n                    // Convert to kebab case.\n                    styleProperty = styleProperty\n                      .replace(MATCH_CAPITALS, HYPHENATE)\n                      .toLowerCase()\n\n                    if (Array.isArray(styleValue)) {\n                      styleValue = styleValue.join(' ')\n                    }\n\n                    (element as HTMLElement).style.setProperty(\n                      styleProperty,\n                      styleValue.toString(),\n                    )\n                  }\n                }\n              }\n            } else {\n              // Ensure it is of type string.\n              if (type === 'boolean') {\n                if (!value) {\n                  element.removeAttribute(name)\n                  continue\n                }\n                value = 'true'\n              } else if (type !== 'string') {\n                value = value.toString()\n              }\n\n              if (\n                name === 'value'\n                && (element as HTMLInputElement).value !== value\n              ) {\n                // Update value separately as well.\n                (element as HTMLInputElement).value = value as string\n                // Don't dispatch a change event, the re-rendering should update everything: element.dispatchEvent(new Event('change'))\n              } else if (name === 'checked') {\n                (element as HTMLInputElement).checked = newAttributes[name] as boolean\n                // Don't dispatch a change event, the re-rendering should update everything: element.dispatchEvent(new Event('change'))\n              }\n\n              element.setAttribute(name, (value as string))\n            }\n          }\n        }\n      }\n    }\n\n    // Cleanup old attributes.\n    if (oldAttributes) {\n      for (const name in oldAttributes) {\n        const value = oldAttributes[name]\n        if (\n          !newAttributes\n          || !newAttributes[name]\n        ) {\n          if (typeof (value) === 'function') {\n            element.removeEventListener(\n              name,\n              oldAttributes[name] as NodeAttributeListener,\n            )\n          } else {\n            if (name === 'value') {\n              // Reset value separately.\n              (element as HTMLInputElement).value = ''\n              // Don't dispatch the input change event, the rerendering should update everything: element.dispatchEvent(new Event('change'))\n            } else if (name === 'checked') {\n              (element as HTMLInputElement).checked = false\n            }\n            element.removeAttribute(name)\n          }\n        }\n      }\n    }\n  }\n\n  let oldMemoMap: WeakMap<MemoFunction, MemoData> = new WeakMap()\n  let newMemoMap: WeakMap<MemoFunction, MemoData> = new WeakMap()\n  const updateElementTree = (\n    element: Element,\n    newChildAbstracts?: NodeContent[],\n    oldChildAbstracts?: NodeContent[],\n    elementAbstract?: NodeContent,\n  ): void => {\n    let newIndex = 0\n    let newCount = 0\n    if (newChildAbstracts) {\n      for (; newIndex < newChildAbstracts.length; newIndex++) {\n        const newAbstract = newChildAbstracts[newIndex]\n\n        // Handle memoization.\n        if ((newAbstract as MemoAbstract).r) {\n          let match: MemoData | undefined = oldMemoMap.get(\n            (newAbstract as MemoAbstract).r,\n          )\n          if (\n            !match\n            || !equalRecursive(match.m, (newAbstract as MemoAbstract).m)\n          ) {\n            match = {\n              c: arrayify(\n                (newAbstract as MemoAbstract).r(\n                  state,\n                  (newAbstract as MemoAbstract).m,\n                )\n              ),\n              m: (newAbstract as MemoAbstract).m,\n              r: (newAbstract as MemoAbstract).r,\n            } as MemoData\n          }\n\n          newMemoMap.set((newAbstract as MemoAbstract).r, match)\n\n          // Splice nodes into the tree and re-run the loop again.\n          newChildAbstracts.splice(\n            newIndex,\n            1,\n            ...cloneRecursive(\n              match.c,\n            ),\n          )\n          // NOTE: Preferably we would skip re-rendering when the nodes were memoized, but because those nodes might have morphed we'll have to check. So we re-process the node again that was just inserted in.\n          // We could have the resolve memoization return whether it was re-rendered, but this also means the nodes are not allowed to be re-used when morphing the DOM and this needs to be prevented by marking them as such.\n          newIndex--\n          continue\n        }\n\n        // Try to find the matching old abstract.\n        let matched = false\n        if (oldChildAbstracts) {\n          for (let oldIndex = newIndex - newCount; oldIndex < oldChildAbstracts.length; oldIndex++) {\n            const oldAbstract = oldChildAbstracts[oldIndex]\n            if (\n              (\n                (oldAbstract as NodeAbstract).t\n                && (newAbstract as NodeAbstract).t === (oldAbstract as NodeAbstract).t\n              )\n              || (\n                !(oldAbstract as NodeAbstract).t\n                && !(newAbstract as NodeAbstract).t\n              )\n            ) {\n              matched = true\n\n              if (newIndex !== (oldIndex + newCount)) {\n                // Move node in dom.\n                element.insertBefore(\n                  element.childNodes[oldIndex + newCount],\n                  element.childNodes[newIndex],\n                )\n                // Move node in abstract tree.\n                oldChildAbstracts.splice(\n                  newIndex - newCount,\n                  0,\n                  ...oldChildAbstracts.splice(\n                    oldIndex,\n                    1,\n                  )\n                )\n              }\n\n              if ((newAbstract as NodeAbstract).t) {\n                updateAttributes(\n                  (element.childNodes[newIndex] as Element),\n                  (newAbstract as NodeAbstract).a,\n                  (oldAbstract as NodeAbstract).a,\n                )\n                updateElementTree(\n                  (element.childNodes[newIndex] as Element),\n                  (newAbstract as NodeAbstract).c,\n                  (oldAbstract as NodeAbstract).c,\n                  oldAbstract,\n                )\n              } else {\n                if (\n                  (oldAbstract as string) !== (newAbstract as string)\n                ) {\n                  element.childNodes[newIndex].textContent = (newAbstract as string)\n                }\n              }\n              break\n            }\n          }\n        }\n\n        if (!matched) {\n          let childElement: Element | string\n          if ((newAbstract as NodeAbstract).t) {\n            childElement = document.createElement(\n              (newAbstract as NodeAbstract).t\n            )\n\n            if ((newAbstract as NodeAbstract).a) {\n              updateAttributes(\n                childElement,\n                (newAbstract as NodeAbstract).a,\n              )\n            }\n            if ((newAbstract as NodeAbstract).c) {\n              updateElementTree(\n                childElement,\n                (newAbstract as NodeAbstract).c,\n              )\n            }\n\n            const insertAdjacentElement = (\n              element: Node,\n              elementAbstract?: NodeContent | null,\n              position?: InsertPosition,\n            ) => {\n              if (\n                position\n                && (\n                  !elementAbstract\n                  || (elementAbstract as NodeAbstract).t\n                )\n              ) {\n                (element as Element)\n                  .insertAdjacentElement(\n                    position,\n                    childElement as Element,\n                  )\n              } else {\n                // Otherwise the position is always 'beforebegin'.\n                (element.parentNode as Element)\n                  .insertBefore(\n                    childElement as Element,\n                    element,\n                  )\n              }\n            }\n            if (newIndex === 0) {\n              insertAdjacentElement(\n                element,\n                elementAbstract,\n                'afterbegin',\n              )\n            } else if ((oldChildAbstracts?.length ?? 0) + newCount > newIndex) {\n              insertAdjacentElement(\n                (element.childNodes[newIndex] as Node),\n                // (oldChildAbstracts as NodeContent[])[newIndex + newCount],\n                // 'beforebegin',\n              )\n            } else {\n              insertAdjacentElement(\n                element,\n                elementAbstract,\n                'beforeend',\n              )\n            }\n          } else {\n            const insertAdjacentText = (\n              element: Node,\n              elementAbstract?: NodeContent | null,\n              position?: InsertPosition,\n            ) => {\n              if (\n                position\n                && (\n                  !elementAbstract\n                  || (elementAbstract as NodeAbstract).t\n                )\n              ) {\n                (element as Element)\n                  .insertAdjacentText(\n                    position,\n                    newAbstract as string,\n                  )\n              } else {\n                // Otherwise the position is always 'beforebegin'.\n                (element.parentNode as Element)\n                  .insertBefore(\n                    document.createTextNode(newAbstract as string),\n                    element,\n                  )\n              }\n            }\n            if (newIndex === 0) {\n              insertAdjacentText(\n                element,\n                elementAbstract,\n                'afterbegin',\n              )\n            } else if ((oldChildAbstracts?.length ?? 0) + newCount > newIndex) {\n              insertAdjacentText(\n                element.childNodes[newIndex] as Node,\n                // (oldChildAbstracts as NodeContent[])[newIndex + newCount],\n                // 'beforebegin',\n              )\n            } else {\n              insertAdjacentText(\n                element,\n                elementAbstract,\n                'beforeend',\n              )\n            }\n          }\n          newCount++\n        }\n      }\n    }\n\n    const elementLength = (oldChildAbstracts?.length ?? 0) + newCount\n    if (elementLength >= newIndex) {\n      for (let i = elementLength - 1; i >= newIndex; i--) {\n        element.childNodes[i].remove()\n      }\n    }\n  }\n\n  const _rootElement = (\n    typeof (rootElement) === 'string'\n      ? (\n        document.querySelector(rootElement)\n        || document.body.appendChild(\n          document.createElement('div')\n        )\n      )\n      : rootElement\n  )\n\n  if (typeof (oldAbstractTree) === 'string') {\n    try {\n      oldAbstractTree = JSON.parse(oldAbstractTree) as NodeContent[]\n    } catch (error) {\n      oldAbstractTree = undefined\n    }\n  }\n  oldAbstractTree ??= childrenToNodes(_rootElement)\n\n  let active: boolean = true,\n    updating: boolean = false\n  const updateAbstracts = (\n  ): void => {\n    if (\n      active\n      && !updating\n      // Only update if changes to the state have been made.\n      && proxyChanged\n    ) {\n      updating = true\n      proxyChanged = false\n\n      let newAbstractTree = arrayify(\n        renderView(state),\n      )\n      updateElementTree(\n        _rootElement,\n        newAbstractTree,\n        oldAbstractTree as NodeContent[],\n      )\n      // Store tree for next update\n      oldAbstractTree = newAbstractTree\n      oldMemoMap = newMemoMap\n      newMemoMap = new WeakMap()\n\n      updating = false\n      if (proxyChanged) {\n        throw new Error('update during render')\n      }\n    }\n  }\n  updateAbstracts()\n\n  return [\n    triggerUpdate,\n    (): void => {\n      if (active) {\n        active = false\n\n        for (let i = _rootElement.childNodes.length - 1; i >= 0; i--) {\n          _rootElement.childNodes[i].remove()\n        }\n      }\n    },\n    state,\n  ]\n}\n", "import { iife } from '../../../.scripts/iife.js'\n\nimport { memo } from '@doars/staark-common/src/memo.js'\nimport { node } from '@doars/staark-common/src/node.js'\nimport { mount } from './library/mount.js'\n\niife([\n  'staark',\n], {\n  memo,\n  mount,\n  node,\n})\n"],
  "mappings": "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",
  "names": ["iife", "path", "data", "subject", "i", "marker", "memo", "render", "memory", "marker", "node", "type", "attributesOrContents", "contents", "marker", "arrayify", "data", "cloneRecursive", "value", "clone", "key", "equalRecursive", "valueA", "valueB", "keys", "k", "childrenToNodes", "element", "_a", "abstractChildNodes", "i", "childNode", "attributes", "attribute", "node", "proxify", "root", "onChange", "map", "handler", "target", "key", "value", "deleted", "existingValue", "createProxy", "revocable", "MATCH_CAPITALS", "HYPHENATE", "part", "offset", "mount", "rootElement", "renderView", "initialState", "oldAbstractTree", "proxyChanged", "triggerUpdate", "updateAbstracts", "state", "proxify", "updateAttributes", "element", "newAttributes", "oldAttributes", "name", "value", "type", "listener", "event", "classNames", "className", "style", "styleProperty", "styleValue", "oldMemoMap", "newMemoMap", "updateElementTree", "newChildAbstracts", "oldChildAbstracts", "elementAbstract", "_a", "_b", "_c", "newIndex", "newCount", "newAbstract", "match", "equalRecursive", "arrayify", "cloneRecursive", "matched", "oldIndex", "oldAbstract", "childElement", "insertAdjacentElement", "position", "insertAdjacentText", "elementLength", "_rootElement", "error", "childrenToNodes", "active", "updating", "newAbstractTree", "i", "iife", "memo", "mount", "node"]
}
