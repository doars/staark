{
  "version": 3,
  "sources": ["../../../.scripts/iife.ts", "../../staark-common/src/marker.ts", "../../staark-common/src/memo.ts", "../../staark-common/src/array.ts", "../../staark-common/src/node.ts", "../../staark-common/src/clone.ts", "../../staark-common/src/compare.ts", "../../staark-common/src/element.ts", "../src/utilities/proxy.ts", "../src/library/mount.ts", "../src/index.base.iife.ts"],
  "sourcesContent": ["export const iife = function (\n  path: Array<string>,\n  data: any\n) {\n  let subject: Record<string, any> = window\n  for (let i = 0; i < path.length - 1; i++) {\n    if (\n      typeof (subject[path[i]]) !== 'object'\n      || !Array.isArray(subject[path[i]])\n    ) {\n      subject[path[i]] = {}\n    }\n    subject = subject[path[i]]\n  }\n  subject[path[path.length - 1]] = data\n}\n", "export const marker = 'n'\n", "import {\n  marker,\n} from './marker.js'\nimport { NodeContent } from './node.js'\n\nexport type MemoFunction = (\n  state: Record<string, any>,\n  memory: any,\n) => NodeContent[] | NodeContent\n\nexport type MemoAbstract = {\n  _: Symbol,\n  // Compare data\n  m: any,\n  // Render function\n  r: MemoFunction,\n}\n\nexport const memo = (\n  render: MemoFunction,\n  memory: any,\n) => ({\n  _: marker,\n  r: render,\n  m: memory,\n})\n", "/**\n * Ensure the data is an array of not already. Non-truthy values are converted to empty arrays.\n * @param data Data to arrify\n * @returns An array with the data.\n */\nexport const arrayify = <T>(\n  data: T[] | T,\n): T[] => arrayifyOrUndefined(data) ?? []\n\n/**\n * Ensure the data is an array of not already. Non-truthy values are converted to undefined.\n * @param data Data to arrify\n * @returns An array with the data or undefined.\n */\nexport const arrayifyOrUndefined = <T>(\n  data: T[] | T,\n): T[] | undefined => (\n  data\n    ? Array.isArray(data)\n      ? data :\n      [data,]\n    : undefined\n)\n", "import {\n  arrayifyOrUndefined\n} from './array.js'\nimport {\n  marker,\n} from './marker.js'\nimport {\n  MemoAbstract,\n} from './memo.js'\n\ntype _NodeAttributeListener = {\n  (event: Event, state: Record<string, any>): unknown\n  (event: Event): unknown\n  (): unknown\n}\n\nexport interface NodeAttributeListener extends _NodeAttributeListener {\n  f?: _NodeAttributeListener\n}\n\nexport type NodeAttributes =\n  Record<string,\n    boolean |\n    null |\n    number |\n    string |\n    (number | string)[] |\n    NodeAttributeListener |\n    Record<string,\n      boolean | number | string\n    >\n  >\n\nexport type NodeContent =\n  string |\n  MemoAbstract |\n  NodeAbstract\n\nexport type NodeAbstract = {\n  // Discriminator\n  _: string,\n  // Attributes\n  a?: NodeAttributes\n  // Content\n  c?: NodeContent[]\n  // Node type\n  t: string\n}\n\nexport const node = (\n  type: string,\n  attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n  contents?: NodeContent[] | NodeContent,\n): NodeAbstract => {\n  if (\n    typeof (attributesOrContents) !== 'object'\n    || (attributesOrContents as NodeAbstract)._ === marker\n    || Array.isArray(attributesOrContents)\n  ) {\n    contents = attributesOrContents as NodeContent\n    attributesOrContents = undefined\n  }\n\n  return {\n    _: marker,\n    a: attributesOrContents as (NodeAttributes | undefined),\n    c: arrayifyOrUndefined(contents) as NodeContent[] | undefined,\n    t: type.toUpperCase(),\n  }\n}\n", "/**\n * Creates a deep clone of a javascript value.\n * @param value Data to clone.\n * @returns Clone of the data.\n */\nexport const cloneRecursive = (\n  value: any,\n) => {\n  if (typeof (value) === 'object') {\n    const clone: Record<any, any> = Array.isArray(value) ? [] : {}\n    for (const key in value) {\n      clone[key] = cloneRecursive(value[key])\n    }\n    return clone\n  }\n  return value\n}\n", "export const equalRecursive = (\n  valueA: any,\n  valueB: any,\n): boolean => {\n  if (valueA === valueB) {\n    return true\n  }\n\n  if (\n    !valueA\n    || !valueB\n    || typeof valueA !== 'object'\n    || typeof valueB !== 'object'\n  ) {\n    return valueA === valueB\n  }\n\n  if (\n    valueA instanceof Date) {\n    return (\n      valueB instanceof Date\n      && valueA.getTime() === valueB.getTime()\n    )\n  }\n\n  // if (valueA.prototype !== valueB.prototype) {\n  //   return false\n  // }\n\n  const keys = Object.keys(valueA)\n  return (\n    keys.length === Object.keys(valueB).length\n    && keys.every(k => equalRecursive(valueA[k], valueB[k]))\n  )\n}\n", "import {\n  node,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\n\nexport const childrenToNodes = (\n  element: Element | ChildNode,\n) => {\n  const abstractChildNodes: NodeContent[] = []\n  for (const childNode of element.childNodes) {\n    if (childNode instanceof Text) {\n      abstractChildNodes.push(\n        childNode.textContent ?? ''\n      )\n    } else {\n      const elementChild = childNode as Element\n      const attributes: NodeAttributes = {}\n      for (const attribute of elementChild.attributes) {\n        attributes[attribute.name] = attribute.value\n      }\n\n      abstractChildNodes.push(\n        node(\n          childNode.nodeName,\n          attributes,\n          childrenToNodes(childNode),\n        )\n      )\n    }\n  }\n  return abstractChildNodes\n}\n", "export const proxify = (\n  root: Record<string, any>,\n  onChange: () => void\n) => {\n  const map = new WeakMap()\n\n  const handler = {\n    deleteProperty: (\n      target: Record<string, any>,\n      key: string,\n    ) => {\n      if (Reflect.has(target, key)) {\n        const value = target[key]\n        if (\n          typeof value === 'object'\n          && value\n          && map.has(value)\n        ) {\n          map.get(value).revoke()\n        }\n\n        const deleted = Reflect.deleteProperty(target, key)\n        if (deleted) {\n          onChange()\n        }\n        return deleted\n      }\n      return true\n    },\n\n    set: (\n      target: Record<string, any>,\n      key: string,\n      value: any,\n    ) => {\n      const existingValue = target[key]\n      if (existingValue !== value) {\n        if (\n          typeof existingValue === 'object'\n          && existingValue\n          && map.has(existingValue)\n        ) {\n          map.get(existingValue).revoke()\n        }\n\n        target[key] = (\n          typeof value === 'object'\n            && value\n            ? (\n              map.has(value)\n                ? map.get(value).proxy\n                : createProxy(value)\n            )\n            : value\n        )\n\n        onChange()\n      }\n      return true\n    }\n  }\n\n  const createProxy = (\n    target: Record<string, any>\n  ): Record<string, any> => {\n    if (map.has(target)) {\n      return map.get(target).proxy\n    }\n\n    for (const key in target) {\n      const value = target[key]\n      if (\n        value\n        && typeof value === 'object'\n      ) {\n        target[key] = createProxy(value)\n      }\n    }\n\n    const revocable = Proxy.revocable(target, handler)\n    map.set(target, revocable)\n    return revocable.proxy\n  }\n\n  return createProxy(root)\n}\n", "import {\n  arrayifyOrUndefined,\n} from '@doars/staark-common/src/array.js'\nimport {\n  cloneRecursive\n} from '@doars/staark-common/src/clone.js'\nimport {\n  equalRecursive,\n} from '@doars/staark-common/src/compare.js'\nimport {\n  childrenToNodes,\n} from '@doars/staark-common/src/element.js'\nimport {\n  MemoAbstract,\n  MemoFunction,\n} from '@doars/staark-common/src/memo.js'\nimport {\n  NodeAbstract,\n  NodeAttributes,\n  NodeAttributeListener,\n  NodeContent,\n} from '@doars/staark-common/src/node.js'\nimport {\n  proxify,\n} from '../utilities/proxy.js'\n\nexport type GenericFunction<DataType, ReturnType> = (\n  argument: DataType\n) => ReturnType\n\nexport type GenericFunctionUnknown = (\n) => unknown\n\ntype MemoData = {\n  c: NodeContent[],\n  m: any,\n  r: MemoFunction,\n}\n\nexport type ViewFunction = (\n  state: Record<string, any>,\n) => NodeContent[] | NodeContent\n\nconst MATCH_CAPITALS = /[A-Z]+(?![a-z])|[A-Z]/g\nconst HYPHENATE = (\n  part: string,\n  offset: number,\n) => (offset ? '-' : '') + part\n\nexport const mount = (\n  rootElement: HTMLElement | Element | string,\n  renderView: ViewFunction,\n  initialState?: Record<string, any> | string,\n  oldAbstractTree?: NodeContent[] | string,\n): undefined | [GenericFunction<string[], void>, GenericFunctionUnknown, Record<string, any>] => {\n  if (typeof (initialState) === 'string') {\n    initialState = JSON.parse(initialState) as Record<string, any>\n  }\n  initialState ??= {}\n  let updatePromise: Promise<void> | null = null\n  const triggerUpdate = (\n  ): Promise<void> | null => {\n    if (!updatePromise) {\n      updatePromise = Promise.resolve()\n        .then(updateAbstracts)\n    }\n    return updatePromise\n  }\n  let state = (\n    Object.getPrototypeOf(initialState) === Proxy.prototype\n      ? initialState\n      : proxify(\n        initialState,\n        triggerUpdate,\n      )\n  )\n\n  const updateAttributes = (\n    element: Element,\n    newAttributes?: NodeAttributes,\n    oldAttributes?: NodeAttributes,\n  ): void => {\n    if (newAttributes) {\n      for (const name in newAttributes) {\n        let value = newAttributes[name]\n        if (value) {\n          const type = typeof (value)\n          if (type === 'function') {\n            // Wrap listeners so comparisons can be done between updates.\n            const oldValue = oldAttributes?.[name] as NodeAttributeListener | undefined\n            if (oldValue?.f !== (value as NodeAttributeListener).f) {\n              if (oldValue) {\n                element.removeEventListener(\n                  name,\n                  oldValue as NodeAttributeListener,\n                )\n              }\n\n              const listener: NodeAttributeListener = newAttributes[name] = (\n                (event: Event) => {\n                  (value as NodeAttributeListener)(event, state)\n                }\n              ) as NodeAttributeListener\n              listener.f = (value as NodeAttributeListener)\n\n              element.addEventListener(\n                name,\n                listener,\n              )\n            }\n          } else {\n            if (name === 'class') {\n              if (typeof (value) === 'object') {\n                if (Array.isArray(value)) {\n                  value = value.join(' ')\n                } else {\n                  let classNames: string = ''\n                  for (const className in value) {\n                    if (value[className]) {\n                      classNames += ' ' + className\n                    }\n                  }\n                  value = classNames\n                }\n              }\n              element.className = value as string\n            } else if (\n              name === 'style'\n              && typeof (value) === 'object'\n            ) {\n              // Apply updated styles.\n              for (let styleName in value) {\n                let styleValue = (\n                  value as Record<string, boolean | string | null | undefined | number | (boolean | string | number)[]>\n                )[styleName]\n\n                // Convert to kebab case.\n                styleName = styleName\n                  .replace(MATCH_CAPITALS, HYPHENATE)\n                  .toLowerCase()\n\n                if (Array.isArray(styleValue)) {\n                  styleValue = styleValue.join(' ')\n                }\n\n                (element as HTMLElement).style.setProperty(\n                  styleName,\n                  styleValue as string,\n                )\n              }\n\n              // Remove old styles.\n              if (\n                oldAttributes\n                && oldAttributes[name]\n                && typeof (oldAttributes[name]) === 'object'\n                && !Array.isArray(oldAttributes[name])\n              ) {\n                for (let styleName in oldAttributes[name]) {\n                  if (!(styleName in value)) {\n                    styleName = styleName\n                      .replace(MATCH_CAPITALS, HYPHENATE)\n                      .toLowerCase();\n\n                    (element as HTMLElement).style.removeProperty(\n                      styleName,\n                    )\n                  }\n                }\n              }\n            } else {\n              // Ensure it is of type string.\n              if (value === true) {\n                value = 'true'\n              } else if (type !== 'string') {\n                value = value.toString()\n              }\n\n              // Setting attribute will automatically update the elements checked and value state.\n              // if (\n              //   name === 'value'\n              //   && (element as HTMLInputElement).value !== value\n              // ) {\n              // (element as HTMLInputElement).value = value as string\n              // Don't dispatch a change event, the re-rendering should update everything: element.dispatchEvent(new Event('change'))\n              // } else if (name === 'checked') {\n              //   (element as HTMLInputElement).checked = !!value\n              // Don't dispatch a change event, the re-rendering should update everything: element.dispatchEvent(new Event('change'))\n              // }\n\n              element.setAttribute(name, (value as string))\n            }\n          }\n        }\n      }\n    }\n\n    // Cleanup old attributes.\n    if (oldAttributes) {\n      for (const name in oldAttributes) {\n        const value = oldAttributes[name]\n        if (\n          !newAttributes\n          || !newAttributes[name]\n        ) {\n          if (typeof (value) === 'function') {\n            element.removeEventListener(\n              name,\n              oldAttributes[name] as NodeAttributeListener,\n            )\n          } else if (name === 'class') {\n            element.className = ''\n          } else if (name === 'style') {\n            (element as HTMLElement).style.cssText = ''\n          } else {\n            // Setting attribute will automatically update the elements checked and value state.\n            // if (name === 'value') {\n            // (element as HTMLInputElement).value = ''\n            // Don't dispatch the input change event, the rerendering should update everything: element.dispatchEvent(new Event('change'))\n            // } else if (name === 'checked') {\n            //   (element as HTMLInputElement).checked = false\n            // Don't dispatch a change event, the re-rendering should update everything: element.dispatchEvent(new Event('change'))\n            // }\n\n            element.removeAttribute(name)\n          }\n        }\n      }\n    }\n  }\n\n  let oldMemoMap: WeakMap<MemoFunction, MemoData> = new WeakMap()\n  let newMemoMap: WeakMap<MemoFunction, MemoData> = new WeakMap()\n  const updateElementTree = (\n    element: Element,\n    newChildAbstracts?: NodeContent[],\n    oldChildAbstracts?: NodeContent[],\n    elementAbstract?: NodeContent,\n  ): void => {\n    let newIndex = 0\n    let newCount = 0\n    if (newChildAbstracts) {\n      for (; newIndex < newChildAbstracts.length; newIndex++) {\n        const newAbstract = newChildAbstracts[newIndex]\n\n        // Handle memoization.\n        if ((newAbstract as MemoAbstract).r) {\n          let match: MemoData | undefined = oldMemoMap.get(\n            (newAbstract as MemoAbstract).r,\n          )\n          if (\n            !match\n            || !equalRecursive(match.m, (newAbstract as MemoAbstract).m)\n          ) {\n            match = {\n              c: arrayifyOrUndefined(\n                (newAbstract as MemoAbstract).r(\n                  state,\n                  (newAbstract as MemoAbstract).m,\n                )\n              ),\n              m: (newAbstract as MemoAbstract).m,\n              r: (newAbstract as MemoAbstract).r,\n            } as MemoData\n          }\n\n          newMemoMap.set((newAbstract as MemoAbstract).r, match)\n\n          // Splice nodes into the tree and re-run the loop again.\n          newChildAbstracts.splice(\n            newIndex,\n            1,\n            ...cloneRecursive(\n              match.c,\n            ),\n          )\n          // NOTE: Preferably we would skip re-rendering when the nodes were memoized, but because those nodes might have morphed we'll have to check. So we re-process the node again that was just inserted in.\n          // We could have the resolve memoization return whether it was re-rendered, but this also means the nodes are not allowed to be re-used when morphing the DOM and this needs to be prevented by marking them as such.\n          newIndex--\n          continue\n        }\n\n        // Try to find the matching old abstract.\n        let matched = false\n        if (oldChildAbstracts) {\n          for (let oldIndex = newIndex - newCount; oldIndex < oldChildAbstracts.length; oldIndex++) {\n            const oldAbstract = oldChildAbstracts[oldIndex]\n            if (\n              (\n                (oldAbstract as NodeAbstract).t\n                && (newAbstract as NodeAbstract).t === (oldAbstract as NodeAbstract).t\n              )\n              || (\n                !(oldAbstract as NodeAbstract).t\n                && !(newAbstract as NodeAbstract).t\n              )\n            ) {\n              matched = true\n\n              if (newIndex !== (oldIndex + newCount)) {\n                // Move node in dom.\n                element.insertBefore(\n                  element.childNodes[oldIndex + newCount],\n                  element.childNodes[newIndex],\n                )\n                // Move node in abstract tree.\n                oldChildAbstracts.splice(\n                  newIndex - newCount,\n                  0,\n                  ...oldChildAbstracts.splice(\n                    oldIndex,\n                    1,\n                  )\n                )\n              }\n\n              if ((newAbstract as NodeAbstract).t) {\n                updateAttributes(\n                  (element.childNodes[newIndex] as Element),\n                  (newAbstract as NodeAbstract).a,\n                  (oldAbstract as NodeAbstract).a,\n                )\n                updateElementTree(\n                  (element.childNodes[newIndex] as Element),\n                  (newAbstract as NodeAbstract).c,\n                  (oldAbstract as NodeAbstract).c,\n                  oldAbstract,\n                )\n              } else {\n                if (\n                  (oldAbstract as string) !== (newAbstract as string)\n                ) {\n                  element.childNodes[newIndex].textContent = (newAbstract as string)\n                }\n              }\n              break\n            }\n          }\n        }\n\n        if (!matched) {\n          let childElement: Element | string\n          if ((newAbstract as NodeAbstract).t) {\n            childElement = document.createElement(\n              (newAbstract as NodeAbstract).t\n            )\n\n            if ((newAbstract as NodeAbstract).a) {\n              updateAttributes(\n                childElement,\n                (newAbstract as NodeAbstract).a,\n              )\n            }\n            if ((newAbstract as NodeAbstract).c) {\n              updateElementTree(\n                childElement,\n                (newAbstract as NodeAbstract).c,\n              )\n            }\n\n            const insertAdjacentElement = (\n              element: Node,\n              elementAbstract?: NodeContent | null,\n              position?: InsertPosition,\n            ) => {\n              if (\n                position\n                && (\n                  !elementAbstract\n                  || (elementAbstract as NodeAbstract).t\n                )\n              ) {\n                (element as Element)\n                  .insertAdjacentElement(\n                    position,\n                    childElement as Element,\n                  )\n              } else {\n                // Otherwise the position is always 'beforebegin'.\n                (element.parentNode as Element)\n                  .insertBefore(\n                    childElement as Element,\n                    element,\n                  )\n              }\n            }\n            if (newIndex === 0) {\n              insertAdjacentElement(\n                element,\n                elementAbstract,\n                'afterbegin',\n              )\n            } else if ((oldChildAbstracts?.length ?? 0) + newCount > newIndex) {\n              insertAdjacentElement(\n                (element.childNodes[newIndex] as Node),\n                // (oldChildAbstracts as NodeContent[])[newIndex + newCount],\n                // 'beforebegin',\n              )\n            } else {\n              insertAdjacentElement(\n                element,\n                elementAbstract,\n                'beforeend',\n              )\n            }\n          } else {\n            const insertAdjacentText = (\n              element: Node,\n              elementAbstract?: NodeContent | null,\n              position?: InsertPosition,\n            ) => {\n              if (\n                position\n                && (\n                  !elementAbstract\n                  || (elementAbstract as NodeAbstract).t\n                )\n              ) {\n                (element as Element)\n                  .insertAdjacentText(\n                    position,\n                    newAbstract as string,\n                  )\n              } else {\n                // Otherwise the position is always 'beforebegin'.\n                (element.parentNode as Element)\n                  .insertBefore(\n                    document.createTextNode(newAbstract as string),\n                    element,\n                  )\n              }\n            }\n            if (newIndex === 0) {\n              insertAdjacentText(\n                element,\n                elementAbstract,\n                'afterbegin',\n              )\n            } else if ((oldChildAbstracts?.length ?? 0) + newCount > newIndex) {\n              insertAdjacentText(\n                element.childNodes[newIndex] as Node,\n                // (oldChildAbstracts as NodeContent[])[newIndex + newCount],\n                // 'beforebegin',\n              )\n            } else {\n              insertAdjacentText(\n                element,\n                elementAbstract,\n                'beforeend',\n              )\n            }\n          }\n          newCount++\n        }\n      }\n    }\n\n    const elementLength = (oldChildAbstracts?.length ?? 0) + newCount\n    if (elementLength >= newIndex) {\n      for (let i = elementLength - 1; i >= newIndex; i--) {\n        element.childNodes[i].remove()\n      }\n    }\n  }\n\n  const _rootElement = (\n    typeof (rootElement) === 'string'\n      ? (\n        document.querySelector(rootElement)\n        || document.body.appendChild(\n          document.createElement('div')\n        )\n      )\n      : rootElement\n  )\n\n  if (typeof (oldAbstractTree) === 'string') {\n    try {\n      oldAbstractTree = JSON.parse(oldAbstractTree) as NodeContent[]\n    } catch (error) {\n      oldAbstractTree = undefined\n    }\n  }\n  oldAbstractTree ??= childrenToNodes(_rootElement)\n\n  let active: boolean = true,\n    updating: boolean = false\n  const updateAbstracts = (\n  ): void => {\n    if (\n      active\n      && !updating\n      // Only update if changes to the state have been made.\n      && updatePromise\n    ) {\n      updating = true\n      updatePromise = null\n\n      let newAbstractTree = arrayifyOrUndefined(\n        renderView(state),\n      )\n      updateElementTree(\n        _rootElement,\n        newAbstractTree,\n        oldAbstractTree as NodeContent[],\n      )\n      // Store tree for next update.\n      oldAbstractTree = newAbstractTree\n      oldMemoMap = newMemoMap\n      newMemoMap = new WeakMap()\n\n      updating = false\n    }\n  }\n  // Trigger update first so the promise that is checked gets set.\n  triggerUpdate()\n  // Now perform initial update.\n  updateAbstracts()\n\n  return [\n    triggerUpdate,\n    (): void => {\n      if (active) {\n        active = false\n\n        for (let i = _rootElement.childNodes.length - 1; i >= 0; i--) {\n          _rootElement.childNodes[i].remove()\n        }\n      }\n    },\n    state,\n  ]\n}\n", "import { iife } from '../../../.scripts/iife.js'\n\nimport { memo } from '@doars/staark-common/src/memo.js'\nimport { node } from '@doars/staark-common/src/node.js'\nimport { mount } from './library/mount.js'\n\niife([\n  'staark',\n], {\n  memo,\n  mount,\n  node,\n})\n"],
  "mappings": ";;;AAAO,MAAM,OAAO,SAClB,MACA,MACA;AACA,QAAI,UAA+B;AACnC,aAAS,IAAI,GAAG,IAAI,KAAK,SAAS,GAAG,KAAK;AACxC,UACE,OAAQ,QAAQ,KAAK,CAAC,CAAC,MAAO,YAC3B,CAAC,MAAM,QAAQ,QAAQ,KAAK,CAAC,CAAC,CAAC,GAClC;AACA,gBAAQ,KAAK,CAAC,CAAC,IAAI,CAAC;AAAA,MACtB;AACA,gBAAU,QAAQ,KAAK,CAAC,CAAC;AAAA,IAC3B;AACA,YAAQ,KAAK,KAAK,SAAS,CAAC,CAAC,IAAI;AAAA,EACnC;;;ACfO,MAAM,SAAS;;;ACkBf,MAAM,OAAO,CAClB,QACA,YACI;AAAA,IACJ,GAAG;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,EACL;;;ACXO,MAAM,sBAAsB,CACjC,SAEA,OACI,MAAM,QAAQ,IAAI,IAChB,OACF,CAAC,IAAK,IACN;;;AC4BC,MAAM,OAAO,CAClB,MACA,sBACA,aACiB;AACjB,QACE,OAAQ,yBAA0B,YAC9B,qBAAsC,MAAM,UAC7C,MAAM,QAAQ,oBAAoB,GACrC;AACA,iBAAW;AACX,6BAAuB;AAAA,IACzB;AAEA,WAAO;AAAA,MACL,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG,oBAAoB,QAAQ;AAAA,MAC/B,GAAG,KAAK,YAAY;AAAA,IACtB;AAAA,EACF;;;AChEO,MAAM,iBAAiB,CAC5B,UACG;AACH,QAAI,OAAQ,UAAW,UAAU;AAC/B,YAAM,QAA0B,MAAM,QAAQ,KAAK,IAAI,CAAC,IAAI,CAAC;AAC7D,iBAAW,OAAO,OAAO;AACvB,cAAM,GAAG,IAAI,eAAe,MAAM,GAAG,CAAC;AAAA,MACxC;AACA,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;;;AChBO,MAAM,iBAAiB,CAC5B,QACA,WACY;AACZ,QAAI,WAAW,QAAQ;AACrB,aAAO;AAAA,IACT;AAEA,QACE,CAAC,UACE,CAAC,UACD,OAAO,WAAW,YAClB,OAAO,WAAW,UACrB;AACA,aAAO,WAAW;AAAA,IACpB;AAEA,QACE,kBAAkB,MAAM;AACxB,aACE,kBAAkB,QACf,OAAO,QAAQ,MAAM,OAAO,QAAQ;AAAA,IAE3C;AAMA,UAAM,OAAO,OAAO,KAAK,MAAM;AAC/B,WACE,KAAK,WAAW,OAAO,KAAK,MAAM,EAAE,UACjC,KAAK,MAAM,OAAK,eAAe,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;AAAA,EAE3D;;;AC5BO,MAAM,kBAAkB,CAC7B,YACG;AARL;AASE,UAAM,qBAAoC,CAAC;AAC3C,eAAW,aAAa,QAAQ,YAAY;AAC1C,UAAI,qBAAqB,MAAM;AAC7B,2BAAmB;AAAA,WACjB,eAAU,gBAAV,YAAyB;AAAA,QAC3B;AAAA,MACF,OAAO;AACL,cAAM,eAAe;AACrB,cAAM,aAA6B,CAAC;AACpC,mBAAW,aAAa,aAAa,YAAY;AAC/C,qBAAW,UAAU,IAAI,IAAI,UAAU;AAAA,QACzC;AAEA,2BAAmB;AAAA,UACjB;AAAA,YACE,UAAU;AAAA,YACV;AAAA,YACA,gBAAgB,SAAS;AAAA,UAC3B;AAAA,QACF;AAAA,MACF;AAAA,IACF;AACA,WAAO;AAAA,EACT;;;AChCO,MAAM,UAAU,CACrB,MACA,aACG;AACH,UAAM,MAAM,oBAAI,QAAQ;AAExB,UAAM,UAAU;AAAA,MACd,gBAAgB,CACd,QACA,QACG;AACH,YAAI,QAAQ,IAAI,QAAQ,GAAG,GAAG;AAC5B,gBAAM,QAAQ,OAAO,GAAG;AACxB,cACE,OAAO,UAAU,YACd,SACA,IAAI,IAAI,KAAK,GAChB;AACA,gBAAI,IAAI,KAAK,EAAE,OAAO;AAAA,UACxB;AAEA,gBAAM,UAAU,QAAQ,eAAe,QAAQ,GAAG;AAClD,cAAI,SAAS;AACX,qBAAS;AAAA,UACX;AACA,iBAAO;AAAA,QACT;AACA,eAAO;AAAA,MACT;AAAA,MAEA,KAAK,CACH,QACA,KACA,UACG;AACH,cAAM,gBAAgB,OAAO,GAAG;AAChC,YAAI,kBAAkB,OAAO;AAC3B,cACE,OAAO,kBAAkB,YACtB,iBACA,IAAI,IAAI,aAAa,GACxB;AACA,gBAAI,IAAI,aAAa,EAAE,OAAO;AAAA,UAChC;AAEA,iBAAO,GAAG,IACR,OAAO,UAAU,YACZ,QAED,IAAI,IAAI,KAAK,IACT,IAAI,IAAI,KAAK,EAAE,QACf,YAAY,KAAK,IAErB;AAGN,mBAAS;AAAA,QACX;AACA,eAAO;AAAA,MACT;AAAA,IACF;AAEA,UAAM,cAAc,CAClB,WACwB;AACxB,UAAI,IAAI,IAAI,MAAM,GAAG;AACnB,eAAO,IAAI,IAAI,MAAM,EAAE;AAAA,MACzB;AAEA,iBAAW,OAAO,QAAQ;AACxB,cAAM,QAAQ,OAAO,GAAG;AACxB,YACE,SACG,OAAO,UAAU,UACpB;AACA,iBAAO,GAAG,IAAI,YAAY,KAAK;AAAA,QACjC;AAAA,MACF;AAEA,YAAM,YAAY,MAAM,UAAU,QAAQ,OAAO;AACjD,UAAI,IAAI,QAAQ,SAAS;AACzB,aAAO,UAAU;AAAA,IACnB;AAEA,WAAO,YAAY,IAAI;AAAA,EACzB;;;AC1CA,MAAM,iBAAiB;AACvB,MAAM,YAAY,CAChB,MACA,YACI,SAAS,MAAM,MAAM;AAEpB,MAAM,QAAQ,CACnB,aACA,YACA,cACA,oBAC+F;AAC/F,QAAI,OAAQ,iBAAkB,UAAU;AACtC,qBAAe,KAAK,MAAM,YAAY;AAAA,IACxC;AACA,yDAAiB,CAAC;AAClB,QAAI,gBAAsC;AAC1C,UAAM,gBAAgB,MACK;AACzB,UAAI,CAAC,eAAe;AAClB,wBAAgB,QAAQ,QAAQ,EAC7B,KAAK,eAAe;AAAA,MACzB;AACA,aAAO;AAAA,IACT;AACA,QAAI,QACF,OAAO,eAAe,YAAY,MAAM,MAAM,YAC1C,eACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAGJ,UAAM,mBAAmB,CACvB,SACA,eACA,kBACS;AACT,UAAI,eAAe;AACjB,mBAAW,QAAQ,eAAe;AAChC,cAAI,QAAQ,cAAc,IAAI;AAC9B,cAAI,OAAO;AACT,kBAAM,OAAO,OAAQ;AACrB,gBAAI,SAAS,YAAY;AAEvB,oBAAM,WAAW,+CAAgB;AACjC,mBAAI,qCAAU,OAAO,MAAgC,GAAG;AACtD,oBAAI,UAAU;AACZ,0BAAQ;AAAA,oBACN;AAAA,oBACA;AAAA,kBACF;AAAA,gBACF;AAEA,sBAAM,WAAkC,cAAc,IAAI,IACxD,CAAC,UAAiB;AAChB,kBAAC,MAAgC,OAAO,KAAK;AAAA,gBAC/C;AAEF,yBAAS,IAAK;AAEd,wBAAQ;AAAA,kBACN;AAAA,kBACA;AAAA,gBACF;AAAA,cACF;AAAA,YACF,OAAO;AACL,kBAAI,SAAS,SAAS;AACpB,oBAAI,OAAQ,UAAW,UAAU;AAC/B,sBAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,4BAAQ,MAAM,KAAK,GAAG;AAAA,kBACxB,OAAO;AACL,wBAAI,aAAqB;AACzB,+BAAW,aAAa,OAAO;AAC7B,0BAAI,MAAM,SAAS,GAAG;AACpB,sCAAc,MAAM;AAAA,sBACtB;AAAA,oBACF;AACA,4BAAQ;AAAA,kBACV;AAAA,gBACF;AACA,wBAAQ,YAAY;AAAA,cACtB,WACE,SAAS,WACN,OAAQ,UAAW,UACtB;AAEA,yBAAS,aAAa,OAAO;AAC3B,sBAAI,aACF,MACA,SAAS;AAGX,8BAAY,UACT,QAAQ,gBAAgB,SAAS,EACjC,YAAY;AAEf,sBAAI,MAAM,QAAQ,UAAU,GAAG;AAC7B,iCAAa,WAAW,KAAK,GAAG;AAAA,kBAClC;AAEA,kBAAC,QAAwB,MAAM;AAAA,oBAC7B;AAAA,oBACA;AAAA,kBACF;AAAA,gBACF;AAGA,oBACE,iBACG,cAAc,IAAI,KAClB,OAAQ,cAAc,IAAI,MAAO,YACjC,CAAC,MAAM,QAAQ,cAAc,IAAI,CAAC,GACrC;AACA,2BAAS,aAAa,cAAc,IAAI,GAAG;AACzC,wBAAI,EAAE,aAAa,QAAQ;AACzB,kCAAY,UACT,QAAQ,gBAAgB,SAAS,EACjC,YAAY;AAEf,sBAAC,QAAwB,MAAM;AAAA,wBAC7B;AAAA,sBACF;AAAA,oBACF;AAAA,kBACF;AAAA,gBACF;AAAA,cACF,OAAO;AAEL,oBAAI,UAAU,MAAM;AAClB,0BAAQ;AAAA,gBACV,WAAW,SAAS,UAAU;AAC5B,0BAAQ,MAAM,SAAS;AAAA,gBACzB;AAcA,wBAAQ,aAAa,MAAO,KAAgB;AAAA,cAC9C;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAGA,UAAI,eAAe;AACjB,mBAAW,QAAQ,eAAe;AAChC,gBAAM,QAAQ,cAAc,IAAI;AAChC,cACE,CAAC,iBACE,CAAC,cAAc,IAAI,GACtB;AACA,gBAAI,OAAQ,UAAW,YAAY;AACjC,sBAAQ;AAAA,gBACN;AAAA,gBACA,cAAc,IAAI;AAAA,cACpB;AAAA,YACF,WAAW,SAAS,SAAS;AAC3B,sBAAQ,YAAY;AAAA,YACtB,WAAW,SAAS,SAAS;AAC3B,cAAC,QAAwB,MAAM,UAAU;AAAA,YAC3C,OAAO;AAUL,sBAAQ,gBAAgB,IAAI;AAAA,YAC9B;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,QAAI,aAA8C,oBAAI,QAAQ;AAC9D,QAAI,aAA8C,oBAAI,QAAQ;AAC9D,UAAM,oBAAoB,CACxB,SACA,mBACA,mBACA,oBACS;AA9Ob;AA+OI,UAAI,WAAW;AACf,UAAI,WAAW;AACf,UAAI,mBAAmB;AACrB,eAAO,WAAW,kBAAkB,QAAQ,YAAY;AACtD,gBAAM,cAAc,kBAAkB,QAAQ;AAG9C,cAAK,YAA6B,GAAG;AACnC,gBAAI,QAA8B,WAAW;AAAA,cAC1C,YAA6B;AAAA,YAChC;AACA,gBACE,CAAC,SACE,CAAC,eAAe,MAAM,GAAI,YAA6B,CAAC,GAC3D;AACA,sBAAQ;AAAA,gBACN,GAAG;AAAA,kBACA,YAA6B;AAAA,oBAC5B;AAAA,oBACC,YAA6B;AAAA,kBAChC;AAAA,gBACF;AAAA,gBACA,GAAI,YAA6B;AAAA,gBACjC,GAAI,YAA6B;AAAA,cACnC;AAAA,YACF;AAEA,uBAAW,IAAK,YAA6B,GAAG,KAAK;AAGrD,8BAAkB;AAAA,cAChB;AAAA,cACA;AAAA,cACA,GAAG;AAAA,gBACD,MAAM;AAAA,cACR;AAAA,YACF;AAGA;AACA;AAAA,UACF;AAGA,cAAI,UAAU;AACd,cAAI,mBAAmB;AACrB,qBAAS,WAAW,WAAW,UAAU,WAAW,kBAAkB,QAAQ,YAAY;AACxF,oBAAM,cAAc,kBAAkB,QAAQ;AAC9C,kBAEK,YAA6B,KAC1B,YAA6B,MAAO,YAA6B,KAGrE,CAAE,YAA6B,KAC5B,CAAE,YAA6B,GAEpC;AACA,0BAAU;AAEV,oBAAI,aAAc,WAAW,UAAW;AAEtC,0BAAQ;AAAA,oBACN,QAAQ,WAAW,WAAW,QAAQ;AAAA,oBACtC,QAAQ,WAAW,QAAQ;AAAA,kBAC7B;AAEA,oCAAkB;AAAA,oBAChB,WAAW;AAAA,oBACX;AAAA,oBACA,GAAG,kBAAkB;AAAA,sBACnB;AAAA,sBACA;AAAA,oBACF;AAAA,kBACF;AAAA,gBACF;AAEA,oBAAK,YAA6B,GAAG;AACnC;AAAA,oBACG,QAAQ,WAAW,QAAQ;AAAA,oBAC3B,YAA6B;AAAA,oBAC7B,YAA6B;AAAA,kBAChC;AACA;AAAA,oBACG,QAAQ,WAAW,QAAQ;AAAA,oBAC3B,YAA6B;AAAA,oBAC7B,YAA6B;AAAA,oBAC9B;AAAA,kBACF;AAAA,gBACF,OAAO;AACL,sBACG,gBAA4B,aAC7B;AACA,4BAAQ,WAAW,QAAQ,EAAE,cAAe;AAAA,kBAC9C;AAAA,gBACF;AACA;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAEA,cAAI,CAAC,SAAS;AACZ,gBAAI;AACJ,gBAAK,YAA6B,GAAG;AACnC,6BAAe,SAAS;AAAA,gBACrB,YAA6B;AAAA,cAChC;AAEA,kBAAK,YAA6B,GAAG;AACnC;AAAA,kBACE;AAAA,kBACC,YAA6B;AAAA,gBAChC;AAAA,cACF;AACA,kBAAK,YAA6B,GAAG;AACnC;AAAA,kBACE;AAAA,kBACC,YAA6B;AAAA,gBAChC;AAAA,cACF;AAEA,oBAAM,wBAAwB,CAC5BA,UACAC,kBACA,aACG;AACH,oBACE,aAEE,CAACA,oBACGA,iBAAiC,IAEvC;AACA,kBAACD,SACE;AAAA,oBACC;AAAA,oBACA;AAAA,kBACF;AAAA,gBACJ,OAAO;AAEL,kBAACA,SAAQ,WACN;AAAA,oBACC;AAAA,oBACAA;AAAA,kBACF;AAAA,gBACJ;AAAA,cACF;AACA,kBAAI,aAAa,GAAG;AAClB;AAAA,kBACE;AAAA,kBACA;AAAA,kBACA;AAAA,gBACF;AAAA,cACF,aAAY,4DAAmB,WAAnB,YAA6B,KAAK,WAAW,UAAU;AACjE;AAAA,kBACG,QAAQ,WAAW,QAAQ;AAAA;AAAA;AAAA,gBAG9B;AAAA,cACF,OAAO;AACL;AAAA,kBACE;AAAA,kBACA;AAAA,kBACA;AAAA,gBACF;AAAA,cACF;AAAA,YACF,OAAO;AACL,oBAAM,qBAAqB,CACzBA,UACAC,kBACA,aACG;AACH,oBACE,aAEE,CAACA,oBACGA,iBAAiC,IAEvC;AACA,kBAACD,SACE;AAAA,oBACC;AAAA,oBACA;AAAA,kBACF;AAAA,gBACJ,OAAO;AAEL,kBAACA,SAAQ,WACN;AAAA,oBACC,SAAS,eAAe,WAAqB;AAAA,oBAC7CA;AAAA,kBACF;AAAA,gBACJ;AAAA,cACF;AACA,kBAAI,aAAa,GAAG;AAClB;AAAA,kBACE;AAAA,kBACA;AAAA,kBACA;AAAA,gBACF;AAAA,cACF,aAAY,4DAAmB,WAAnB,YAA6B,KAAK,WAAW,UAAU;AACjE;AAAA,kBACE,QAAQ,WAAW,QAAQ;AAAA;AAAA;AAAA,gBAG7B;AAAA,cACF,OAAO;AACL;AAAA,kBACE;AAAA,kBACA;AAAA,kBACA;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AACA;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAEA,YAAM,kBAAiB,4DAAmB,WAAnB,YAA6B,KAAK;AACzD,UAAI,iBAAiB,UAAU;AAC7B,iBAAS,IAAI,gBAAgB,GAAG,KAAK,UAAU,KAAK;AAClD,kBAAQ,WAAW,CAAC,EAAE,OAAO;AAAA,QAC/B;AAAA,MACF;AAAA,IACF;AAEA,UAAM,eACJ,OAAQ,gBAAiB,WAErB,SAAS,cAAc,WAAW,KAC/B,SAAS,KAAK;AAAA,MACf,SAAS,cAAc,KAAK;AAAA,IAC9B,IAEA;AAGN,QAAI,OAAQ,oBAAqB,UAAU;AACzC,UAAI;AACF,0BAAkB,KAAK,MAAM,eAAe;AAAA,MAC9C,SAAS,OAAO;AACd,0BAAkB;AAAA,MACpB;AAAA,IACF;AACA,kEAAoB,gBAAgB,YAAY;AAEhD,QAAI,SAAkB,MACpB,WAAoB;AACtB,UAAM,kBAAkB,MACb;AACT,UACE,UACG,CAAC,YAED,eACH;AACA,mBAAW;AACX,wBAAgB;AAEhB,YAAI,kBAAkB;AAAA,UACpB,WAAW,KAAK;AAAA,QAClB;AACA;AAAA,UACE;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAEA,0BAAkB;AAClB,qBAAa;AACb,qBAAa,oBAAI,QAAQ;AAEzB,mBAAW;AAAA,MACb;AAAA,IACF;AAEA,kBAAc;AAEd,oBAAgB;AAEhB,WAAO;AAAA,MACL;AAAA,MACA,MAAY;AACV,YAAI,QAAQ;AACV,mBAAS;AAET,mBAAS,IAAI,aAAa,WAAW,SAAS,GAAG,KAAK,GAAG,KAAK;AAC5D,yBAAa,WAAW,CAAC,EAAE,OAAO;AAAA,UACpC;AAAA,QACF;AAAA,MACF;AAAA,MACA;AAAA,IACF;AAAA,EACF;;;AC9gBA,OAAK;AAAA,IACH;AAAA,EACF,GAAG;AAAA,IACD;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;",
  "names": ["element", "elementAbstract"]
}
