{
  "version": 3,
  "sources": ["../../../.scripts/iife.ts", "../../staark-common/src/marker.ts", "../../staark-common/src/memo.ts", "../../staark-common/src/node.ts", "../../staark-common/src/array.ts", "../../staark-common/src/compare.ts", "../../staark-common/src/element.ts", "../src/utilities/proxy.ts", "../src/library/mount.ts", "../src/index.base.iife.ts"],
  "sourcesContent": ["export const iife = function (\n  path: Array<string>,\n  data: any\n) {\n  let subject: Record<string, any> = window\n  for (let i = 0; i < path.length - 1; i++) {\n    if (\n      typeof (subject[path[i]]) !== 'object'\n      || !Array.isArray(subject[path[i]])\n    ) {\n      subject[path[i]] = {}\n    }\n    subject = subject[path[i]]\n  }\n  subject[path[path.length - 1]] = data\n}\n", "export const marker = Symbol()\n", "import {\n  marker,\n} from './marker.js'\nimport { NodeContent } from './node.js'\n\nexport type MemoFunction = (\n  state: Record<string, any>,\n  memory: any,\n) => NodeContent[] | NodeContent\n\nexport type MemoAbstract = {\n  _: Symbol,\n  // Compare data\n  m: any,\n  // Render function\n  r: MemoFunction,\n}\n\nexport const memo = (\n  render: MemoFunction,\n  memory: any,\n) => ({\n  _: marker,\n  r: render,\n  m: memory,\n})\n", "import {\n  marker,\n} from './marker.js'\nimport {\n  MemoAbstract,\n} from './memo.js'\nimport {\n  TextAbstract,\n} from './text.js'\n\nexport type NodeAttributeListener = (\n  event: Event\n) => unknown\n\nexport type NodeAttributes =\n  Record<string,\n    boolean |\n    null |\n    number |\n    string |\n    (number | string)[] |\n    NodeAttributeListener |\n    Record<string,\n      boolean | number | string\n    >\n  >\n\nexport type NodeContent =\n  string |\n  MemoAbstract |\n  NodeAbstract |\n  TextAbstract\n\nexport type NodeAbstract = {\n  _: Symbol\n  // Attributes\n  a?: NodeAttributes\n  // Content\n  c?: NodeContent[]\n  // Node type\n  t: string\n}\n\nexport const node = (\n  type: string,\n  attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n  contents?: NodeContent[] | NodeContent,\n): NodeAbstract => {\n  if (\n    typeof (attributesOrContents) !== 'object'\n    || (attributesOrContents as NodeAbstract)._ === marker\n    || Array.isArray(attributesOrContents)\n  ) {\n    contents = attributesOrContents as NodeContent\n    attributesOrContents = undefined\n  }\n\n  return {\n    _: marker,\n    a: attributesOrContents as (NodeAttributes | undefined),\n    c: (\n      contents\n        ? Array.isArray(contents)\n          ? contents\n          : [contents] as NodeContent[]\n        : []\n    ),\n    t: type.toUpperCase(),\n  }\n}\n", "export const arrayify = function <T>(\n  data: T[] | T,\n): T[] {\n  if (Array.isArray(data)) {\n    return data\n  }\n  return [\n    data,\n  ]\n}\n", "export const equalRecursive = (\n  valueA: any,\n  valueB: any,\n): boolean => {\n  if (valueA === valueB) {\n    return true\n  }\n  if (\n    valueA instanceof Date\n    && valueB instanceof Date\n  ) {\n    return valueA.getTime() === valueB.getTime()\n  }\n  if (\n    !valueA\n    || !valueB\n    || (\n      typeof valueA !== 'object' && typeof valueB !== 'object'\n    )\n  ) {\n    return valueA === valueB\n  }\n  if (\n    valueA === null\n    || valueA === undefined\n    || valueB === null\n    || valueB === undefined\n  ) {\n    return false\n  }\n  if (valueA.prototype !== valueB.prototype) {\n    return false\n  }\n  let keys = Object.keys(valueA)\n  if (keys.length !== Object.keys(valueB).length) {\n    return false\n  }\n  return keys.every(\n    (key: string): boolean => equalRecursive(valueA[key], valueB[key]),\n  )\n}\n", "import {\n  node,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\n\nexport const childrenToNodes = (\n  element: Element | ChildNode,\n) => {\n  const abstractChildNodes: NodeContent[] = []\n  for (let i = 0; i < element.childNodes.length; i++) {\n    const childNode = element.childNodes[i]\n    if (childNode instanceof Text) {\n      abstractChildNodes.push(\n        childNode.textContent ?? ''\n      )\n    } else {\n      let attributes: NodeAttributes = {}\n      for (let i = 0; i < (childNode as Element).attributes.length; i++) {\n        const attribute = (childNode as Element).attributes[i]\n        attributes[attribute.name] = attribute.value\n      }\n\n      abstractChildNodes.push(\n        node(\n          childNode.nodeName,\n          attributes,\n          childrenToNodes(childNode),\n        )\n      )\n    }\n  }\n  return abstractChildNodes\n}\n", "export const proxify = (\n  root: Record<string, any>,\n  onChange: () => void,\n): Record<string, any> => {\n  // Setup WeakMap to keep track of created proxies.\n  const map = new WeakMap()\n\n  /**\n   * Remove object from being kept track of.\n   * @param {Record<string, any>} target Object that is being kept track of.\n   */\n  const remove = (\n    target: Record<string, any>,\n  ): void => {\n    // Check if target exists in case of recursion.\n    if (map.has(target)) {\n      // Remove target from the map.\n      const revocable = map.get(target)\n      map.delete(revocable)\n\n      // Recursively remove properties as well.\n      for (const property in revocable.proxy) {\n        if (typeof (revocable.proxy[property]) === 'object') {\n          remove(revocable.proxy[property])\n        }\n      }\n\n      revocable.revoke()\n    }\n  }\n\n  /**\n   * Add object to start keeping track of it.\n   * @param {Object} target Object that is being kept track of.\n   * @returns {Proxy} Object to access and mutate.\n   */\n  const add = (\n    target: Record<string, any>,\n  ): Record<string, any> => {\n    // Exit early if proxy already exists prevent recursion.\n    if (map.has(target)) {\n      return map.get(target)\n    }\n\n    // Recursively create proxies for each property.\n    for (const key in target) {\n      if (target[key] && typeof (target[key]) === 'object') {\n        target[key] = add(target[key])\n      }\n    }\n\n    const revocable = Proxy.revocable(target, {\n      deleteProperty: (\n        target: Record<string, any>,\n        key: string,\n      ): boolean => {\n        if (Reflect.has(target, key)) {\n          remove(target)\n\n          const deleted = Reflect.deleteProperty(target, key)\n\n          if (deleted) {\n            onChange()\n          }\n\n          return deleted\n        }\n        return true\n      },\n\n      set: (\n        target: Record<string, any>,\n        key: string,\n        value: any,\n      ): boolean => {\n        const existingValue = target[key]\n        if (existingValue !== value) {\n          // Remove existing value if value is an object.\n          if (typeof (existingValue) === 'object') {\n            remove(existingValue)\n          }\n\n          // Add proxy if value is an object.\n          if (value && typeof (value) === 'object') {\n            value = add(value)\n          }\n          target[key] = value\n\n          // Dispatch set event. If the target is an array and a new item has been pushed then the length has also changed, therefore a more generalizable path will be dispatched.\n          onChange()\n        }\n        return true\n      },\n    })\n\n    map.set(revocable, target)\n\n    return revocable.proxy\n  }\n\n  return add(root)\n}\n", "import {\n  arrayify,\n} from '@doars/staark-common/src/array.js'\nimport {\n  equalRecursive,\n} from '@doars/staark-common/src/compare.js'\nimport {\n  childrenToNodes,\n} from '@doars/staark-common/src/element.js'\nimport {\n  MemoAbstract,\n  MemoFunction,\n} from '@doars/staark-common/src/memo.js'\nimport {\n  NodeAbstract,\n  NodeAttributes,\n  NodeAttributeListener,\n  NodeContent,\n} from '@doars/staark-common/src/node.js'\nimport {\n  TextAbstract,\n} from '@doars/staark-common/src/text.js'\nimport {\n  proxify,\n} from '../utilities/proxy.js'\n\nexport type GenericFunction<DataType, ReturnType> = (\n  argument: DataType\n) => ReturnType\n\nexport type GenericFunctionUnknown = (\n) => unknown\n\ntype MemoData = {\n  c: NodeContent[],\n  m: any,\n  r: MemoFunction,\n}\n\nexport type ViewFunction = (\n  state: Record<string, any>,\n) => NodeContent[] | NodeContent\n\nconst MATCH_CAPITALS = /[A-Z]+(?![a-z])|[A-Z]/g\nconst HYPHENATE = (\n  part: string,\n  offset: number,\n) => (offset ? '-' : '') + part\n\nexport const mount = (\n  rootElement: HTMLElement | Element | string,\n  renderView: ViewFunction,\n  initialState?: Record<string, any> | string,\n  oldAbstractTree?: NodeContent[] | string,\n): undefined | [GenericFunction<string[], void>, GenericFunctionUnknown, Record<string, any>] => {\n  // Track amount of listeners running.\n  let listenerCount = 0\n\n  const updateAttributes = (\n    element: Element,\n    newAttributes?: NodeAttributes,\n    oldAttributes?: NodeAttributes,\n  ): void => {\n    if (newAttributes) {\n      for (const name in newAttributes) {\n        let value = newAttributes[name]\n        if (value) {\n          const type = typeof (value)\n          if (type === 'function') {\n            // Wrap the listener so we can prevent re-renders during handling.\n            const listener = newAttributes[name] = (\n              event: Event,\n            ): void => {\n              listenerCount++;\n              try {\n                (value as NodeAttributeListener)(event)\n              } catch (error) {\n                console.error('listener error', error)\n              }\n              listenerCount--\n              updateAbstracts()\n            }\n            element.addEventListener(name, listener)\n            continue\n          } else {\n            if (name === 'class') {\n              if (typeof (value) === 'object') {\n                if (Array.isArray(value)) {\n                  value = value.join(' ')\n                } else {\n                  let classNames: string = ''\n                  for (const className in value) {\n                    if (value[className]) {\n                      classNames += ' ' + className\n                    }\n                  }\n                  value = classNames\n                }\n              }\n            } else if (name === 'style') {\n              if (typeof (value) === 'object') {\n                if (Array.isArray(value)) {\n                  value = value.join(';')\n                } else {\n                  let styles: string = ''\n                  for (let styleProperty in value) {\n                    let styleValue: boolean | string | number | (boolean | string | number)[] = value[styleProperty]\n\n                    // Convert to kebab case.\n                    styleProperty = styleProperty\n                      .replace(MATCH_CAPITALS, HYPHENATE)\n                      .toLowerCase()\n\n                    if (Array.isArray(styleValue)) {\n                      styles += ';' + styleProperty + ':' + styleValue.join(' ')\n                    } else if (styleValue) {\n                      styles += ';' + styleProperty + ':' + styleValue\n                    }\n                  }\n                  value = styles\n                }\n              }\n            } else {\n              // Ensure it is of type string.\n              if (type === 'boolean') {\n                if (!value) {\n                  element.removeAttribute(name)\n                  continue\n                }\n                value = 'true'\n              } else if (type !== 'string') {\n                value = value.toString()\n              }\n\n              if (\n                name === 'value'\n                && (element as HTMLInputElement).value !== value\n              ) {\n                // Update value separately as well.\n                (element as HTMLInputElement).value = value as string\n                // Don't dispatch a change event, the re-rendering should update everything: element.dispatchEvent(new Event('change'))\n              } else if (name === 'checked') {\n                (element as HTMLInputElement).checked = newAttributes[name] as boolean\n                // Don't dispatch a change event, the re-rendering should update everything: element.dispatchEvent(new Event('change'))\n              }\n            }\n\n            element.setAttribute(name, (value as string))\n          }\n        }\n      }\n    }\n\n    // Cleanup old attributes.\n    if (oldAttributes) {\n      for (const name in oldAttributes) {\n        if (typeof (oldAttributes[name]) === 'function') {\n          element.removeEventListener(\n            name,\n            oldAttributes[name] as NodeAttributeListener,\n          )\n        } else if (\n          !newAttributes\n          || !(name in newAttributes)\n          || !newAttributes[name]\n        ) {\n          if (name === 'value') {\n            // Reset value separately.\n            (element as HTMLInputElement).value = ''\n            // Don't dispatch the input change event, the rerendering should update everything: element.dispatchEvent(new Event('change'))\n          } else if (name === 'checked') {\n            (element as HTMLInputElement).checked = false\n          }\n          element.removeAttribute(name)\n        }\n      }\n    }\n  }\n\n  let oldMemoList: MemoData[] = []\n  let newMemoList: MemoData[] = []\n  const resolveMemoization = (\n    memoAbstract: MemoAbstract,\n  ): NodeContent[] => {\n    // Try and get the data from memory.\n    let match: MemoData | undefined = oldMemoList.find((oldMemo) => (\n      oldMemo.r === memoAbstract.r\n      && equalRecursive(oldMemo.m, memoAbstract.m)\n    ))\n    // If not found create it.\n    if (!match) {\n      match = {\n        c: arrayify(\n          memoAbstract.r(\n            state,\n            memoAbstract.m,\n          )\n        ),\n        m: memoAbstract.m,\n        r: memoAbstract.r,\n      }\n    }\n    // Store it in the list.\n    if (!newMemoList.includes(match)) {\n      newMemoList.push(match)\n    }\n    // Return the resulting nodes.\n    return structuredClone(\n      match.c,\n    )\n  }\n\n  const updateElementTree = (\n    element: Element,\n    newChildAbstracts?: NodeContent[],\n    oldChildAbstracts?: NodeContent[],\n    elementAbstract?: NodeContent,\n  ): void => {\n    let newIndex = 0\n    let newCount = 0\n    if (newChildAbstracts) {\n      for (; newIndex < newChildAbstracts.length; newIndex++) {\n        const newAbstract = newChildAbstracts[newIndex]\n\n        // Handle memoization.\n        if ((newAbstract as MemoAbstract).r) {\n          const memoAbstracts = resolveMemoization(\n            (newAbstract as MemoAbstract)\n          )\n          // Splice nodes into the tree and re-run the loop again.\n          newChildAbstracts.splice(\n            newIndex,\n            1,\n            ...memoAbstracts,\n          )\n          // NOTE: Preferably we would skip re-rendering when the nodes were memoized, but because those nodes might have morphed we'll have to check. So we re-process the node again that was just inserted in.\n          // We could have the resolve memoization return whether it was re-rendered, but this also means the nodes are not allowed to be re-used when morphing the DOM and this needs to be prevented by marking them as such.\n          newIndex--\n          continue\n        }\n\n        // Try to find the matching old abstract.\n        let matched = false\n        if (oldChildAbstracts) {\n          for (let oldIndex = newIndex - newCount; oldIndex < oldChildAbstracts.length; oldIndex++) {\n            const oldAbstract = oldChildAbstracts[oldIndex]\n            if (\n              (\n                (oldAbstract as NodeAbstract).t\n                && (newAbstract as NodeAbstract).t === (oldAbstract as NodeAbstract).t\n              )\n              || (\n                !(oldAbstract as NodeAbstract).t\n                && !(newAbstract as NodeAbstract).t\n              )\n            ) {\n              matched = true\n\n              if (newIndex !== (oldIndex + newCount)) {\n                // Move node in dom.\n                element.insertBefore(\n                  element.childNodes[oldIndex + newCount],\n                  element.childNodes[newIndex],\n                )\n                // Move node in abstract tree.\n                oldChildAbstracts.splice(\n                  newIndex - newCount,\n                  0,\n                  ...oldChildAbstracts.splice(\n                    oldIndex,\n                    1,\n                  )\n                )\n              }\n\n              if ((newAbstract as NodeAbstract).t) {\n                updateAttributes(\n                  (element.childNodes[newIndex] as Element),\n                  (newAbstract as NodeAbstract).a,\n                  (oldAbstract as NodeAbstract).a,\n                )\n                updateElementTree(\n                  (element.childNodes[newIndex] as Element),\n                  (newAbstract as NodeAbstract).c,\n                  (oldAbstract as NodeAbstract).c,\n                  oldAbstract,\n                )\n              } else {\n                element.childNodes[newIndex].textContent = (\n                  typeof (newAbstract) === 'string'\n                    ? newAbstract\n                    : (newAbstract as TextAbstract).c\n                )\n              }\n              break\n            }\n          }\n        }\n\n        if (!matched) {\n          let childElement: Element | string\n          if ((newAbstract as NodeAbstract).t) {\n            childElement = document.createElement(\n              (newAbstract as NodeAbstract).t\n            )\n\n            if ((newAbstract as NodeAbstract).a) {\n              updateAttributes(\n                childElement,\n                (newAbstract as NodeAbstract).a,\n              )\n            }\n            if ((newAbstract as NodeAbstract).c) {\n              updateElementTree(\n                childElement,\n                (newAbstract as NodeAbstract).c,\n              )\n            }\n\n            const insertAdjacentElement = (\n              element: Node,\n              elementAbstract?: NodeContent | null,\n              position?: InsertPosition,\n            ) => {\n              if (\n                position &&\n                (\n                  !elementAbstract\n                  || (elementAbstract as NodeAbstract).t\n                )\n              ) {\n                (element as Element)\n                  .insertAdjacentElement(\n                    position,\n                    childElement as Element,\n                  )\n              } else {\n                // Otherwise the position is always 'beforebegin'.\n                (element.parentNode as Element)\n                  .insertBefore(\n                    childElement as Element,\n                    element,\n                  )\n              }\n            }\n            if (newIndex === 0) {\n              insertAdjacentElement(\n                element,\n                elementAbstract,\n                'afterbegin',\n              )\n            } else if ((oldChildAbstracts?.length ?? 0) + newCount > newIndex) {\n              insertAdjacentElement(\n                (element.childNodes[newIndex] as Node),\n                // (oldChildAbstracts as NodeContent[])[newIndex + newCount],\n                // 'beforebegin',\n              )\n            } else {\n              insertAdjacentElement(\n                element,\n                elementAbstract,\n                'beforeend',\n              )\n            }\n          } else {\n            childElement = (\n              typeof (newAbstract) === 'string'\n                ? newAbstract\n                : (newAbstract as TextAbstract).c\n            )\n\n            const insertAdjacentText = (\n              element: Node,\n              elementAbstract?: NodeContent | null,\n              position?: InsertPosition,\n            ) => {\n              if (\n                position &&\n                (\n                  !elementAbstract\n                  || (elementAbstract as NodeAbstract).t\n                )\n              ) {\n                (element as Element)\n                  .insertAdjacentText(\n                    position,\n                    childElement as string,\n                  )\n              } else {\n                // Otherwise the position is always 'beforebegin'.\n                (element.parentNode as Element)\n                  .insertBefore(\n                    document.createTextNode(childElement as string),\n                    element.nextSibling,\n                  )\n              }\n            }\n            if (newIndex === 0) {\n              insertAdjacentText(\n                element,\n                elementAbstract,\n                'afterbegin',\n              )\n            } else if ((oldChildAbstracts?.length ?? 0) + newCount > newIndex) {\n              insertAdjacentText(\n                element.childNodes[newIndex] as Node,\n                // (oldChildAbstracts as NodeContent[])[newIndex + newCount],\n                // 'beforebegin',\n              )\n            } else {\n              insertAdjacentText(\n                element,\n                elementAbstract,\n                'beforeend',\n              )\n            }\n          }\n          newCount++\n        }\n      }\n    }\n\n    // Remove old elements.\n    const elementLength = (oldChildAbstracts?.length ?? 0) + newCount\n    if (elementLength >= newIndex) {\n      for (let i = elementLength - 1; i >= newIndex; i--) {\n        element.childNodes[i].remove()\n      }\n    }\n  }\n\n  if (typeof (initialState) === 'string') {\n    initialState = JSON.parse(initialState) as Record<string, any>\n  }\n  initialState ??= {}\n  let proxyChanged = true\n  const triggerUpdate = (\n  ): void => {\n    if (!proxyChanged) {\n      proxyChanged = true\n      Promise.resolve()\n        .then(updateAbstracts)\n    }\n  }\n  let state = (\n    Object.getPrototypeOf(initialState) === Proxy.prototype\n      ? initialState\n      : proxify(\n        initialState,\n        triggerUpdate,\n      )\n  )\n\n  const _rootElement = (\n    typeof (rootElement) === 'string'\n      ? (\n        document.querySelector(rootElement)\n        || document.body.appendChild(\n          document.createElement('div')\n        )\n      )\n      : rootElement\n  )\n\n  if (typeof (oldAbstractTree) === 'string') {\n    try {\n      oldAbstractTree = JSON.parse(oldAbstractTree) as NodeContent[]\n    } catch (error) {\n      oldAbstractTree = undefined\n    }\n  }\n  oldAbstractTree ??= childrenToNodes(_rootElement)\n\n  let active: boolean = true,\n    updating: boolean = false\n  const updateAbstracts = (\n  ): void => {\n    if (\n      active &&\n      !updating &&\n      // Only update if changes to the state have been made.\n      proxyChanged &&\n      // Don't update while handling listeners.\n      listenerCount <= 0\n    ) {\n      updating = true\n      proxyChanged = false\n\n      let newAbstractTree = arrayify(\n        renderView(state),\n      )\n      updateElementTree(\n        _rootElement,\n        newAbstractTree,\n        oldAbstractTree as NodeContent[],\n      )\n      // Store tree for next update\n      oldAbstractTree = newAbstractTree\n      oldMemoList = newMemoList\n      newMemoList = []\n\n      updating = false\n      if (proxyChanged) {\n        throw new Error('update during render')\n      }\n    }\n  }\n  updateAbstracts()\n\n  return [\n    triggerUpdate,\n    (): void => {\n      if (active) {\n        active = false\n\n        for (let i = _rootElement.childNodes.length - 1; i >= 0; i--) {\n          _rootElement.childNodes[i].remove()\n        }\n      }\n    },\n    state,\n  ]\n}\n", "import { iife } from '../../../.scripts/iife.js'\n\nimport { memo } from '@doars/staark-common/src/memo.js'\nimport { node } from '@doars/staark-common/src/node.js'\nimport { mount } from './library/mount.js'\n\niife([\n  'staark',\n], {\n  memo,\n  mount,\n  node,\n})\n"],
  "mappings": "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",
  "names": ["i", "target", "element", "elementAbstract"]
}
