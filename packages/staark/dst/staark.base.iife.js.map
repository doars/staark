{
  "version": 3,
  "sources": ["../../../.scripts/iife.ts", "../src/library/marker.ts", "../src/library/memo.ts", "../../staark-common/src/array.ts", "../../staark-common/src/clone.ts", "../../staark-common/src/compare.ts", "../src/utilities/proxy.ts", "../src/library/mount.ts", "../src/library/node.ts", "../src/index.base.iife.ts"],
  "sourcesContent": ["type GenericObjectAny = { [key: string]: any }\n\nexport const iife = function (\n  path: Array<string>,\n  data: any\n) {\n  let subject: GenericObjectAny = window\n  for (let i = 0; i < path.length - 1; i++) {\n    if (typeof (subject[path[i]]) !== 'object' || !Array.isArray(subject[path[i]])) {\n      subject[path[i]] = {}\n    }\n    subject = subject[path[i]]\n  }\n  subject[path[path.length - 1]] = data\n}\n", "export const marker = Symbol()\n", "import { GenericObject } from '@doars/staark-common/src/generics.js'\nimport {\n  marker,\n} from './marker.js'\nimport { NodeContent } from './node.js'\n\nexport type MemoFunction = (\n  state: GenericObject<any>,\n  memory: any,\n) => NodeContent | NodeContent[]\n\nexport type MemoAbstract = {\n  _: Symbol,\n  // Compare data\n  m: any,\n  // Render function\n  r: MemoFunction,\n}\n\nexport const memo = (\n  render: MemoFunction,\n  memory: any,\n) => ({\n  _: marker,\n  r: render,\n  m: memory,\n})\n", "export const arrayify = function <T>(\n  data: T[] | T,\n): T[] {\n  if (Array.isArray(data)) {\n    return data\n  }\n  return [\n    data,\n  ]\n}\n\nexport default {\n  arrayify,\n}\n", "import {\n  GenericObjectAny,\n} from './generics.js'\n\nexport const cloneRecursive = (\n  value: any,\n) => {\n  if (typeof (value) === 'object') {\n    if (Array.isArray(value)) {\n      const clone: any[] = []\n      for (let i = 0; i < value.length; i++) {\n        clone.push(cloneRecursive(value[i]))\n      }\n      value = clone\n    } else {\n      const clone: GenericObjectAny = {}\n      for (const key in value) {\n        clone[key] = cloneRecursive(value[key])\n      }\n      value = clone\n    }\n  }\n  return value\n}\n", "export const equalRecursive = (\n  valueA: any,\n  valueB: any,\n): boolean => {\n  if (valueA === valueB) {\n    return true\n  }\n  if (\n    valueA instanceof Date\n    && valueB instanceof Date\n  ) {\n    return valueA.getTime() === valueB.getTime()\n  }\n  if (\n    !valueA\n    || !valueB\n    || (\n      typeof valueA !== 'object' && typeof valueB !== 'object'\n    )\n  ) {\n    return valueA === valueB\n  }\n  if (\n    valueA === null\n    || valueA === undefined\n    || valueB === null\n    || valueB === undefined\n  ) {\n    return false\n  }\n  if (valueA.prototype !== valueB.prototype) {\n    return false\n  }\n  let keys = Object.keys(valueA)\n  if (keys.length !== Object.keys(valueB).length) {\n    return false\n  }\n  return keys.every(\n    (key: string): boolean => equalRecursive(valueA[key], valueB[key]),\n  )\n}\n", "import {\n  GenericObjectAny,\n} from '@doars/staark-common/src/generics.js'\n\nexport type ProxyData = {\n  // Proxy\n  p: GenericObjectAny\n  // Stop proxy\n  s: () => void\n}\n\nexport const proxify = (\n  root: GenericObjectAny,\n  onChange: () => void,\n): ProxyData => {\n  // Setup WeakMap to keep track of created proxies.\n  const map = new WeakMap()\n\n  /**\n   * Remove object from being kept track of.\n   * @param {GenericObjectAny} target Object that is being kept track of.\n   */\n  const remove = (\n    target: GenericObjectAny,\n  ): void => {\n    // Check if target exists in case of recursion.\n    if (map.has(target)) {\n      // Remove target from the map.\n      const revocable = map.get(target)\n      map.delete(revocable)\n\n      // Recursively remove properties as well.\n      for (const property in revocable.proxy) {\n        if (typeof (revocable.proxy[property]) === 'object') {\n          remove(revocable.proxy[property])\n        }\n      }\n\n      // Revoke proxy.\n      revocable.revoke()\n    }\n  }\n\n  /**\n   * Add object to start keeping track of it.\n   * @param {Object} target Object that is being kept track of.\n   * @returns {Proxy} Object to access and mutate.\n   */\n  const add = (\n    target: GenericObjectAny,\n  ): GenericObjectAny => {\n    // Exit early if proxy already exists prevent recursion.\n    if (map.has(target)) {\n      return map.get(target)\n    }\n\n    // Recursively create proxies for each property.\n    for (const key in target) {\n      if (target[key] && typeof (target[key]) === 'object') {\n        target[key] = add(target[key])\n      }\n    }\n\n    // Create proxy.\n    const revocable = Proxy.revocable(target, {\n      deleteProperty: (\n        target: GenericObjectAny,\n        key: string,\n      ): boolean => {\n        // Exit early successful if property doesn't exist.\n        if (!Reflect.has(target, key)) {\n          return true\n        }\n\n        // Remove proxy.\n        remove(target)\n\n        // Delete property.\n        const deleted = Reflect.deleteProperty(target, key)\n\n        // Dispatch delete event.\n        if (deleted) {\n          onChange()\n        }\n\n        // Return deleted.\n        return deleted\n      },\n\n      set: (\n        target: GenericObjectAny,\n        key: string,\n        value: any,\n      ): boolean => {\n        const existingValue = target[key]\n        if (existingValue !== value) {\n          // Remove existing value if value is an object.\n          if (typeof (existingValue) === 'object') {\n            remove(existingValue)\n          }\n\n          // Add proxy if value is an object.\n          if (value && typeof (value) === 'object') {\n            value = add(value)\n          }\n          // Store value.\n          target[key] = value\n\n          // Dispatch set event. If the target is an array and a new item has been pushed then the length has also changed, therefore a more generalizable path will be dispatched.\n          onChange()\n        }\n\n        // Return success.\n        return true\n      },\n    })\n\n    // Store target at proxy.\n    map.set(revocable, target)\n\n    // Return proxy.\n    return revocable.proxy\n  }\n\n  // Return dispatcher and proxy.\n  return {\n    // Add initial root.\n    p: add(root),\n    // Stop dispatcher by removing root.\n    s: () => remove(root),\n  }\n}\n", "import {\n  arrayify,\n} from '@doars/staark-common/src/array.js'\nimport {\n  cloneRecursive,\n} from '@doars/staark-common/src/clone.js'\nimport {\n  equalRecursive,\n} from '@doars/staark-common/src/compare.js'\nimport {\n  GenericFunction,\n  GenericFunctionUnknown,\n  GenericObject,\n} from '@doars/staark-common/src/generics.js'\nimport {\n  proxify,\n} from '../utilities/proxy.js'\n\nimport {\n  MemoAbstract,\n  MemoFunction,\n} from './memo.js'\nimport {\n  NodeAbstract,\n  NodeAttributes,\n  NodeAttributeListener,\n  NodeContent,\n} from './node.js'\nimport {\n  TextAbstract,\n} from './text.js'\n\ntype MemoData = {\n  c: NodeContent[],\n  m: any,\n  r: MemoFunction,\n}\n\nexport type ViewFunction = (\n  state: GenericObject<any>,\n) => NodeContent | NodeContent[]\n\nconst MATCH_CAPITALS = /[A-Z]+(?![a-z])|[A-Z]/g\nconst HYPHENATE = (\n  part: string,\n  offset: number,\n) => (offset ? '-' : '') + part\n\nexport const mount = (\n  rootNode: Element | string,\n  renderView: ViewFunction,\n  initialState?: GenericObject<any>,\n): undefined | [GenericFunction<string[], void>, GenericFunctionUnknown] => {\n  if (!initialState) {\n    initialState = {}\n  }\n\n  let active: boolean = true,\n    updating: boolean = false\n  let _rootNode: Element | null\n  const unmount = (\n  ): void => {\n    if (active) {\n      active = false\n      if (_rootNode) {\n        for (let i = _rootNode.childNodes.length - 1; i >= 0; i--) {\n          _rootNode.childNodes[i].remove()\n        }\n      }\n    }\n  }\n\n  _rootNode = typeof (rootNode) === 'string'\n    ? document.querySelector(rootNode)\n    : rootNode\n  if (!_rootNode) {\n    throw new Error('no root found')\n  }\n  unmount()\n  active = true\n\n  if (!_rootNode) {\n    _rootNode = document.createElement('div')\n    document.body.appendChild(_rootNode)\n  }\n\n  // Track amount of listeners running.\n  let listenerCount = 0\n\n  const updateAttributes = (\n    element: Element,\n    newAttributes: NodeAttributes | null = null,\n    oldAttributes: NodeAttributes | null = null,\n  ): void => {\n    if (newAttributes) {\n      for (const name in newAttributes) {\n        let value = newAttributes[name]\n        if (value !== null) {\n          const type = typeof (value)\n          if (type === 'function') {\n            // Wrap the listener so we can prevent re-renders during handling.\n            const listener = newAttributes[name] = (\n              event: Event,\n            ): void => {\n              listenerCount++;\n              (value as NodeAttributeListener)(event)\n              listenerCount--\n              updateAbstracts()\n            }\n            element.addEventListener(name, listener)\n            continue\n          } else {\n            // Ensure it is of type string.\n            if (type === 'boolean') {\n              value = value ? 'true' : 'false'\n            } else if (type !== 'string') {\n              value = value.toString()\n            }\n\n            if (name === 'class') {\n              if (typeof (value) === 'object') {\n                if (Array.isArray(value)) {\n                  value = value.join(' ')\n                } else {\n                  let classNames: string = ''\n                  for (const className in value) {\n                    if (value[className]) {\n                      classNames += ' ' + className\n                    }\n                  }\n                  value = classNames\n                }\n              }\n            } else if (name === 'style') {\n              if (typeof (value) === 'object') {\n                if (Array.isArray(value)) {\n                  value = value.join(';')\n                } else {\n                  let styles: string = ''\n                  for (let styleProperty in value) {\n                    let styleValue: string | number | (string | number)[] = value[styleProperty]\n\n                    // Convert to kebab case.\n                    styleProperty = styleProperty\n                      .replace(MATCH_CAPITALS, HYPHENATE)\n                      .toLowerCase()\n\n                    if (Array.isArray(styleValue)) {\n                      styles += ';' + styleProperty + ':' + styleValue.join(' ')\n                    } else if (value) {\n                      styles += ';' + styleProperty + ':' + value\n                    }\n                  }\n                  value = styles\n                }\n              }\n            } else if (\n              name === 'value' &&\n              (element as HTMLInputElement).value !== value\n            ) {\n              // Update value separately as well.\n              (element as HTMLInputElement).value = value as string\n              // Don't dispatch a change event, the re-rendering should update everything: element.dispatchEvent(new Event('change'))\n            } else if (name === 'checked') {\n              (element as HTMLInputElement).checked = newAttributes[name] as boolean\n              // Don't dispatch a change event, the re-rendering should update everything: element.dispatchEvent(new Event('change'))\n            }\n\n            element.setAttribute(name, (value as string))\n          }\n        }\n      }\n    }\n\n    // Cleanup old attributes.\n    if (oldAttributes) {\n      for (const name in oldAttributes) {\n        if (typeof (oldAttributes[name]) === 'function') {\n          element.removeEventListener(\n            name,\n            oldAttributes[name] as NodeAttributeListener,\n          )\n        } else if (\n          !newAttributes ||\n          !(name in newAttributes)\n          || (newAttributes[name] === null)\n          || (newAttributes[name] === undefined)\n        ) {\n          if (name === 'value') {\n            // Reset value separately.\n            (element as HTMLInputElement).value = ''\n            // Don't dispatch the input change event, the rerendering should update everything: element.dispatchEvent(new Event('change'))\n          } else if (name === 'checked') {\n            (element as HTMLInputElement).checked = false\n          }\n          element.removeAttribute(name)\n        }\n      }\n    }\n  }\n\n  let oldMemoList: MemoData[] = []\n  let newMemoList: MemoData[] = []\n  const resolveMemoization = (\n    memoAbstract: MemoAbstract,\n  ): NodeContent[] => {\n    // Try and get the data from memory.\n    let match: MemoData | undefined = oldMemoList.find((oldMemo) => (\n      oldMemo.r === memoAbstract.r\n      && equalRecursive(oldMemo.m, memoAbstract.m)\n    ))\n    // If not found create it.\n    if (!match) {\n      match = {\n        c: arrayify(\n          memoAbstract.r(\n            state.p,\n            memoAbstract.m,\n          )\n        ),\n        m: memoAbstract.m,\n        r: memoAbstract.r,\n      }\n    }\n    // Store it in the list.\n    if (!newMemoList.includes(match)) {\n      newMemoList.push(match)\n    }\n    // Return the resulting nodes.\n    return cloneRecursive(\n      match.c,\n    )\n  }\n\n  const updateElementTree = (\n    element: Element,\n    newChildAbstracts: NodeContent[] | null = null,\n    oldChildAbstracts: NodeContent[] | null = null,\n  ): void => {\n    let newIndex = 0\n    let newCount = 0\n    if (newChildAbstracts) {\n      for (; newIndex < newChildAbstracts.length; newIndex++) {\n        const newAbstract = newChildAbstracts[newIndex]\n\n        // Handle memoization.\n        if ((newAbstract as MemoAbstract).r) {\n          const memoAbstracts = resolveMemoization(\n            (newAbstract as MemoAbstract)\n          )\n          // Splice nodes into the tree and re-run the loop again.\n          newChildAbstracts.splice(\n            newIndex,\n            1,\n            ...memoAbstracts,\n          )\n          // NOTE: Preferably we would skip re-rendering when the nodes were memoized, but because those nodes might have morphed we'll have to check. So we re-process the node again that as just inserted in.\n          newIndex--\n          continue\n        }\n\n        // Try to find the matching old abstract.\n        let matched = false\n        if (oldChildAbstracts) {\n          for (let oldIndex = newIndex - newCount; oldIndex < oldChildAbstracts.length; oldIndex++) {\n            const oldAbstract = oldChildAbstracts[oldIndex];\n            if (\n              (\n                (oldAbstract as NodeAbstract).t\n                && (newAbstract as NodeAbstract).t === (oldAbstract as NodeAbstract).t\n              )\n              || (\n                !(oldAbstract as NodeAbstract).t\n                && !(newAbstract as NodeAbstract).t\n              )\n            ) {\n              matched = true\n\n              if (newIndex !== oldIndex) {\n                // Move node in dom.\n                element.insertBefore(\n                  element.childNodes[oldIndex + newCount],\n                  element.childNodes[newIndex],\n                )\n                // Move node in abstract tree.\n                oldAbstractTree.splice(\n                  newIndex - newCount,\n                  0,\n                  ...oldAbstractTree.splice(\n                    oldIndex,\n                    1,\n                  )\n                )\n              }\n              if ((newAbstract as NodeAbstract).t) {\n                updateAttributes(\n                  (element.childNodes[newIndex] as Element),\n                  (newAbstract as NodeAbstract).a,\n                  (oldAbstract as NodeAbstract).a,\n                )\n                updateElementTree(\n                  (element.childNodes[newIndex] as Element),\n                  (newAbstract as NodeAbstract).c,\n                  (oldAbstract as NodeAbstract).c,\n                )\n              } else {\n                element.childNodes[newIndex].textContent = (\n                  typeof (newAbstract) === 'string'\n                    ? newAbstract\n                    : (newAbstract as TextAbstract).c\n                )\n              }\n              break\n            }\n          }\n        }\n\n        if (!matched) {\n          if ((newAbstract as NodeAbstract).t) {\n            const childElement = document.createElement(\n              (newAbstract as NodeAbstract).t\n            )\n\n            if ((newAbstract as NodeAbstract).a) {\n              updateAttributes(\n                childElement,\n                (newAbstract as NodeAbstract).a,\n              )\n            }\n            if ((newAbstract as NodeAbstract).c) {\n              updateElementTree(\n                childElement,\n                (newAbstract as NodeAbstract).c,\n              )\n            }\n\n            if (element.childNodes.length > newIndex) {\n              (element.childNodes[newIndex] as Element)\n                .insertAdjacentElement(\n                  'afterend',\n                  childElement,\n                )\n            } else {\n              element.insertAdjacentElement(\n                'beforeend',\n                childElement,\n              )\n            }\n            newCount++\n          } else {\n            const childElement = (\n              typeof (newAbstract) === 'string'\n                ? newAbstract\n                : (newAbstract as TextAbstract).c\n            )\n\n            if (element.childNodes.length > newIndex) {\n              (element.childNodes[newIndex] as Element)\n                .insertAdjacentText(\n                  'afterend',\n                  childElement,\n                )\n            } else {\n              element.insertAdjacentText(\n                'beforeend',\n                childElement,\n              )\n            }\n            newCount++\n          }\n        }\n      }\n    }\n\n    // Remove old elements.\n    if (element.childNodes.length >= newIndex) {\n      for (let i = element.childNodes.length - 1; i >= newIndex; i--) {\n        element.childNodes[i].remove()\n      }\n    }\n  }\n\n  let proxyChanged = true\n  const state = proxify(\n    initialState,\n    (): void => {\n      proxyChanged = true\n      requestAnimationFrame(\n        updateAbstracts,\n      )\n    },\n  )\n\n  let oldAbstractTree: NodeContent[] = []\n  const updateAbstracts = (\n  ): void => {\n    if (\n      active &&\n      !updating &&\n      // Only update if changes to the state have been made.\n      proxyChanged &&\n      // Don't update while handling listeners.\n      listenerCount <= 0\n    ) {\n      updating = true\n      proxyChanged = false\n\n      let newAbstractTree = arrayify(\n        renderView(state.p),\n      )\n      updateElementTree(\n        _rootNode,\n        newAbstractTree,\n        oldAbstractTree,\n      )\n      // Store state for next update\n      oldAbstractTree = newAbstractTree\n      oldMemoList = newMemoList\n      newMemoList = []\n\n      updating = false\n      if (proxyChanged) {\n        throw new Error('proxy changed during rendering')\n      }\n    }\n  }\n  updateAbstracts()\n\n  return [\n    updateAbstracts,\n    unmount,\n  ]\n}\n", "import {\n  GenericObject,\n} from '@doars/staark-common/src/generics.js'\n\nimport {\n  marker,\n} from './marker.js'\nimport {\n  MemoAbstract,\n} from './memo.js'\nimport {\n  TextAbstract,\n} from './text.js'\n\nexport type NodeAttributeListener = (\n  event: Event\n) => unknown\n\nexport type NodeAttributes =\n  GenericObject<\n    boolean |\n    null |\n    number |\n    string |\n    (number | string)[] |\n    NodeAttributeListener |\n    GenericObject<number | string>\n  >\n\nexport type NodeContent =\n  string |\n  MemoAbstract |\n  NodeAbstract |\n  TextAbstract\n\nexport type NodeAbstract = {\n  _: Symbol\n  // Attributes\n  a?: NodeAttributes\n  // Content\n  c?: NodeContent[]\n  // Node type\n  t: string\n}\n\nexport const node = (\n  type: string,\n  attributesOrContents?: NodeAttributes | NodeContent | NodeContent[],\n  contents?: NodeContent | NodeContent[],\n): NodeAbstract => {\n  if (\n    typeof (attributesOrContents) !== 'object'\n    || (attributesOrContents as NodeAbstract)._ === marker\n    || Array.isArray(attributesOrContents)\n  ) {\n    contents = attributesOrContents as NodeContent\n    attributesOrContents = undefined\n  }\n\n  return {\n    _: marker,\n    a: attributesOrContents as (NodeAttributes | undefined),\n    c: (\n      Array.isArray(contents)\n        ? contents\n        : [contents] as NodeContent[]\n    ),\n    t: type.toUpperCase(),\n  }\n}\n", "import { iife } from '../../../.scripts/iife.js'\n\nimport { memo } from './library/memo.js'\nimport { mount } from './library/mount.js'\nimport { node } from './library/node.js'\n\niife([\n  'staark',\n], {\n  memo,\n  mount,\n  node,\n})\n"],
  "mappings": "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",
  "names": ["target"]
}
