{
  "version": 3,
  "sources": ["../../staark-common/src/array.ts", "../../staark-common/src/conditional.ts", "../../staark-common/src/marker.ts", "../../staark-common/src/node.ts", "../../staark-common/src/factory.ts", "../../staark-common/src/selector.ts", "../../staark-common/src/fctory.ts", "../../staark-common/src/identifier.ts", "../../staark-common/src/match.ts", "../../staark-common/src/memo.ts", "../../staark-common/src/nde.ts", "../../staark-common/src/clone.ts", "../../staark-common/src/compare.ts", "../../staark-common/src/element.ts", "../src/library/proxy.ts", "../src/library/mount.ts"],
  "sourcesContent": ["/**\n * Ensure the data is an array of not already. Non-truthy values are converted to empty arrays.\n * @param data Data to arrify\n * @returns An array with the data.\n */\nexport const arrayify = <T>(\n  data: T[] | T,\n): T[] => arrayifyOrUndefined(data) ?? []\n\n/**\n * Ensure the data is an array of not already. Non-truthy values are converted to undefined.\n * @param data Data to arrify\n * @returns An array with the data or undefined.\n */\nexport const arrayifyOrUndefined = <T>(\n  data: T[] | T,\n): T[] | undefined => (\n  data\n    ? Array.isArray(data)\n      ? data :\n      [data,]\n    : undefined\n)\n", "import { arrayify } from './array.js'\nimport { NodeAbstract } from './node.js'\n\ntype ResolveFunction = () => NodeAbstract[] | NodeAbstract | null | undefined\n\nexport const conditional = (\n  condition: any,\n  onTruth: NodeAbstract[] | NodeAbstract | ResolveFunction,\n  onFalse?: NodeAbstract[] | NodeAbstract | ResolveFunction,\n): NodeAbstract[] => {\n  let result: NodeAbstract[] | NodeAbstract | ResolveFunction | null | undefined = (\n    condition\n      ? onTruth\n      : onFalse\n  )\n  if (typeof (result) === 'function') {\n    result = result()\n  }\n  return arrayify(result) as NodeAbstract[]\n}\n", "export const marker = 'n'\n", "import {\n  arrayifyOrUndefined\n} from './array.js'\nimport {\n  marker,\n} from './marker.js'\nimport {\n  MemoAbstract,\n} from './memo.js'\n\ntype _NodeAttributeListener = {\n  (event: Event, state: Record<string, any>): unknown\n  (event: Event): unknown\n  (): unknown\n}\n\nexport interface NodeAttributeListener extends _NodeAttributeListener {\n  f?: _NodeAttributeListener\n}\n\nexport type NodeAttributes =\n  Record<string,\n    boolean |\n    null |\n    number |\n    string |\n    (number | string)[] |\n    NodeAttributeListener |\n    Record<string,\n      boolean | number | string\n    >\n  >\n\nexport type NodeContent =\n  string |\n  MemoAbstract |\n  NodeAbstract\n\nexport type NodeAbstract = {\n  // Discriminator\n  _: string,\n  // Attributes\n  a?: NodeAttributes\n  // Content\n  c?: NodeContent[]\n  // Node type\n  t: string\n}\n\nexport const node = (\n  type: string,\n  attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n  contents?: NodeContent[] | NodeContent,\n): NodeAbstract => {\n  if (\n    typeof (attributesOrContents) !== 'object'\n    || (attributesOrContents as NodeAbstract)._ === marker\n    || Array.isArray(attributesOrContents)\n  ) {\n    contents = attributesOrContents as NodeContent\n    attributesOrContents = undefined\n  }\n\n  return {\n    _: marker,\n    a: attributesOrContents as (NodeAttributes | undefined),\n    c: arrayifyOrUndefined(contents) as NodeContent[] | undefined,\n    t: type.toUpperCase(),\n  }\n}\n", "import {\n  node,\n  NodeAbstract,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\n\nexport type Factory = (\n  attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n  contents?: NodeContent[] | NodeContent,\n) => NodeAbstract\n\nexport type FactoryCache = {\n  [key: string]: Factory,\n}\n\nexport const factory = new Proxy({}, {\n  get: (\n    target: FactoryCache,\n    type: string,\n  ): Factory => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n      contents?: NodeContent[] | NodeContent,\n    ): NodeAbstract => node(\n      typeConverted,\n      attributesOrContents,\n      contents,\n    )\n  },\n})\n", "const BRACKET_CLOSE = ']'\nconst BRACKET_OPEN = '['\nconst DOT = '.'\nconst EQUAL = '='\nconst HASH = '#'\nconst QUOTE_SINGLE = '\\''\nconst QUOTE_DOUBLE = '\"'\n\nenum TokenTypes {\n  attribute = 0,\n  class = 1,\n  id = 2,\n  type = 3,\n}\n\nexport const selectorToTokenizer = (\n  selector: string,\n): [string, Record<string, any>] => {\n  const length: number = selector.length\n  let i: number = 0\n\n  let type: string = ''\n  const attributes: Record<string, any> = {}\n\n  let tokenA: string = ''\n  let tokenB: string | true = true\n  let tokenType: TokenTypes = TokenTypes.type\n  const storeToken = () => {\n    if (tokenA) {\n      switch (tokenType) {\n        case TokenTypes.attribute:\n          attributes[tokenA] = tokenB === true ? true : tokenB\n          tokenB = true\n          break\n\n        case TokenTypes.class:\n          if (!attributes.class) {\n            attributes.class = tokenA\n            break\n          }\n          attributes.class += ' ' + tokenA\n          break\n\n        case TokenTypes.id:\n          attributes.id = tokenA\n          break\n\n        case TokenTypes.type:\n          type = tokenA\n          break\n      }\n      tokenA = ''\n    }\n  }\n\n  let character: string\n\n  let attributeBracketCount: number\n  const parseAttribute = (\n  ): void => {\n    attributeBracketCount = 0\n\n    while (i < length) {\n      character = selector[i]\n      i++\n      if (character === EQUAL) {\n        // Parse attribute value.\n        tokenB = ''\n        character = selector[i]\n        const endOnDoubleQuote = character === QUOTE_DOUBLE\n        const endOnSingleQuote = character === QUOTE_SINGLE\n        if (endOnDoubleQuote || endOnSingleQuote) {\n          tokenB += character\n          i++\n        }\n\n        while (i < length) {\n          character = selector[i]\n          if (\n            (endOnDoubleQuote && character === QUOTE_DOUBLE) ||\n            (endOnSingleQuote && character === QUOTE_SINGLE)\n          ) {\n            tokenB += character\n            i++\n            break\n          } else if (\n            !endOnDoubleQuote &&\n            !endOnSingleQuote &&\n            character === BRACKET_CLOSE\n          ) {\n            break\n          }\n          tokenB += character\n          i++\n        }\n\n        if (\n          (\n            tokenB[0] === QUOTE_DOUBLE &&\n            tokenB[tokenB.length - 1] === QUOTE_DOUBLE\n          ) ||\n          (\n            tokenB[0] === QUOTE_SINGLE &&\n            tokenB[tokenB.length - 1] === QUOTE_SINGLE\n          )\n        ) {\n          tokenB = tokenB.substring(1, tokenB.length - 1)\n        }\n\n\n        // Consume until closing bracket, but don't store the tokes since these are invalid.\n        while (i < length) {\n          character = selector[i]\n          i++\n          if (character === BRACKET_CLOSE) {\n            break\n          }\n        }\n        break\n      } else if (character === BRACKET_OPEN) {\n        attributeBracketCount++\n        continue\n      } else if (character === BRACKET_CLOSE) {\n        attributeBracketCount--\n        if (attributeBracketCount < 0) {\n          break\n        }\n        continue\n      }\n\n      tokenA += character\n    }\n    storeToken()\n  }\n\n  while (i < length) {\n    character = selector[i]\n    i++\n\n    if (character === HASH) {\n      storeToken()\n      tokenType = TokenTypes.id\n      continue\n    } else if (character === DOT) {\n      storeToken()\n      tokenType = TokenTypes.class\n      continue\n    } else if (character === BRACKET_OPEN) {\n      storeToken()\n      tokenType = TokenTypes.attribute\n      parseAttribute()\n      continue\n    }\n\n    tokenA += character\n  }\n\n  return [type, attributes]\n}\n", "\nimport {\n  node,\n  NodeAbstract,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\nimport {\n  selectorToTokenizer,\n} from './selector.js'\n\nexport type Fctory = (\n  attributes?: string,\n  contents?: NodeContent[] | NodeContent,\n) => NodeAbstract\n\nexport type FctoryCache = {\n  [key: string]: Fctory,\n}\n\nexport const fctory = new Proxy({}, {\n  get: (\n    target: FctoryCache,\n    type: string,\n  ): Fctory => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      selector?: string,\n      contents?: NodeContent[] | NodeContent,\n    ): NodeAbstract => {\n      let attributes: NodeAttributes | undefined\n      if (selector) {\n        const [_, _attributes] = selectorToTokenizer(selector)\n        attributes = _attributes\n      }\n      return node(\n        typeConverted,\n        attributes,\n        contents,\n      )\n    }\n  },\n})\n", "let identifierCount = 0\nexport const identifier = (\n  prefix: string,\n): string => prefix + '-' + (identifierCount++)\n", "import { arrayify } from './array.js'\nimport { NodeAbstract } from './node.js'\n\ntype ResolveFunction = () => NodeAbstract[] | NodeAbstract | null | undefined\n\nexport const match = (\n  pattern: any,\n  lookup: Record<any, NodeAbstract[] | NodeAbstract | ResolveFunction | null | undefined>,\n  fallback: NodeAbstract[] | NodeAbstract | ResolveFunction | null | undefined,\n): NodeAbstract[] => {\n  let result: NodeAbstract[] | NodeAbstract | ResolveFunction | null | undefined\n  if (\n    lookup\n    && (pattern in lookup)\n    && lookup[pattern]\n  ) {\n    result = lookup[pattern]\n    if (typeof (result) === 'function') {\n      result = result()\n    }\n  } else {\n    result = fallback\n  }\n  return arrayify(result) as NodeAbstract[]\n}\n", "import {\n  marker,\n} from './marker.js'\nimport { NodeContent } from './node.js'\n\nexport type MemoFunction = (\n  state: Record<string, any>,\n  memory: any,\n) => NodeContent[] | NodeContent\n\nexport type MemoAbstract = {\n  _: Symbol,\n  // Compare data\n  m: any,\n  // Render function\n  r: MemoFunction,\n}\n\nexport const memo = (\n  render: MemoFunction,\n  memory: any,\n) => ({\n  _: marker,\n  r: render,\n  m: memory,\n})\n", "import { arrayify, arrayifyOrUndefined } from './array.js'\nimport {\n  marker,\n} from './marker.js'\nimport {\n  NodeAbstract,\n  NodeContent,\n} from './node.js'\nimport {\n  selectorToTokenizer,\n} from './selector.js'\n\nexport const nde = (\n  selector: string,\n  contents?: NodeContent[] | NodeContent,\n): NodeAbstract => {\n  const [type, attributes] = selectorToTokenizer(selector)\n\n  return {\n    _: marker,\n    a: attributes,\n    c: arrayifyOrUndefined(contents) as NodeContent[] | undefined,\n    t: type.toUpperCase(),\n  }\n}\n", "/**\n * Creates a deep clone of a javascript value.\n * @param value Data to clone.\n * @returns Clone of the data.\n */\nexport const cloneRecursive = (\n  value: any,\n) => {\n  if (typeof (value) === 'object') {\n    const clone: Record<any, any> = (\n      Array.isArray(value)\n        ? []\n        : {}\n    )\n    for (const key in value) {\n      clone[key] = cloneRecursive(value[key])\n    }\n    return clone\n  }\n  return value\n}\n", "export const equalRecursive = (\n  valueA: any,\n  valueB: any,\n): boolean => {\n  if (valueA === valueB) {\n    return true\n  }\n\n  if (\n    !valueA\n    || !valueB\n    || typeof valueA !== 'object'\n    || typeof valueB !== 'object'\n  ) {\n    return valueA === valueB\n  }\n\n  if (\n    valueA instanceof Date) {\n    return (\n      valueB instanceof Date\n      && valueA.getTime() === valueB.getTime()\n    )\n  }\n\n  // if (valueA.prototype !== valueB.prototype) {\n  //   return false\n  // }\n\n  const keys = Object.keys(valueA)\n  return (\n    keys.length === Object.keys(valueB).length\n    && keys.every(k => equalRecursive(valueA[k], valueB[k]))\n  )\n}\n", "import {\n  node,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\n\nexport const childrenToNodes = (\n  element: Element | ChildNode,\n) => {\n  const abstractChildNodes: NodeContent[] = []\n  for (const childNode of element.childNodes) {\n    if (childNode instanceof Text) {\n      abstractChildNodes.push(\n        childNode.textContent ?? ''\n      )\n    } else {\n      const elementChild = childNode as Element\n      const attributes: NodeAttributes = {}\n      for (const attribute of elementChild.attributes) {\n        attributes[attribute.name] = attribute.value\n      }\n\n      abstractChildNodes.push(\n        node(\n          childNode.nodeName,\n          attributes,\n          childrenToNodes(childNode),\n        )\n      )\n    }\n  }\n  return abstractChildNodes\n}\n", "export const proxify = (\n  root: Record<string, any>,\n  onChange: () => void,\n): Record<string, any> => {\n  // Setup WeakMap to keep track of created proxies.\n  const map = new WeakMap<\n    Record<string, any>,\n    Record<string, any>\n  >()\n\n  const handler = {\n    deleteProperty: (\n      target: Record<string, any>,\n      key: string,\n    ): boolean => {\n      if (Reflect.has(target, key)) {\n        const deleted = Reflect.deleteProperty(target, key)\n\n        if (deleted) {\n          onChange()\n        }\n\n        return deleted\n      }\n      return true\n    },\n\n    set: (\n      target: Record<string, any>,\n      key: string,\n      value: any,\n    ): boolean => {\n      const existingValue = target[key]\n      if (existingValue !== value) {\n        // Add proxy if value is an object.\n        if (\n          value\n          && typeof (value) === 'object'\n        ) {\n          value = add(value)\n        }\n        target[key] = value\n\n        // Dispatch set event. If the target is an array and a new item has been pushed then the length has also changed, therefore a more generalizable path will be dispatched.\n        onChange()\n      }\n      return true\n    },\n  }\n\n  /**\n   * Add object to start keeping track of it.\n   * @param {Object} target Object that is being kept track of.\n   * @returns {Proxy} Object to access and mutate.\n   */\n  const add = (\n    target: Record<string, any>,\n  ): Record<string, any> => {\n    // Exit early if proxy already exists prevent recursion.\n    if (map.has(target)) {\n      return map.get(target)!\n    }\n\n    // Recursively create proxies for each property.\n    for (const key in target) {\n      if (\n        target[key]\n        && typeof (target[key]) === 'object'\n      ) {\n        target[key] = add(target[key])\n      }\n    }\n\n    const proxy = new Proxy(target, handler)\n    map.set(target, proxy)\n\n    return proxy\n  }\n\n  return add(root)\n}\n", "import {\n  arrayifyOrUndefined,\n} from '@doars/staark-common/src/array.js'\nimport {\n  cloneRecursive\n} from '@doars/staark-common/src/clone.js'\nimport {\n  equalRecursive,\n} from '@doars/staark-common/src/compare.js'\nimport {\n  childrenToNodes,\n} from '@doars/staark-common/src/element.js'\nimport {\n  MemoAbstract,\n  MemoFunction,\n} from '@doars/staark-common/src/memo.js'\nimport {\n  NodeAbstract,\n  NodeAttributes,\n  NodeAttributeListener,\n  NodeContent,\n} from '@doars/staark-common/src/node.js'\nimport {\n  proxify,\n} from './proxy.js'\n\nexport type GenericFunction<DataType, ReturnType> = (\n  argument: DataType\n) => ReturnType\n\nexport type GenericFunctionUnknown = (\n) => unknown\n\ntype MemoData = {\n  c: NodeContent[],\n  m: any,\n  r: MemoFunction,\n}\n\nexport type ViewFunction = (\n  state: Record<string, any>,\n) => NodeContent[] | NodeContent\n\nexport const mount = (\n  rootElement: HTMLElement | Element | string,\n  renderView: ViewFunction,\n  initialState?: Record<string, any> | string,\n  oldAbstractTree?: NodeContent[] | string | null,\n): undefined | [GenericFunction<string[], void>, GenericFunctionUnknown, Record<string, any>] => {\n  if (typeof (initialState) === 'string') {\n    initialState = JSON.parse(initialState) as Record<string, any>\n  }\n  if (!initialState) {\n    initialState = {}\n  }\n  let updatePromise: Promise<void> | null = null\n  const triggerUpdate = (\n  ): Promise<void> | null => {\n    if (!updatePromise) {\n      updatePromise = Promise.resolve()\n        .then(updateAbstracts)\n    }\n    return updatePromise\n  }\n  let state = (\n    Object.getPrototypeOf(initialState) === Proxy.prototype\n      ? initialState\n      : proxify(\n        initialState,\n        triggerUpdate,\n      )\n  )\n\n  const updateAttributes = (\n    element: Element,\n    newAttributes?: NodeAttributes,\n    oldAttributes?: NodeAttributes,\n  ): void => {\n    if (newAttributes) {\n      for (const name in newAttributes) {\n        let value = newAttributes[name]\n        if (value) {\n          const type = typeof (value)\n          if (type === 'function') {\n            // Wrap listeners so comparisons can be done between updates.\n            const oldValue = oldAttributes?.[name] as NodeAttributeListener | undefined\n            if (oldValue?.f !== (value as NodeAttributeListener)) {\n              if (oldValue) {\n                element.removeEventListener(\n                  name,\n                  oldValue as NodeAttributeListener,\n                )\n              }\n\n              const listener: NodeAttributeListener = newAttributes[name] = (\n                (event: Event) => {\n                  (value as NodeAttributeListener)(event, state)\n                }\n              ) as NodeAttributeListener\n              listener.f = (value as NodeAttributeListener)\n\n              element.addEventListener(\n                name,\n                listener,\n              )\n            }\n          } else {\n            if (name === 'class') {\n              if (typeof (value) === 'object') {\n                if (Array.isArray(value)) {\n                  value = value.join(' ')\n                } else {\n                  let classNames: string = ''\n                  for (const className in value) {\n                    if (value[className]) {\n                      classNames += ' ' + className\n                    }\n                  }\n                  value = classNames\n                }\n              }\n              element.className = value as string\n            } else if (\n              name === 'style'\n              && typeof (value) === 'object'\n            ) {\n              // Apply updated styles.\n              for (let styleName in value) {\n                let styleValue = (\n                  value as Record<string, boolean | string | null | undefined | number | (boolean | string | number)[]>\n                )[styleName]\n                if (styleName.includes('-', 1)) {\n                  (element as HTMLElement).style.setProperty(\n                    styleName,\n                    styleValue as string,\n                  )\n                } else {\n                  // @ts-ignore\n                  (element as HTMLElement).style[styleName] = styleValue as string\n                }\n              }\n\n              // Remove old styles.\n              if (\n                oldAttributes\n                && oldAttributes[name]\n                && typeof (oldAttributes[name]) === 'object'\n                && !Array.isArray(oldAttributes[name])\n              ) {\n                for (let styleName in oldAttributes[name]) {\n                  if (!(styleName in value)) {\n                    if (styleName.includes('-')) {\n                      (element as HTMLElement).style.removeProperty(\n                        styleName,\n                      )\n                    } else {\n                      // @ts-ignore\n                      delete (element as HTMLElement).style[styleName]\n                    }\n                  }\n                }\n              }\n            } else {\n              // Ensure it is of type string.\n              if (value === true) {\n                value = 'true'\n              } else if (type !== 'string') {\n                value = value.toString()\n              }\n\n              element.setAttribute(name, (value as string))\n            }\n          }\n        }\n      }\n    }\n\n    // Cleanup old attributes.\n    if (oldAttributes) {\n      for (const name in oldAttributes) {\n        const value = oldAttributes[name]\n        if (\n          !newAttributes\n          || !newAttributes[name]\n        ) {\n          if (typeof (value) === 'function') {\n            element.removeEventListener(\n              name,\n              oldAttributes[name] as NodeAttributeListener,\n            )\n          } else if (name === 'class') {\n            element.className = ''\n          } else if (name === 'style') {\n            (element as HTMLElement).style.cssText = ''\n          } else if (name === 'value') {\n            (element as HTMLInputElement).value = ''\n            // Don't dispatch the input change event, the rerendering should update everything: element.dispatchEvent(new Event('change'))\n          } else {\n            element.removeAttribute(name)\n          }\n        }\n      }\n    }\n  }\n\n  let oldMemoMap: WeakMap<MemoFunction, MemoData> = new WeakMap()\n  let newMemoMap: WeakMap<MemoFunction, MemoData> = new WeakMap()\n  const updateElementTree = (\n    element: Element,\n    newChildAbstracts?: NodeContent[],\n    oldChildAbstracts?: NodeContent[],\n  ): void => {\n    let newIndex = 0\n    let newCount = 0\n    if (newChildAbstracts) {\n      for (; newIndex < newChildAbstracts.length; newIndex++) {\n        const newAbstract = newChildAbstracts[newIndex]\n\n        // Handle memoization.\n        if ((newAbstract as MemoAbstract).r) {\n          let match: MemoData | undefined = oldMemoMap.get(\n            (newAbstract as MemoAbstract).r,\n          )\n          if (\n            !match\n            || !equalRecursive(match.m, (newAbstract as MemoAbstract).m)\n          ) {\n            match = {\n              c: arrayifyOrUndefined(\n                (newAbstract as MemoAbstract).r(\n                  state,\n                  (newAbstract as MemoAbstract).m,\n                )\n              ),\n              m: (newAbstract as MemoAbstract).m,\n              r: (newAbstract as MemoAbstract).r,\n            } as MemoData\n          }\n\n          newMemoMap.set((newAbstract as MemoAbstract).r, match)\n\n          // Splice nodes into the tree and re-run the loop again.\n          newChildAbstracts.splice(\n            newIndex,\n            1,\n            // NOTE: Is a recursive clone required here? Yes as long as the old abstract tree is mutated.\n            ...cloneRecursive(\n              match.c,\n            ),\n          )\n          // NOTE: Preferably we would skip re-rendering when the nodes were memoized, but because those nodes might have morphed we'll have to check. So we re-process the node again that was just inserted in. We could have the resolve memoization return whether it was re-rendered, but this also means the nodes are not allowed to be re-used when morphing the DOM and this needs to be prevented by marking them as such.\n          newIndex--\n          continue\n        }\n\n        // Try to find the matching old abstract.\n        let matched = false\n        if (oldChildAbstracts) {\n          for (let oldIndex = newIndex - newCount; oldIndex < oldChildAbstracts.length; oldIndex++) {\n            const oldAbstract = oldChildAbstracts[oldIndex]\n            if (\n              (\n                (oldAbstract as NodeAbstract).t\n                && (newAbstract as NodeAbstract).t === (oldAbstract as NodeAbstract).t\n              )\n              || (\n                !(oldAbstract as NodeAbstract).t\n                && !(newAbstract as NodeAbstract).t\n              )\n            ) {\n              matched = true\n\n              if (newIndex !== (oldIndex + newCount)) {\n                // Move node in dom.\n                element.insertBefore(\n                  element.childNodes[oldIndex + newCount],\n                  element.childNodes[newIndex],\n                )\n                // Move node in abstract tree.\n                oldChildAbstracts.splice(\n                  newIndex - newCount,\n                  0,\n                  oldChildAbstracts.splice(\n                    oldIndex,\n                    1,\n                  )[0]\n                )\n              }\n\n              if ((newAbstract as NodeAbstract).t) {\n                updateAttributes(\n                  (element.childNodes[newIndex] as Element),\n                  (newAbstract as NodeAbstract).a,\n                  (oldAbstract as NodeAbstract).a,\n                )\n                updateElementTree(\n                  (element.childNodes[newIndex] as Element),\n                  (newAbstract as NodeAbstract).c,\n                  (oldAbstract as NodeAbstract).c,\n                )\n              } else if (oldAbstract !== newAbstract) {\n                element.childNodes[newIndex].textContent = newAbstract as string\n              }\n              break\n            }\n          }\n        }\n\n        if (!matched) {\n          let newNode: Node\n          if ((newAbstract as NodeAbstract).t) {\n            newNode = document.createElement(\n              (newAbstract as NodeAbstract).t,\n            )\n            updateAttributes(\n              newNode as HTMLElement,\n              (newAbstract as NodeAbstract).a,\n            )\n            updateElementTree(\n              newNode as HTMLElement,\n              (newAbstract as NodeAbstract).c,\n            )\n          } else {\n            newNode = document.createTextNode(\n              newAbstract as string,\n            )\n          }\n\n          element.insertBefore(\n            newNode,\n            element.childNodes[newIndex],\n          )\n          newCount++\n        }\n      }\n    }\n\n    if (oldChildAbstracts) {\n      const elementLength = oldChildAbstracts.length + newCount\n      if (elementLength >= newIndex) {\n        for (let i = elementLength - 1; i >= newIndex; i--) {\n          element.childNodes[i].remove()\n        }\n      }\n    }\n  }\n\n  const _rootElement = (\n    typeof (rootElement) === 'string'\n      ? (\n        document.querySelector(rootElement)\n        || document.body.appendChild(\n          document.createElement('div')\n        )\n      )\n      : rootElement\n  )\n\n  if (typeof (oldAbstractTree) === 'string') {\n    try {\n      oldAbstractTree = JSON.parse(oldAbstractTree) as NodeContent[]\n    } catch (error) {\n      oldAbstractTree = null\n    }\n  }\n  if (!oldAbstractTree) {\n    oldAbstractTree = childrenToNodes(_rootElement)\n  }\n\n  let active: boolean = true,\n    updating: boolean = false\n  const updateAbstracts = (\n  ): void => {\n    if (\n      active\n      && !updating\n      // Only update if changes to the state have been made.\n      && updatePromise\n    ) {\n      updating = true\n      updatePromise = null\n\n      let newAbstractTree = arrayifyOrUndefined(\n        renderView(state),\n      )\n      updateElementTree(\n        _rootElement,\n        newAbstractTree,\n        oldAbstractTree as NodeContent[],\n      )\n      // Store tree for next update.\n      oldAbstractTree = newAbstractTree\n      oldMemoMap = newMemoMap\n      newMemoMap = new WeakMap()\n\n      updating = false\n    }\n  }\n  // Trigger update first so the promise that is checked gets set.\n  triggerUpdate()\n  // Now perform initial update.\n  updateAbstracts()\n\n  return [\n    triggerUpdate,\n    (): void => {\n      if (active) {\n        active = false\n\n        for (let i = _rootElement.childNodes.length - 1; i >= 0; i--) {\n          _rootElement.childNodes[i].remove()\n        }\n      }\n    },\n    state,\n  ]\n}\n"],
  "mappings": "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",
  "names": ["match"]
}
