{
  "version": 3,
  "sources": ["../src/library/marker.ts", "../src/library/node.ts", "../src/library/factory.ts", "../../staark-common/src/selector.ts", "../src/library/fctory.ts", "../src/library/memo.ts", "../../staark-common/src/array.ts", "../../staark-common/src/clone.ts", "../../staark-common/src/compare.ts", "../src/utilities/proxy.ts", "../src/library/mount.ts", "../src/library/nde.ts", "../src/library/text.ts"],
  "sourcesContent": ["export const marker = Symbol()\n", "import {\n  GenericObject,\n} from '@doars/staark-common/src/generics.js'\n\nimport {\n  marker,\n} from './marker.js'\nimport {\n  MemoAbstract,\n} from './memo.js'\nimport {\n  TextAbstract,\n} from './text.js'\n\nexport type NodeAttributeListener = (\n  event: Event\n) => unknown\n\nexport type NodeAttributes =\n  GenericObject<\n    boolean |\n    null |\n    number |\n    string |\n    (number | string)[] |\n    NodeAttributeListener |\n    GenericObject<number | string>\n  >\n\nexport type NodeContent =\n  string |\n  MemoAbstract |\n  NodeAbstract |\n  TextAbstract\n\nexport type NodeAbstract = {\n  _: Symbol\n  // Attributes\n  a?: NodeAttributes\n  // Content\n  c?: NodeContent[]\n  // Node type\n  t: string\n}\n\nexport const node = (\n  type: string,\n  attributesOrContents?: NodeAttributes | NodeContent | NodeContent[],\n  contents?: NodeContent | NodeContent[],\n): NodeAbstract => {\n  if (\n    typeof (attributesOrContents) !== 'object'\n    || (attributesOrContents as NodeAbstract)._ === marker\n    || Array.isArray(attributesOrContents)\n  ) {\n    contents = attributesOrContents as NodeContent\n    attributesOrContents = undefined\n  }\n\n  return {\n    _: marker,\n    a: attributesOrContents as (NodeAttributes | undefined),\n    c: (\n      contents\n        ? Array.isArray(contents)\n          ? contents\n          : [contents] as NodeContent[]\n        : []\n    ),\n    t: type.toUpperCase(),\n  }\n}\n", "import {\n  node,\n  NodeAbstract,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\n\nexport type Factory = (\n  attributesOrContents?: NodeAttributes | NodeContent | NodeContent[],\n  contents?: NodeContent | NodeContent[],\n) => NodeAbstract\n\nexport type FactoryCache = {\n  [key: string]: Factory,\n}\n\nexport const factory = new Proxy({}, {\n  get: (\n    target: FactoryCache,\n    type: string,\n  ): Factory => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      attributesOrContents?: NodeAttributes | NodeContent | NodeContent[],\n      contents?: NodeContent | NodeContent[],\n    ): NodeAbstract => node(\n      typeConverted,\n      attributesOrContents,\n      contents,\n    )\n  },\n})\n", "\nimport {\n  GenericObjectAny,\n} from './generics.js'\n\nconst BRACKET_CLOSE = ']'\nconst BRACKET_OPEN = '['\nconst DOT = '.'\nconst EQUAL = '='\nconst HASH = '#'\nconst QUOTE_SINGLE = '\\''\nconst QUOTE_DOUBLE = '\"'\n\nenum TokenTypes {\n  attribute = 0,\n  class = 1,\n  id = 2,\n  type = 3,\n}\n\nexport const tokenizer = (\n  selector: string,\n): [string, GenericObjectAny] => {\n  const length: number = selector.length\n  let i: number = 0\n\n  let type: string = ''\n  const attributes: GenericObjectAny = {}\n\n  let tokenA: string = ''\n  let tokenB: string | true = true\n  let tokenType: TokenTypes = TokenTypes.type\n  const storeToken = () => {\n    if (tokenA) {\n      switch (tokenType) {\n        case TokenTypes.attribute:\n          attributes[tokenA] = tokenB === true ? true : tokenB\n          tokenB = true\n          break\n\n        case TokenTypes.class:\n          if (!attributes.class) {\n            attributes.class = tokenA\n            break\n          }\n          attributes.class += ' ' + tokenA\n          break\n\n        case TokenTypes.id:\n          attributes.id = tokenA\n          break\n\n        case TokenTypes.type:\n          type = tokenA\n          break\n      }\n      tokenA = ''\n    }\n  }\n\n  let character: string\n\n  let attributeBracketCount: number\n  const parseAttribute = (\n  ): void => {\n    attributeBracketCount = 0\n\n    while (i < length) {\n      character = selector[i]\n      i++\n      if (character === EQUAL) {\n        // Parse attribute value.\n        tokenB = ''\n        character = selector[i]\n        const endOnDoubleQuote = character === QUOTE_DOUBLE\n        const endOnSingleQuote = character === QUOTE_SINGLE\n        if (endOnDoubleQuote || endOnSingleQuote) {\n          tokenB += character\n          i++\n        }\n\n        while (i < length) {\n          character = selector[i]\n          if (\n            (endOnDoubleQuote && character === QUOTE_DOUBLE) ||\n            (endOnSingleQuote && character === QUOTE_SINGLE)\n          ) {\n            tokenB += character\n            i++\n            break\n          } else if (\n            !endOnDoubleQuote &&\n            !endOnSingleQuote &&\n            character === BRACKET_CLOSE\n          ) {\n            break\n          }\n          tokenB += character\n          i++\n        }\n\n        if (\n          (\n            tokenB[0] === QUOTE_DOUBLE &&\n            tokenB[tokenB.length - 1] === QUOTE_DOUBLE\n          ) ||\n          (\n            tokenB[0] === QUOTE_SINGLE &&\n            tokenB[tokenB.length - 1] === QUOTE_SINGLE\n          )\n        ) {\n          tokenB = tokenB.substring(1, tokenB.length - 1)\n        }\n\n\n        // Consume until closing bracket, but don't store the tokes since these are invalid.\n        while (i < length) {\n          character = selector[i]\n          i++\n          if (character === BRACKET_CLOSE) {\n            break\n          }\n        }\n        break\n      } else if (character === BRACKET_OPEN) {\n        attributeBracketCount++\n        continue\n      } else if (character === BRACKET_CLOSE) {\n        attributeBracketCount--\n        if (attributeBracketCount < 0) {\n          break\n        }\n        continue\n      }\n\n      tokenA += character\n    }\n    storeToken()\n  }\n\n  while (i < length) {\n    character = selector[i]\n    i++\n\n    if (character === HASH) {\n      storeToken()\n      tokenType = TokenTypes.id\n      continue\n    } else if (character === DOT) {\n      storeToken()\n      tokenType = TokenTypes.class\n      continue\n    } else if (character === BRACKET_OPEN) {\n      storeToken()\n      tokenType = TokenTypes.attribute\n      parseAttribute()\n      continue\n    }\n\n    tokenA += character\n  }\n\n  return [type, attributes]\n}\n", "import {\n  tokenizer,\n} from '@doars/staark-common/src/selector.js'\n\nimport {\n  node,\n  NodeAbstract,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\n\nexport type Fctory = (\n  attributes?: string,\n  contents?: NodeContent | NodeContent[],\n) => NodeAbstract\n\nexport type FctoryCache = {\n  [key: string]: Fctory,\n}\n\nexport const fctory = new Proxy({}, {\n  get: (\n    target: FctoryCache,\n    type: string,\n  ): Fctory => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      selector?: string,\n      contents?: NodeContent | NodeContent[],\n    ): NodeAbstract => {\n      let attributes: NodeAttributes | undefined\n      if (selector) {\n        const [_, _attributes] = tokenizer(selector)\n        attributes = _attributes\n      }\n      return node(\n        typeConverted,\n        attributes,\n        contents,\n      )\n    }\n  },\n})\n", "import { GenericObject } from '@doars/staark-common/src/generics.js'\nimport {\n  marker,\n} from './marker.js'\nimport { NodeContent } from './node.js'\n\nexport type MemoFunction = (\n  state: GenericObject<any>,\n  memory: any,\n) => NodeContent | NodeContent[]\n\nexport type MemoAbstract = {\n  _: Symbol,\n  // Compare data\n  m: any,\n  // Render function\n  r: MemoFunction,\n}\n\nexport const memo = (\n  render: MemoFunction,\n  memory: any,\n) => ({\n  _: marker,\n  r: render,\n  m: memory,\n})\n", "export const arrayify = function <T>(\n  data: T[] | T,\n): T[] {\n  if (Array.isArray(data)) {\n    return data\n  }\n  return [\n    data,\n  ]\n}\n\nexport default {\n  arrayify,\n}\n", "import {\n  GenericObjectAny,\n} from './generics.js'\n\nexport const cloneRecursive = (\n  value: any,\n) => {\n  if (typeof (value) === 'object') {\n    if (Array.isArray(value)) {\n      const clone: any[] = []\n      for (let i = 0; i < value.length; i++) {\n        clone.push(cloneRecursive(value[i]))\n      }\n      value = clone\n    } else {\n      const clone: GenericObjectAny = {}\n      for (const key in value) {\n        clone[key] = cloneRecursive(value[key])\n      }\n      value = clone\n    }\n  }\n  return value\n}\n", "export const equalRecursive = (\n  valueA: any,\n  valueB: any,\n): boolean => {\n  if (valueA === valueB) {\n    return true\n  }\n  if (\n    valueA instanceof Date\n    && valueB instanceof Date\n  ) {\n    return valueA.getTime() === valueB.getTime()\n  }\n  if (\n    !valueA\n    || !valueB\n    || (\n      typeof valueA !== 'object' && typeof valueB !== 'object'\n    )\n  ) {\n    return valueA === valueB\n  }\n  if (\n    valueA === null\n    || valueA === undefined\n    || valueB === null\n    || valueB === undefined\n  ) {\n    return false\n  }\n  if (valueA.prototype !== valueB.prototype) {\n    return false\n  }\n  let keys = Object.keys(valueA)\n  if (keys.length !== Object.keys(valueB).length) {\n    return false\n  }\n  return keys.every(\n    (key: string): boolean => equalRecursive(valueA[key], valueB[key]),\n  )\n}\n", "import {\n  GenericObjectAny,\n} from '@doars/staark-common/src/generics.js'\n\nexport type ProxyData = {\n  // Proxy\n  p: GenericObjectAny\n  // Stop proxy\n  s: () => void\n}\n\nexport const proxify = (\n  root: GenericObjectAny,\n  onChange: () => void,\n): ProxyData => {\n  // Setup WeakMap to keep track of created proxies.\n  const map = new WeakMap()\n\n  /**\n   * Remove object from being kept track of.\n   * @param {GenericObjectAny} target Object that is being kept track of.\n   */\n  const remove = (\n    target: GenericObjectAny,\n  ): void => {\n    // Check if target exists in case of recursion.\n    if (map.has(target)) {\n      // Remove target from the map.\n      const revocable = map.get(target)\n      map.delete(revocable)\n\n      // Recursively remove properties as well.\n      for (const property in revocable.proxy) {\n        if (typeof (revocable.proxy[property]) === 'object') {\n          remove(revocable.proxy[property])\n        }\n      }\n\n      // Revoke proxy.\n      revocable.revoke()\n    }\n  }\n\n  /**\n   * Add object to start keeping track of it.\n   * @param {Object} target Object that is being kept track of.\n   * @returns {Proxy} Object to access and mutate.\n   */\n  const add = (\n    target: GenericObjectAny,\n  ): GenericObjectAny => {\n    // Exit early if proxy already exists prevent recursion.\n    if (map.has(target)) {\n      return map.get(target)\n    }\n\n    // Recursively create proxies for each property.\n    for (const key in target) {\n      if (target[key] && typeof (target[key]) === 'object') {\n        target[key] = add(target[key])\n      }\n    }\n\n    // Create proxy.\n    const revocable = Proxy.revocable(target, {\n      deleteProperty: (\n        target: GenericObjectAny,\n        key: string,\n      ): boolean => {\n        // Exit early successful if property doesn't exist.\n        if (!Reflect.has(target, key)) {\n          return true\n        }\n\n        // Remove proxy.\n        remove(target)\n\n        // Delete property.\n        const deleted = Reflect.deleteProperty(target, key)\n\n        // Dispatch delete event.\n        if (deleted) {\n          onChange()\n        }\n\n        // Return deleted.\n        return deleted\n      },\n\n      set: (\n        target: GenericObjectAny,\n        key: string,\n        value: any,\n      ): boolean => {\n        const existingValue = target[key]\n        if (existingValue !== value) {\n          // Remove existing value if value is an object.\n          if (typeof (existingValue) === 'object') {\n            remove(existingValue)\n          }\n\n          // Add proxy if value is an object.\n          if (value && typeof (value) === 'object') {\n            value = add(value)\n          }\n          // Store value.\n          target[key] = value\n\n          // Dispatch set event. If the target is an array and a new item has been pushed then the length has also changed, therefore a more generalizable path will be dispatched.\n          onChange()\n        }\n\n        // Return success.\n        return true\n      },\n    })\n\n    // Store target at proxy.\n    map.set(revocable, target)\n\n    // Return proxy.\n    return revocable.proxy\n  }\n\n  // Return dispatcher and proxy.\n  return {\n    // Add initial root.\n    p: add(root),\n    // Stop dispatcher by removing root.\n    s: () => remove(root),\n  }\n}\n", "import {\n  arrayify,\n} from '@doars/staark-common/src/array.js'\nimport {\n  cloneRecursive,\n} from '@doars/staark-common/src/clone.js'\nimport {\n  equalRecursive,\n} from '@doars/staark-common/src/compare.js'\nimport {\n  GenericFunction,\n  GenericFunctionUnknown,\n  GenericObject,\n  GenericObjectAny,\n} from '@doars/staark-common/src/generics.js'\nimport {\n  proxify,\n} from '../utilities/proxy.js'\n\nimport {\n  MemoAbstract,\n  MemoFunction,\n} from './memo.js'\nimport {\n  NodeAbstract,\n  NodeAttributes,\n  NodeAttributeListener,\n  NodeContent,\n} from './node.js'\nimport {\n  TextAbstract,\n} from './text.js'\n\ntype MemoData = {\n  c: NodeContent[],\n  m: any,\n  r: MemoFunction,\n}\n\nexport type ViewFunction = (\n  state: GenericObject<any>,\n) => NodeContent | NodeContent[]\n\nconst MATCH_CAPITALS = /[A-Z]+(?![a-z])|[A-Z]/g\nconst HYPHENATE = (\n  part: string,\n  offset: number,\n) => (offset ? '-' : '') + part\n\nexport const mount = (\n  rootNode: Element | string,\n  renderView: ViewFunction,\n  initialState?: GenericObject<any>,\n): undefined | [GenericFunction<string[], void>, GenericFunctionUnknown, GenericObjectAny] => {\n  if (!initialState) {\n    initialState = {}\n  }\n\n  let active: boolean = true,\n    updating: boolean = false\n  let _rootNode: Element | null\n  const unmount = (\n  ): void => {\n    if (active) {\n      active = false\n      if (_rootNode) {\n        for (let i = _rootNode.childNodes.length - 1; i >= 0; i--) {\n          _rootNode.childNodes[i].remove()\n        }\n      }\n    }\n  }\n\n  _rootNode = typeof (rootNode) === 'string'\n    ? document.querySelector(rootNode)\n    : rootNode\n  if (!_rootNode) {\n    throw new Error('no root found')\n  }\n  unmount()\n  active = true\n\n  if (!_rootNode) {\n    _rootNode = document.createElement('div')\n    document.body.appendChild(_rootNode)\n  }\n\n  // Track amount of listeners running.\n  let listenerCount = 0\n\n  const updateAttributes = (\n    element: Element,\n    newAttributes: NodeAttributes | null = null,\n    oldAttributes: NodeAttributes | null = null,\n  ): void => {\n    if (newAttributes) {\n      for (const name in newAttributes) {\n        let value = newAttributes[name]\n        if (\n          value !== null\n          && value !== undefined\n        ) {\n          const type = typeof (value)\n          if (type === 'function') {\n            // Wrap the listener so we can prevent re-renders during handling.\n            const listener = newAttributes[name] = (\n              event: Event,\n            ): void => {\n              listenerCount++;\n              (value as NodeAttributeListener)(event)\n              listenerCount--\n              updateAbstracts()\n            }\n            element.addEventListener(name, listener)\n            continue\n          } else {\n            // Ensure it is of type string.\n            if (type === 'boolean') {\n              value = value ? 'true' : 'false'\n            } else if (type !== 'string') {\n              value = value.toString()\n            }\n\n            if (name === 'class') {\n              if (typeof (value) === 'object') {\n                if (Array.isArray(value)) {\n                  value = value.join(' ')\n                } else {\n                  let classNames: string = ''\n                  for (const className in value) {\n                    if (value[className]) {\n                      classNames += ' ' + className\n                    }\n                  }\n                  value = classNames\n                }\n              }\n            } else if (name === 'style') {\n              if (typeof (value) === 'object') {\n                if (Array.isArray(value)) {\n                  value = value.join(';')\n                } else {\n                  let styles: string = ''\n                  for (let styleProperty in value) {\n                    let styleValue: string | number | (string | number)[] = value[styleProperty]\n\n                    // Convert to kebab case.\n                    styleProperty = styleProperty\n                      .replace(MATCH_CAPITALS, HYPHENATE)\n                      .toLowerCase()\n\n                    if (Array.isArray(styleValue)) {\n                      styles += ';' + styleProperty + ':' + styleValue.join(' ')\n                    } else if (value) {\n                      styles += ';' + styleProperty + ':' + value\n                    }\n                  }\n                  value = styles\n                }\n              }\n            } else if (\n              name === 'value' &&\n              (element as HTMLInputElement).value !== value\n            ) {\n              // Update value separately as well.\n              (element as HTMLInputElement).value = value as string\n              // Don't dispatch a change event, the re-rendering should update everything: element.dispatchEvent(new Event('change'))\n            } else if (name === 'checked') {\n              (element as HTMLInputElement).checked = newAttributes[name] as boolean\n              // Don't dispatch a change event, the re-rendering should update everything: element.dispatchEvent(new Event('change'))\n            }\n\n            element.setAttribute(name, (value as string))\n          }\n        }\n      }\n    }\n\n    // Cleanup old attributes.\n    if (oldAttributes) {\n      for (const name in oldAttributes) {\n        if (typeof (oldAttributes[name]) === 'function') {\n          element.removeEventListener(\n            name,\n            oldAttributes[name] as NodeAttributeListener,\n          )\n        } else if (\n          !newAttributes ||\n          !(name in newAttributes)\n          || (newAttributes[name] === null)\n          || (newAttributes[name] === undefined)\n        ) {\n          if (name === 'value') {\n            // Reset value separately.\n            (element as HTMLInputElement).value = ''\n            // Don't dispatch the input change event, the rerendering should update everything: element.dispatchEvent(new Event('change'))\n          } else if (name === 'checked') {\n            (element as HTMLInputElement).checked = false\n          }\n          element.removeAttribute(name)\n        }\n      }\n    }\n  }\n\n  let oldMemoList: MemoData[] = []\n  let newMemoList: MemoData[] = []\n  const resolveMemoization = (\n    memoAbstract: MemoAbstract,\n  ): NodeContent[] => {\n    // Try and get the data from memory.\n    let match: MemoData | undefined = oldMemoList.find((oldMemo) => (\n      oldMemo.r === memoAbstract.r\n      && equalRecursive(oldMemo.m, memoAbstract.m)\n    ))\n    // If not found create it.\n    if (!match) {\n      match = {\n        c: arrayify(\n          memoAbstract.r(\n            state.p,\n            memoAbstract.m,\n          )\n        ),\n        m: memoAbstract.m,\n        r: memoAbstract.r,\n      }\n    }\n    // Store it in the list.\n    if (!newMemoList.includes(match)) {\n      newMemoList.push(match)\n    }\n    // Return the resulting nodes.\n    return cloneRecursive(\n      match.c,\n    )\n  }\n\n  const updateElementTree = (\n    element: Element,\n    newChildAbstracts: NodeContent[] | null = null,\n    oldChildAbstracts: NodeContent[] | null = null,\n  ): void => {\n    let newIndex = 0\n    let newCount = 0\n    if (newChildAbstracts) {\n      for (; newIndex < newChildAbstracts.length; newIndex++) {\n        const newAbstract = newChildAbstracts[newIndex]\n\n        // Handle memoization.\n        if ((newAbstract as MemoAbstract).r) {\n          const memoAbstracts = resolveMemoization(\n            (newAbstract as MemoAbstract)\n          )\n          // Splice nodes into the tree and re-run the loop again.\n          newChildAbstracts.splice(\n            newIndex,\n            1,\n            ...memoAbstracts,\n          )\n          // NOTE: Preferably we would skip re-rendering when the nodes were memoized, but because those nodes might have morphed we'll have to check. So we re-process the node again that as just inserted in.\n          newIndex--\n          continue\n        }\n\n        // Try to find the matching old abstract.\n        let matched = false\n        if (oldChildAbstracts) {\n          for (let oldIndex = newIndex - newCount; oldIndex < oldChildAbstracts.length; oldIndex++) {\n            const oldAbstract = oldChildAbstracts[oldIndex];\n            if (\n              (\n                (oldAbstract as NodeAbstract).t\n                && (newAbstract as NodeAbstract).t === (oldAbstract as NodeAbstract).t\n              )\n              || (\n                !(oldAbstract as NodeAbstract).t\n                && !(newAbstract as NodeAbstract).t\n              )\n            ) {\n              matched = true\n\n              if (newIndex !== oldIndex) {\n                // Move node in dom.\n                element.insertBefore(\n                  element.childNodes[oldIndex + newCount],\n                  element.childNodes[newIndex],\n                )\n                // Move node in abstract tree.\n                oldAbstractTree.splice(\n                  newIndex - newCount,\n                  0,\n                  ...oldAbstractTree.splice(\n                    oldIndex,\n                    1,\n                  )\n                )\n              }\n              if ((newAbstract as NodeAbstract).t) {\n                updateAttributes(\n                  (element.childNodes[newIndex] as Element),\n                  (newAbstract as NodeAbstract).a,\n                  (oldAbstract as NodeAbstract).a,\n                )\n                updateElementTree(\n                  (element.childNodes[newIndex] as Element),\n                  (newAbstract as NodeAbstract).c,\n                  (oldAbstract as NodeAbstract).c,\n                )\n              } else {\n                element.childNodes[newIndex].textContent = (\n                  typeof (newAbstract) === 'string'\n                    ? newAbstract\n                    : (newAbstract as TextAbstract).c\n                )\n              }\n              break\n            }\n          }\n        }\n\n        if (!matched) {\n          if ((newAbstract as NodeAbstract).t) {\n            const childElement = document.createElement(\n              (newAbstract as NodeAbstract).t\n            )\n\n            if ((newAbstract as NodeAbstract).a) {\n              updateAttributes(\n                childElement,\n                (newAbstract as NodeAbstract).a,\n              )\n            }\n            if ((newAbstract as NodeAbstract).c) {\n              updateElementTree(\n                childElement,\n                (newAbstract as NodeAbstract).c,\n              )\n            }\n\n            if (element.childNodes.length > newIndex) {\n              (element.childNodes[newIndex] as Element)\n                .insertAdjacentElement(\n                  'afterend',\n                  childElement,\n                )\n            } else {\n              element.insertAdjacentElement(\n                'beforeend',\n                childElement,\n              )\n            }\n            newCount++\n          } else {\n            const childElement = (\n              typeof (newAbstract) === 'string'\n                ? newAbstract\n                : (newAbstract as TextAbstract).c\n            )\n\n            if (element.childNodes.length > newIndex) {\n              (element.childNodes[newIndex] as Element)\n                .insertAdjacentText(\n                  'afterend',\n                  childElement,\n                )\n            } else {\n              element.insertAdjacentText(\n                'beforeend',\n                childElement,\n              )\n            }\n            newCount++\n          }\n        }\n      }\n    }\n\n    // Remove old elements.\n    if (element.childNodes.length >= newIndex) {\n      for (let i = element.childNodes.length - 1; i >= newIndex; i--) {\n        element.childNodes[i].remove()\n      }\n    }\n  }\n\n  let proxyChanged = true\n  const state = proxify(\n    initialState,\n    (): void => {\n      proxyChanged = true\n      requestAnimationFrame(\n        updateAbstracts,\n      )\n    },\n  )\n\n  let oldAbstractTree: NodeContent[] = []\n  const updateAbstracts = (\n  ): void => {\n    if (\n      active &&\n      !updating &&\n      // Only update if changes to the state have been made.\n      proxyChanged &&\n      // Don't update while handling listeners.\n      listenerCount <= 0\n    ) {\n      updating = true\n      proxyChanged = false\n\n      let newAbstractTree = arrayify(\n        renderView(state.p),\n      )\n      updateElementTree(\n        _rootNode,\n        newAbstractTree,\n        oldAbstractTree,\n      )\n      // Store tree for next update\n      oldAbstractTree = newAbstractTree\n      oldMemoList = newMemoList\n      newMemoList = []\n\n      updating = false\n      if (proxyChanged) {\n        throw new Error('proxy changed during rendering')\n      }\n    }\n  }\n  updateAbstracts()\n\n  return [\n    updateAbstracts,\n    unmount,\n    state.p,\n  ]\n}\n", "import {\n  tokenizer,\n} from '@doars/staark-common/src/selector.js'\n\nimport {\n  marker,\n} from './marker.js'\nimport {\n  NodeAbstract,\n  NodeContent,\n} from './node.js'\n\nexport const nde = (\n  selector: string,\n  contents?: NodeContent | NodeContent[],\n): NodeAbstract => {\n  const [type, attributes] = tokenizer(selector)\n  return {\n    _: marker,\n    a: attributes,\n    c: (\n      contents\n        ? Array.isArray(contents)\n          ? contents\n          : [contents] as NodeContent[]\n        : []\n    ),\n    t: type.toUpperCase(),\n  }\n}\n", "import {\n  marker\n} from './marker.js'\n\nexport type TextAbstract = {\n  _: Symbol,\n  // Contents\n  c: string\n}\n\nexport const text = (\n  contents: number | string | (number | string)[],\n): TextAbstract => ({\n  _: marker,\n  c: (\n    Array.isArray(contents)\n      ? contents.join('')\n      : ('' + contents)\n  ),\n})\n"],
  "mappings": "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",
  "names": ["target"]
}
