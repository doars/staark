{
  "version": 3,
  "sources": ["../../staark-common/src/array.js", "../../staark-common/src/conditional.js", "../../staark-common/src/marker.js", "../../staark-common/src/node.js", "../../staark-common/src/factory.js", "../../staark-common/src/selector.js", "../../staark-common/src/fctory.js", "../../staark-common/src/identifier.ts", "../../staark-common/src/match.js", "../../staark-common/src/memo.js", "../../staark-common/src/nde.js", "../../staark-common/src/clone.js", "../../staark-common/src/compare.js", "../../staark-common/src/element.js", "../src/library/proxy.js", "../src/library/mount.js"],
  "sourcesContent": ["/**\n * Ensure the data is an array if it isn't already. Non-truthy values are converted to empty arrays.\n *\n * @template T\n * @param {T|T[]} data - Data to \"arrify\".\n * @returns {T[]} An array containing the data.\n */\nexport const arrayify = (\n  data,\n) => arrayifyOrUndefined(data) || []\n\n/**\n * Ensure the data is an array if it isn't already. Non-truthy values are converted to undefined.\n *\n * @template T\n * @param {T|T[]} data - Data to \"arrify\".\n * @returns {(T[]|undefined)} An array containing the data or undefined.\n */\nexport const arrayifyOrUndefined = (\n  data,\n) => data ? (\n  Array.isArray(data)\n    ? data\n    : [data]\n) : undefined\n", "import { arrayify } from './array.js'\n\n/**\n * @typedef {import('./node.js').NodeContent} NodeContent\n * @typedef {import('./types.js').ResolveFunction} ResolveFunction\n */\n\n/**\n * @param {any} condition - The condition to evaluate.\n * @param {NodeContent[] | NodeContent | ResolveFunction} onTruth - The content to return if the condition is true.\n * @param {NodeContent[] | NodeContent | ResolveFunction} [onFalse] - The content to return if the condition is false.\n * @returns {NodeContent[]} - The resulting content as an array.\n */\nexport const conditional = (\n  condition,\n  onTruth,\n  onFalse,\n) => {\n  let result = (\n    condition\n      ? onTruth\n      : onFalse\n  )\n  if (typeof (result) === 'function') {\n    result = result()\n  }\n  return arrayify(result)\n}\n", "export const marker = 'n'\n", "import { arrayifyOrUndefined } from './array.js'\nimport { marker } from './marker.js'\n\n/**\n * @typedef {import('./memo.js').MemoAbstract} MemoAbstract\n */\n\n/**\n * @typedef {function(Event, Record<string, any>): unknown} NodeAttributeListener\n * @property {function(Event, Record<string, any>): unknown} [f]\n */\n\n/**\n * @typedef {Object.<string, boolean | null | number | string | (number | string)[] | NodeAttributeListener | Record<string, boolean | number | string>>} NodeAttributes\n */\n\n/**\n * @typedef {string | MemoAbstract | NodeAbstract} NodeContent\n */\n\n/**\n * @typedef {Object} NodeAbstract\n * @property {string} _ - Discriminator\n * @property {NodeAttributes} [a] - Attributes\n * @property {NodeContent[]} [c] - Content\n * @property {string} t - Node type\n */\n\n/**\n * @param {string} type\n * @param {NodeAttributes | NodeContent[] | NodeContent} [attributesOrContents]\n * @param {NodeContent[] | NodeContent} [contents]\n * @returns {NodeAbstract}\n */\nexport const node = (\n  type,\n  attributesOrContents,\n  contents,\n) => {\n  if (\n    typeof (attributesOrContents) !== 'object'\n    || attributesOrContents._ === marker\n    || Array.isArray(attributesOrContents)\n  ) {\n    contents = attributesOrContents\n    attributesOrContents = undefined\n  }\n\n  return {\n    _: marker,\n    a: attributesOrContents,\n    c: arrayifyOrUndefined(contents),\n    t: type.toUpperCase(),\n  }\n}\n", "import {\n  node,\n} from './node.js'\n\n/**\n * @typedef {import('./node.js').NodeAbstract} NodeAbstract\n * @typedef {import('./node.js').NodeAttributes} NodeAttributes\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * @typedef {Function} Factory\n * @param {NodeAttributes | NodeContent[] | NodeContent} [attributesOrContents]\n * @param {NodeContent[] | NodeContent} [contents]\n * @returns {NodeAbstract}\n */\n\n/**\n * @typedef {Object} FactoryCache\n */\n\nexport const factory = new Proxy({}, {\n  /**\n   * @param {FactoryCache} target\n   * @param {string} type\n   * @returns {Factory}\n   */\n  get: (\n    target,\n    type,\n  ) => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      attributesOrContents,\n      contents,\n    ) => node(\n      typeConverted,\n      attributesOrContents,\n      contents,\n    )\n  },\n})\n", "const BRACKET_CLOSE = ']'\nconst BRACKET_OPEN = '['\nconst DOT = '.'\nconst EQUAL = '='\nconst HASH = '#'\nconst QUOTE_SINGLE = '\\''\nconst QUOTE_DOUBLE = '\"'\n\n/**\n * @enum {number}\n */\nconst TokenTypes = {\n  attribute: 0,\n  class: 1,\n  id: 2,\n  type: 3,\n}\n\n/**\n * @typedef {Object.<string, any>} Attributes\n */\n\n/**\n * @param {string} selector\n * @returns {[string, Attributes]}\n */\nexport const selectorToTokenizer = (\n  selector,\n) => {\n  const length = selector.length\n  let i = 0\n\n  let type = ''\n  /** @type {Attributes} */\n  const attributes = {}\n\n  let tokenA = ''\n  let tokenB = true\n  let tokenType = TokenTypes.type\n  const storeToken = () => {\n    if (tokenA) {\n      switch (tokenType) {\n        case TokenTypes.attribute:\n          attributes[tokenA] = (\n            tokenB === true\n              ? true\n              : tokenB\n          )\n          tokenB = true\n          break\n\n        case TokenTypes.class:\n          if (!attributes.class) {\n            attributes.class = tokenA\n            break\n          }\n          attributes.class += ' ' + tokenA\n          break\n\n        case TokenTypes.id:\n          attributes.id = tokenA\n          break\n\n        case TokenTypes.type:\n          type = tokenA\n          break\n      }\n      tokenA = ''\n    }\n  }\n\n  let character\n\n  let attributeBracketCount\n  const parseAttribute = () => {\n    attributeBracketCount = 0\n\n    while (i < length) {\n      character = selector[i]\n      i++\n      if (character === EQUAL) {\n        // Parse attribute value.\n        tokenB = ''\n        character = selector[i]\n        const endOnDoubleQuote = character === QUOTE_DOUBLE\n        const endOnSingleQuote = character === QUOTE_SINGLE\n        if (\n          endOnDoubleQuote\n          || endOnSingleQuote\n        ) {\n          tokenB += character\n          i++\n        }\n\n        while (i < length) {\n          character = selector[i]\n          if (\n            (\n              endOnDoubleQuote\n              && character === QUOTE_DOUBLE\n            )\n            || (\n              endOnSingleQuote\n              && character === QUOTE_SINGLE\n            )\n          ) {\n            tokenB += character\n            i++\n            break\n          } else if (\n            !endOnDoubleQuote\n            && !endOnSingleQuote\n            && character === BRACKET_CLOSE\n          ) {\n            break\n          }\n          tokenB += character\n          i++\n        }\n\n        if (\n          (\n            tokenB[0] === QUOTE_DOUBLE\n            && tokenB[tokenB.length - 1] === QUOTE_DOUBLE\n          ) ||\n          (\n            tokenB[0] === QUOTE_SINGLE\n            && tokenB[tokenB.length - 1] === QUOTE_SINGLE\n          )\n        ) {\n          tokenB = tokenB.substring(1, tokenB.length - 1)\n        }\n\n        // Consume until closing bracket, but don't store the tokens since these are invalid.\n        while (i < length) {\n          character = selector[i]\n          i++\n          if (character === BRACKET_CLOSE) {\n            break\n          }\n        }\n        break\n      } else if (character === BRACKET_OPEN) {\n        attributeBracketCount++\n        continue\n      } else if (character === BRACKET_CLOSE) {\n        attributeBracketCount--\n        if (attributeBracketCount < 0) {\n          break\n        }\n        continue\n      }\n\n      tokenA += character\n    }\n    storeToken()\n  }\n\n  while (i < length) {\n    character = selector[i]\n    i++\n\n    if (character === HASH) {\n      storeToken()\n      tokenType = TokenTypes.id\n      continue\n    } else if (character === DOT) {\n      storeToken()\n      tokenType = TokenTypes.class\n      continue\n    } else if (character === BRACKET_OPEN) {\n      storeToken()\n      tokenType = TokenTypes.attribute\n      parseAttribute()\n      continue\n    }\n\n    tokenA += character\n  }\n\n  return [type, attributes]\n}\n", "import {\n  node,\n} from './node.js'\nimport {\n  selectorToTokenizer,\n} from './selector.js'\n\n/**\n * @typedef {import('./node.js').NodeAbstract} NodeAbstract\n * @typedef {import('./node.js').NodeAttributes} NodeAttributes\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * @typedef {function(string=, NodeContent[]|NodeContent=): NodeAbstract} Fctory\n */\n\n/**\n * @typedef {Object<string, Fctory>} FctoryCache\n */\n\nexport const fctory = new Proxy({}, {\n  /**\n   * @param {FctoryCache} target\n   * @param {string} type\n   * @returns {Fctory}\n   */\n  get: (target, type) => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      selector,\n      contents,\n    ) => {\n      let attributes\n      if (selector) {\n        const [_, _attributes] = selectorToTokenizer(selector)\n        attributes = _attributes\n      }\n      return node(\n        typeConverted,\n        attributes,\n        contents,\n      )\n    }\n  },\n})\n", "let identifierCount = 0\n\n/**\n * Generates a unique identifier with a given prefix.\n * @param {string} prefix - The prefix for the identifier.\n * @returns {string} The generated identifier.\n */\nexport const identifier = (\n  prefix,\n) => prefix + '-' + (identifierCount++)\n", "import { arrayify } from './array.js'\n\n/**\n * @typedef {import('./node.js').NodeContent} NodeContent\n * @typedef {import('./types.js').ResolveFunction} ResolveFunction\n */\n\n/**\n * Matches a key to a value in a lookup table, with a fallback option.\n *\n * @param {any} key - The key to match.\n * @param {Record<any, NodeContent[] | NodeContent | ResolveFunction | null | undefined>} lookup - The lookup table.\n * @param {NodeContent[] | NodeContent | ResolveFunction | null} [fallback] - The fallback value.\n * @returns {NodeContent[]} - The matched or fallback value, arrayified.\n */\nexport const match = (\n  key,\n  lookup,\n  fallback,\n) => {\n  let result\n  if (\n    lookup\n    && (key in lookup)\n    && lookup[key]\n  ) {\n    result = lookup[key]\n  } else {\n    result = fallback\n  }\n  if (typeof result === 'function') {\n    result = result()\n  }\n  return arrayify(result)\n}\n", "import { marker } from './marker.js'\n\n/**\n * @typedef {Object<string, any>} State\n */\n\n/**\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * @typedef {function(State, any): NodeContent[] | NodeContent} MemoFunction\n */\n\n/**\n * @typedef {Object} MemoAbstract\n * @property {string} _ - Marker\n * @property {any} m - Memory\n * @property {MemoFunction} r - Render function\n */\n\n/**\n * @param {MemoFunction} render\n * @param {any} memory\n * @returns {MemoAbstract}\n */\nexport const memo = (\n  render,\n  memory,\n) => ({\n  _: marker,\n  r: render,\n  m: memory,\n})\n", "import { arrayifyOrUndefined } from './array.js'\nimport { marker } from './marker.js'\nimport { selectorToTokenizer } from './selector.js'\n\n/**\n * @typedef {import('./node.js').NodeAbstract} NodeAbstract\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * Creates a NodeAbstract object from a selector and optional contents.\n *\n * @param {string} selector - The selector string.\n * @param {NodeContent[] | NodeContent} [contents] - The optional contents.\n * @returns {NodeAbstract} The created NodeAbstract object.\n */\nexport const nde = (\n  selector,\n  contents,\n) => {\n  const [type, attributes] = selectorToTokenizer(selector)\n\n  return {\n    _: marker,\n    a: attributes,\n    c: arrayifyOrUndefined(contents),\n    t: type.toUpperCase(),\n  }\n}\n", "/**\n * Creates a deep clone of a javascript value.\n * @param {any} value Data to clone.\n * @returns {any} Clone of the data.\n */\nexport const cloneRecursive = (\n  value,\n) => {\n  if (typeof (value) === 'object') {\n    const clone = (\n      Array.isArray(value)\n        ? []\n        : {}\n    )\n    for (const key in value) {\n      clone[key] = cloneRecursive(value[key])\n    }\n    return clone\n  }\n  return value\n}\n", "/**\n * Recursively checks if two values are equal.\n *\n * @param {*} valueA - The first value to compare.\n * @param {*} valueB - The second value to compare.\n * @returns {boolean} - Returns true if the values are equal, otherwise false.\n */\nexport const equalRecursive = (valueA, valueB) => {\n  if (valueA === valueB) {\n    return true\n  }\n\n  if (\n    !valueA\n    || !valueB\n    || typeof valueA !== 'object'\n    || typeof valueB !== 'object'\n  ) {\n    return valueA === valueB\n  }\n\n  if (valueA instanceof Date) {\n    return (\n      valueB instanceof Date\n      && valueA.getTime() === valueB.getTime()\n    )\n  }\n\n  // if (valueA.prototype !== valueB.prototype) {\n  //   return false\n  // }\n\n  const keys = Object.keys(valueA)\n  return (\n    keys.length === Object.keys(valueB).length\n    && keys.every(k => equalRecursive(valueA[k], valueB[k]))\n  )\n}\n", "import {\n  node,\n} from './node.js'\n\n/**\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * @typedef {Object} Attribute\n * @property {string} name\n * @property {string} value\n */\n\n/**\n * Converts child nodes of an element to an array of abstract nodes.\n * @param {Element | ChildNode} element\n * @returns {NodeContent[]}\n */\nexport const childrenToNodes = (\n  element,\n) => {\n  const abstractChildNodes = []\n  for (const childNode of element.childNodes) {\n    if (childNode instanceof Text) {\n      abstractChildNodes.push(\n        childNode.textContent ?? '',\n      )\n    } else {\n      const attributes = {}\n      for (const attribute of childNode.attributes) {\n        attributes[attribute.name] = attribute.value\n      }\n\n      abstractChildNodes.push(\n        node(\n          childNode.nodeName,\n          attributes,\n          childrenToNodes(childNode),\n        ),\n      )\n    }\n  }\n  return abstractChildNodes\n}\n", "/**\n * @param {Record<string, any>} root\n * @param {() => void} onChange\n * @returns {Record<string, any>}\n */\nexport const proxify = (\n  root,\n  onChange,\n) => {\n  const handler = {\n    /**\n     * @param {Record<string, any>} target\n     * @param {string} key\n     * @returns {boolean}\n     */\n    deleteProperty: (\n      target,\n      key,\n    ) => {\n      if (Reflect.has(target, key)) {\n        const deleted = Reflect.deleteProperty(target, key)\n\n        if (deleted) {\n          onChange()\n        }\n\n        return deleted\n      }\n      return true\n    },\n\n    /**\n     * @param {Record<string, any>} target\n     * @param {string} key\n     * @param {any} value\n     * @returns {boolean}\n     */\n    set: (\n      target,\n      key,\n      value,\n    ) => {\n      const existingValue = target[key]\n      if (existingValue !== value) {\n        // Add proxy if value is an object.\n        if (\n          value\n          && typeof value === 'object'\n        ) {\n          value = add(value)\n        }\n        target[key] = value\n\n        // Dispatch set event. If the target is an array and a new item has been pushed then the length has also changed, therefore a more generalizable path will be dispatched.\n        onChange()\n      }\n      return true\n    },\n  }\n\n  /**\n   * Add object to start keeping track of it.\n   * @param {Record<string, any>} target Object that is being kept track of.\n   * @returns {Record<string, any>} Object to access and mutate.\n   */\n  const add = (\n    target,\n  ) => {\n    // Recursively create proxies for each property.\n    for (const key in target) {\n      if (\n        target[key]\n        && typeof target[key] === 'object'\n      ) {\n        target[key] = add(target[key])\n      }\n    }\n\n    return new Proxy(target, handler)\n  }\n\n  return add(root)\n}\n", "import {\n  arrayifyOrUndefined,\n} from '@doars/staark-common/src/array.js'\nimport {\n  cloneRecursive\n} from '@doars/staark-common/src/clone.js'\nimport {\n  equalRecursive,\n} from '@doars/staark-common/src/compare.js'\nimport {\n  childrenToNodes,\n} from '@doars/staark-common/src/element.js'\nimport {\n  proxify,\n} from './proxy.js'\n\n/**\n * @typedef {import('@doars/staark-common/src/node.js').NodeContent} NodeContent\n * @typedef {import('@doars/staark-common/src/node.js').NodeAttributes} NodeAttributes\n * @typedef {import('@doars/staark-common/src/node.js').NodeAttributeListener} NodeAttributeListener\n * @typedef {import('@doars/staark-common/src/memo.js').MemoFunction} MemoFunction\n * @typedef {import('@doars/staark-common/src/memo.js').MemoAbstract} MemoAbstract\n * @typedef {import('@doars/staark-common/src/node.js').NodeAbstract} NodeAbstract\n */\n\n/**\n * @typedef {Object} MemoData\n * @property {NodeContent[]} c\n * @property {any} m\n * @property {MemoFunction} r\n */\n\n/**\n * @param {HTMLElement | Element | string} rootElement\n * @param {function(Object<string, any>): (NodeContent[] | NodeContent)} renderView\n * @param {Object<string, any> | string} [initialState]\n * @param {NodeContent[] | string | null} [oldAbstractTree]\n * @returns {undefined | [function(string[]): void, function(): unknown, Object<string, any>]}\n */\nexport const mount = (\n  rootElement,\n  renderView,\n  initialState,\n  oldAbstractTree,\n) => {\n  if (typeof (initialState) === 'string') {\n    initialState = JSON.parse(initialState)\n  }\n  if (!initialState) {\n    initialState = {}\n  }\n  let updatePromise = null\n  const triggerUpdate = () => {\n    if (!updatePromise) {\n      updatePromise = Promise.resolve()\n        .then(updateAbstracts)\n    }\n    return updatePromise\n  }\n  let state = (\n    Object.getPrototypeOf(initialState) === Proxy.prototype\n      ? initialState\n      : proxify(\n        initialState,\n        triggerUpdate,\n      )\n  )\n\n  /**\n   * @param {Element} element\n   * @param {NodeAttributes} newAttributes\n   * @param {NodeAttributes} [oldAttributes]\n   */\n  const updateAttributes = (\n    element,\n    newAttributes,\n    oldAttributes,\n  ) => {\n    if (newAttributes) {\n      for (const name in newAttributes) {\n        let value = newAttributes[name]\n        if (value) {\n          const type = typeof (value)\n          if (type === 'function') {\n            const oldValue = oldAttributes?.[name]\n            if (oldValue?.f !== value) {\n              if (oldValue) {\n                element.removeEventListener(\n                  name,\n                  oldValue,\n                )\n              }\n\n              const listener = newAttributes[name] = (\n                (event) => {\n                  value(event, state)\n                }\n              )\n              listener.f = value\n\n              element.addEventListener(\n                name,\n                listener,\n              )\n            }\n          } else {\n            if (name === 'class') {\n              if (typeof (value) === 'object') {\n                if (Array.isArray(value)) {\n                  value = value.join(' ')\n                } else {\n                  let classNames = ''\n                  for (const className in value) {\n                    if (value[className]) {\n                      classNames += ' ' + className\n                    }\n                  }\n                  value = classNames\n                }\n              }\n              element.className = value\n            } else if (\n              name === 'style'\n              && typeof (value) === 'object'\n            ) {\n              for (let styleName in value) {\n                let styleValue = value[styleName]\n                if (styleName.includes('-', 1)) {\n                  element.style.setProperty(\n                    styleName,\n                    styleValue,\n                  )\n                } else {\n                  element.style[styleName] = styleValue\n                }\n              }\n\n              if (\n                oldAttributes\n                && oldAttributes[name]\n                && typeof (oldAttributes[name]) === 'object'\n                && !Array.isArray(oldAttributes[name])\n              ) {\n                for (let styleName in oldAttributes[name]) {\n                  if (!(styleName in value)) {\n                    if (styleName.includes('-')) {\n                      element.style.removeProperty(\n                        styleName,\n                      )\n                    } else {\n                      delete element.style[styleName]\n                    }\n                  }\n                }\n              }\n            } else {\n              if (value === true) {\n                value = 'true'\n              } else if (type !== 'string') {\n                value = value.toString()\n              }\n\n              element.setAttribute(name, value)\n            }\n          }\n        }\n      }\n    }\n\n    if (oldAttributes) {\n      for (const name in oldAttributes) {\n        const value = oldAttributes[name]\n        if (\n          !newAttributes\n          || !newAttributes[name]\n        ) {\n          if (typeof (value) === 'function') {\n            element.removeEventListener(\n              name,\n              oldAttributes[name],\n            )\n          } else if (name === 'class') {\n            element.className = ''\n          } else if (name === 'style') {\n            element.style.cssText = ''\n          } else if (name === 'value') {\n            element.value = ''\n          } else {\n            element.removeAttribute(name)\n          }\n        }\n      }\n    }\n  }\n\n  let oldMemoMap = new WeakMap()\n  let newMemoMap = new WeakMap()\n\n  /**\n   * @param {Element} element\n   * @param {NodeContent[]} [newChildAbstracts]\n   * @param {NodeContent[]} [oldChildAbstracts]\n   */\n  const updateChildren = (\n    element,\n    newChildAbstracts,\n    oldChildAbstracts,\n  ) => {\n    let newIndex = 0\n    let newCount = 0\n    if (newChildAbstracts) {\n      for (; newIndex < newChildAbstracts.length; newIndex++) {\n        const newAbstract = newChildAbstracts[newIndex]\n\n        if (newAbstract.r) {\n          let match = oldMemoMap.get(\n            newAbstract.r,\n          )\n          if (\n            !match\n            || !equalRecursive(match.m, newAbstract.m)\n          ) {\n            match = {\n              c: arrayifyOrUndefined(\n                newAbstract.r(\n                  state,\n                  newAbstract.m,\n                )\n              ),\n              m: newAbstract.m,\n              r: newAbstract.r,\n            }\n          }\n\n          newMemoMap.set(newAbstract.r, match)\n\n          // Splice nodes into the tree and re-run the loop again.\n          newChildAbstracts.splice(\n            newIndex,\n            1,\n            // NOTE: Is a recursive clone required here? Yes as long as the old abstract tree is mutated.\n            ...cloneRecursive(\n              match.c,\n            ),\n          )\n          // NOTE: Preferably we would skip re-rendering when the nodes were memoized, but because those nodes might have morphed we'll have to check. So we re-process the node again that was just inserted in. We could have the resolve memoization return whether it was re-rendered, but this also means the nodes are not allowed to be re-used when morphing the DOM and this needs to be prevented by marking them as such.\n          newIndex--\n          continue\n        }\n\n        let matched = false\n        if (oldChildAbstracts) {\n          for (let oldIndex = newIndex - newCount; oldIndex < oldChildAbstracts.length; oldIndex++) {\n            const oldAbstract = oldChildAbstracts[oldIndex]\n            if (\n              (\n                oldAbstract.t\n                && newAbstract.t === oldAbstract.t\n              )\n              || (\n                !oldAbstract.t\n                && !newAbstract.t\n              )\n            ) {\n              matched = true\n\n              if (newIndex !== (oldIndex + newCount)) {\n                element.insertBefore(\n                  element.childNodes[oldIndex + newCount],\n                  element.childNodes[newIndex],\n                )\n                oldChildAbstracts.splice(\n                  newIndex - newCount,\n                  0,\n                  oldChildAbstracts.splice(\n                    oldIndex,\n                    1,\n                  )[0]\n                )\n              }\n\n              if (newAbstract.t) {\n                updateAttributes(\n                  element.childNodes[newIndex],\n                  newAbstract.a,\n                  oldAbstract.a,\n                )\n                updateChildren(\n                  element.childNodes[newIndex],\n                  newAbstract.c,\n                  oldAbstract.c,\n                )\n              } else if (oldAbstract !== newAbstract) {\n                element.childNodes[newIndex].textContent = newAbstract\n              }\n              break\n            }\n          }\n        }\n\n        if (!matched) {\n          let newNode\n          if (newAbstract.t) {\n            newNode = document.createElement(\n              newAbstract.t,\n            )\n            updateAttributes(\n              newNode,\n              newAbstract.a,\n            )\n            updateChildren(\n              newNode,\n              newAbstract.c,\n            )\n          } else {\n            newNode = document.createTextNode(\n              newAbstract,\n            )\n          }\n\n          element.insertBefore(\n            newNode,\n            element.childNodes[newIndex],\n          )\n          newCount++\n        }\n      }\n    }\n\n    if (oldChildAbstracts) {\n      const elementLength = oldChildAbstracts.length + newCount\n      if (elementLength >= newIndex) {\n        for (let i = elementLength - 1; i >= newIndex; i--) {\n          element.childNodes[i].remove()\n        }\n      }\n    }\n  }\n\n  const _rootElement = (\n    typeof (rootElement) === 'string'\n      ? (\n        document.querySelector(rootElement)\n        || document.body.appendChild(\n          document.createElement('div')\n        )\n      )\n      : rootElement\n  )\n\n  if (typeof (oldAbstractTree) === 'string') {\n    try {\n      oldAbstractTree = JSON.parse(oldAbstractTree)\n    } catch (error) {\n      oldAbstractTree = null\n    }\n  }\n  if (!oldAbstractTree) {\n    oldAbstractTree = childrenToNodes(_rootElement)\n  }\n\n  let active = true,\n    updating = false\n  const updateAbstracts = () => {\n    if (\n      active\n      && !updating\n      && updatePromise\n    ) {\n      updating = true\n      updatePromise = null\n\n      let newAbstractTree = arrayifyOrUndefined(\n        renderView(state),\n      )\n      updateChildren(\n        _rootElement,\n        newAbstractTree,\n        oldAbstractTree,\n      )\n      oldAbstractTree = newAbstractTree\n      oldMemoMap = newMemoMap\n      newMemoMap = new WeakMap()\n\n      updating = false\n    }\n  }\n  triggerUpdate()\n  updateAbstracts()\n\n  return [\n    triggerUpdate,\n    () => {\n      if (active) {\n        active = false\n\n        for (let i = _rootElement.childNodes.length - 1; i >= 0; i--) {\n          _rootElement.childNodes[i].remove()\n        }\n      }\n    },\n    state,\n  ]\n}\n"],
  "mappings": "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",
  "names": ["arrayify", "data", "arrayifyOrUndefined", "conditional", "condition", "onTruth", "onFalse", "result", "arrayify", "marker", "node", "type", "attributesOrContents", "contents", "marker", "arrayifyOrUndefined", "factory", "target", "type", "typeConverted", "capital", "attributesOrContents", "contents", "node", "BRACKET_CLOSE", "BRACKET_OPEN", "DOT", "EQUAL", "HASH", "QUOTE_SINGLE", "QUOTE_DOUBLE", "TokenTypes", "selectorToTokenizer", "selector", "length", "i", "type", "attributes", "tokenA", "tokenB", "tokenType", "storeToken", "character", "attributeBracketCount", "parseAttribute", "endOnDoubleQuote", "endOnSingleQuote", "fctory", "target", "type", "typeConverted", "capital", "selector", "contents", "attributes", "_", "_attributes", "selectorToTokenizer", "node", "identifierCount", "identifier", "prefix", "match", "key", "lookup", "fallback", "result", "arrayify", "memo", "render", "memory", "marker", "nde", "selector", "contents", "type", "attributes", "selectorToTokenizer", "marker", "arrayifyOrUndefined", "cloneRecursive", "value", "clone", "key", "equalRecursive", "valueA", "valueB", "keys", "k", "childrenToNodes", "element", "_a", "abstractChildNodes", "childNode", "attributes", "attribute", "node", "proxify", "root", "onChange", "handler", "target", "key", "deleted", "value", "add", "mount", "rootElement", "renderView", "initialState", "oldAbstractTree", "updatePromise", "triggerUpdate", "updateAbstracts", "state", "proxify", "updateAttributes", "element", "newAttributes", "oldAttributes", "name", "value", "type", "oldValue", "listener", "event", "classNames", "className", "styleName", "styleValue", "oldMemoMap", "newMemoMap", "updateChildren", "newChildAbstracts", "oldChildAbstracts", "newIndex", "newCount", "newAbstract", "match", "equalRecursive", "arrayifyOrUndefined", "cloneRecursive", "matched", "oldIndex", "oldAbstract", "newNode", "elementLength", "i", "_rootElement", "error", "childrenToNodes", "active", "updating", "newAbstractTree"]
}
