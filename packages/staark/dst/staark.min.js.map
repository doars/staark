{
  "version": 3,
  "sources": ["../../staark-common/src/array.ts", "../../staark-common/src/conditional.ts", "../../staark-common/src/marker.ts", "../../staark-common/src/node.ts", "../../staark-common/src/factory.ts", "../../staark-common/src/selector.ts", "../../staark-common/src/fctory.ts", "../../staark-common/src/match.ts", "../../staark-common/src/memo.ts", "../../staark-common/src/nde.ts", "../../staark-common/src/text.ts", "../../staark-common/src/compare.ts", "../../staark-common/src/element.ts", "../src/utilities/proxy.ts", "../src/library/mount.ts"],
  "sourcesContent": ["export const arrayify = function <T>(\n  data: T[] | T,\n): T[] {\n  if (Array.isArray(data)) {\n    return data\n  }\n  return [\n    data,\n  ]\n}\n", "import { arrayify } from './array.js'\nimport { NodeAbstract } from './node.js'\n\nexport const conditional = (\n  condition: any,\n  onTruth: NodeAbstract[] | NodeAbstract,\n  onFalse?: NodeAbstract[] | NodeAbstract,\n): NodeAbstract[] => {\n  if (condition) {\n    return arrayify(onTruth)\n  }\n  return arrayify(onFalse ?? [])\n}\n", "export const marker = Symbol()\n", "import {\n  marker,\n} from './marker.js'\nimport {\n  MemoAbstract,\n} from './memo.js'\nimport {\n  TextAbstract,\n} from './text.js'\n\nexport type NodeAttributeListener = (\n  event: Event\n) => unknown\n\nexport type NodeAttributes =\n  Record<string,\n    boolean |\n    null |\n    number |\n    string |\n    (number | string)[] |\n    NodeAttributeListener |\n    Record<string,\n      boolean | number | string\n    >\n  >\n\nexport type NodeContent =\n  string |\n  MemoAbstract |\n  NodeAbstract |\n  TextAbstract\n\nexport type NodeAbstract = {\n  _: Symbol\n  // Attributes\n  a?: NodeAttributes\n  // Content\n  c?: NodeContent[]\n  // Node type\n  t: string\n}\n\nexport const node = (\n  type: string,\n  attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n  contents?: NodeContent[] | NodeContent,\n): NodeAbstract => {\n  if (\n    typeof (attributesOrContents) !== 'object'\n    || (attributesOrContents as NodeAbstract)._ === marker\n    || Array.isArray(attributesOrContents)\n  ) {\n    contents = attributesOrContents as NodeContent\n    attributesOrContents = undefined\n  }\n\n  return {\n    _: marker,\n    a: attributesOrContents as (NodeAttributes | undefined),\n    c: (\n      contents\n        ? Array.isArray(contents)\n          ? contents\n          : [contents] as NodeContent[]\n        : []\n    ),\n    t: type.toUpperCase(),\n  }\n}\n", "import {\n  node,\n  NodeAbstract,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\n\nexport type Factory = (\n  attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n  contents?: NodeContent[] | NodeContent,\n) => NodeAbstract\n\nexport type FactoryCache = {\n  [key: string]: Factory,\n}\n\nexport const factory = new Proxy({}, {\n  get: (\n    target: FactoryCache,\n    type: string,\n  ): Factory => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n      contents?: NodeContent[] | NodeContent,\n    ): NodeAbstract => node(\n      typeConverted,\n      attributesOrContents,\n      contents,\n    )\n  },\n})\n", "const BRACKET_CLOSE = ']'\nconst BRACKET_OPEN = '['\nconst DOT = '.'\nconst EQUAL = '='\nconst HASH = '#'\nconst QUOTE_SINGLE = '\\''\nconst QUOTE_DOUBLE = '\"'\n\nenum TokenTypes {\n  attribute = 0,\n  class = 1,\n  id = 2,\n  type = 3,\n}\n\nexport const selectorToTokenizer = (\n  selector: string,\n): [string, Record<string, any>] => {\n  const length: number = selector.length\n  let i: number = 0\n\n  let type: string = ''\n  const attributes: Record<string, any> = {}\n\n  let tokenA: string = ''\n  let tokenB: string | true = true\n  let tokenType: TokenTypes = TokenTypes.type\n  const storeToken = () => {\n    if (tokenA) {\n      switch (tokenType) {\n        case TokenTypes.attribute:\n          attributes[tokenA] = tokenB === true ? true : tokenB\n          tokenB = true\n          break\n\n        case TokenTypes.class:\n          if (!attributes.class) {\n            attributes.class = tokenA\n            break\n          }\n          attributes.class += ' ' + tokenA\n          break\n\n        case TokenTypes.id:\n          attributes.id = tokenA\n          break\n\n        case TokenTypes.type:\n          type = tokenA\n          break\n      }\n      tokenA = ''\n    }\n  }\n\n  let character: string\n\n  let attributeBracketCount: number\n  const parseAttribute = (\n  ): void => {\n    attributeBracketCount = 0\n\n    while (i < length) {\n      character = selector[i]\n      i++\n      if (character === EQUAL) {\n        // Parse attribute value.\n        tokenB = ''\n        character = selector[i]\n        const endOnDoubleQuote = character === QUOTE_DOUBLE\n        const endOnSingleQuote = character === QUOTE_SINGLE\n        if (endOnDoubleQuote || endOnSingleQuote) {\n          tokenB += character\n          i++\n        }\n\n        while (i < length) {\n          character = selector[i]\n          if (\n            (endOnDoubleQuote && character === QUOTE_DOUBLE) ||\n            (endOnSingleQuote && character === QUOTE_SINGLE)\n          ) {\n            tokenB += character\n            i++\n            break\n          } else if (\n            !endOnDoubleQuote &&\n            !endOnSingleQuote &&\n            character === BRACKET_CLOSE\n          ) {\n            break\n          }\n          tokenB += character\n          i++\n        }\n\n        if (\n          (\n            tokenB[0] === QUOTE_DOUBLE &&\n            tokenB[tokenB.length - 1] === QUOTE_DOUBLE\n          ) ||\n          (\n            tokenB[0] === QUOTE_SINGLE &&\n            tokenB[tokenB.length - 1] === QUOTE_SINGLE\n          )\n        ) {\n          tokenB = tokenB.substring(1, tokenB.length - 1)\n        }\n\n\n        // Consume until closing bracket, but don't store the tokes since these are invalid.\n        while (i < length) {\n          character = selector[i]\n          i++\n          if (character === BRACKET_CLOSE) {\n            break\n          }\n        }\n        break\n      } else if (character === BRACKET_OPEN) {\n        attributeBracketCount++\n        continue\n      } else if (character === BRACKET_CLOSE) {\n        attributeBracketCount--\n        if (attributeBracketCount < 0) {\n          break\n        }\n        continue\n      }\n\n      tokenA += character\n    }\n    storeToken()\n  }\n\n  while (i < length) {\n    character = selector[i]\n    i++\n\n    if (character === HASH) {\n      storeToken()\n      tokenType = TokenTypes.id\n      continue\n    } else if (character === DOT) {\n      storeToken()\n      tokenType = TokenTypes.class\n      continue\n    } else if (character === BRACKET_OPEN) {\n      storeToken()\n      tokenType = TokenTypes.attribute\n      parseAttribute()\n      continue\n    }\n\n    tokenA += character\n  }\n\n  return [type, attributes]\n}\n", "\nimport {\n  node,\n  NodeAbstract,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\nimport {\n  selectorToTokenizer,\n} from './selector.js'\n\nexport type Fctory = (\n  attributes?: string,\n  contents?: NodeContent[] | NodeContent,\n) => NodeAbstract\n\nexport type FctoryCache = {\n  [key: string]: Fctory,\n}\n\nexport const fctory = new Proxy({}, {\n  get: (\n    target: FctoryCache,\n    type: string,\n  ): Fctory => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      selector?: string,\n      contents?: NodeContent[] | NodeContent,\n    ): NodeAbstract => {\n      let attributes: NodeAttributes | undefined\n      if (selector) {\n        const [_, _attributes] = selectorToTokenizer(selector)\n        attributes = _attributes\n      }\n      return node(\n        typeConverted,\n        attributes,\n        contents,\n      )\n    }\n  },\n})\n", "import { arrayify } from './array.js'\nimport { NodeAbstract } from './node.js'\n\nexport const match = (\n  pattern: any,\n  lookup: Record<any, NodeAbstract[] | NodeAbstract | null | undefined>,\n): NodeAbstract[] => {\n  if (\n    lookup\n    && (pattern in lookup)\n    && lookup[pattern]\n  ) {\n    return arrayify(lookup[pattern])\n  }\n  return []\n}\n", "import {\n  marker,\n} from './marker.js'\nimport { NodeContent } from './node.js'\n\nexport type MemoFunction = (\n  state: Record<string, any>,\n  memory: any,\n) => NodeContent[] | NodeContent\n\nexport type MemoAbstract = {\n  _: Symbol,\n  // Compare data\n  m: any,\n  // Render function\n  r: MemoFunction,\n}\n\nexport const memo = (\n  render: MemoFunction,\n  memory: any,\n) => ({\n  _: marker,\n  r: render,\n  m: memory,\n})\n", "import {\n  marker,\n} from './marker.js'\nimport {\n  NodeAbstract,\n  NodeContent,\n} from './node.js'\nimport {\n  selectorToTokenizer,\n} from './selector.js'\n\nexport const nde = (\n  selector: string,\n  contents?: NodeContent[] | NodeContent,\n): NodeAbstract => {\n  const [type, attributes] = selectorToTokenizer(selector)\n  return {\n    _: marker,\n    a: attributes,\n    c: (\n      contents\n        ? Array.isArray(contents)\n          ? contents\n          : [contents] as NodeContent[]\n        : []\n    ),\n    t: type.toUpperCase(),\n  }\n}\n", "import {\n  marker\n} from './marker.js'\n\nexport type TextAbstract = {\n  _: Symbol,\n  // Contents\n  c: string\n}\n\nexport const text = (\n  contents: number | string | (number | string)[],\n): TextAbstract => ({\n  _: marker,\n  c: (\n    Array.isArray(contents)\n      ? contents.join('')\n      : ('' + contents)\n  ),\n})\n", "export const equalRecursive = (\n  valueA: any,\n  valueB: any,\n): boolean => {\n  if (valueA === valueB) {\n    return true\n  }\n  if (\n    valueA instanceof Date\n    && valueB instanceof Date\n  ) {\n    return valueA.getTime() === valueB.getTime()\n  }\n  if (\n    !valueA\n    || !valueB\n    || (\n      typeof valueA !== 'object' && typeof valueB !== 'object'\n    )\n  ) {\n    return valueA === valueB\n  }\n  if (\n    valueA === null\n    || valueA === undefined\n    || valueB === null\n    || valueB === undefined\n  ) {\n    return false\n  }\n  if (valueA.prototype !== valueB.prototype) {\n    return false\n  }\n  let keys = Object.keys(valueA)\n  if (keys.length !== Object.keys(valueB).length) {\n    return false\n  }\n  return keys.every(\n    (key: string): boolean => equalRecursive(valueA[key], valueB[key]),\n  )\n}\n", "import {\n  node,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\n\nexport const childrenToNodes = (\n  element: Element | ChildNode,\n) => {\n  const abstractChildNodes: NodeContent[] = []\n  for (let i = 0; i < element.childNodes.length; i++) {\n    const childNode = element.childNodes[i]\n    if (childNode instanceof Text) {\n      abstractChildNodes.push(\n        childNode.textContent ?? ''\n      )\n    } else {\n      let attributes: NodeAttributes = {}\n      for (let i = 0; i < (childNode as Element).attributes.length; i++) {\n        const attribute = (childNode as Element).attributes[i]\n        attributes[attribute.name] = attribute.value\n      }\n\n      abstractChildNodes.push(\n        node(\n          childNode.nodeName,\n          attributes,\n          childrenToNodes(childNode),\n        )\n      )\n    }\n  }\n  return abstractChildNodes\n}\n", "export const proxify = (\n  root: Record<string, any>,\n  onChange: () => void,\n): Record<string, any> => {\n  // Setup WeakMap to keep track of created proxies.\n  const map = new WeakMap()\n\n  /**\n   * Remove object from being kept track of.\n   * @param {Record<string, any>} target Object that is being kept track of.\n   */\n  const remove = (\n    target: Record<string, any>,\n  ): void => {\n    // Check if target exists in case of recursion.\n    if (map.has(target)) {\n      // Remove target from the map.\n      const revocable = map.get(target)\n      map.delete(revocable)\n\n      // Recursively remove properties as well.\n      for (const property in revocable.proxy) {\n        if (typeof (revocable.proxy[property]) === 'object') {\n          remove(revocable.proxy[property])\n        }\n      }\n\n      revocable.revoke()\n    }\n  }\n\n  /**\n   * Add object to start keeping track of it.\n   * @param {Object} target Object that is being kept track of.\n   * @returns {Proxy} Object to access and mutate.\n   */\n  const add = (\n    target: Record<string, any>,\n  ): Record<string, any> => {\n    // Exit early if proxy already exists prevent recursion.\n    if (map.has(target)) {\n      return map.get(target)\n    }\n\n    // Recursively create proxies for each property.\n    for (const key in target) {\n      if (target[key] && typeof (target[key]) === 'object') {\n        target[key] = add(target[key])\n      }\n    }\n\n    const revocable = Proxy.revocable(target, {\n      deleteProperty: (\n        target: Record<string, any>,\n        key: string,\n      ): boolean => {\n        if (Reflect.has(target, key)) {\n          remove(target)\n\n          const deleted = Reflect.deleteProperty(target, key)\n\n          if (deleted) {\n            onChange()\n          }\n\n          return deleted\n        }\n        return true\n      },\n\n      set: (\n        target: Record<string, any>,\n        key: string,\n        value: any,\n      ): boolean => {\n        const existingValue = target[key]\n        if (existingValue !== value) {\n          // Remove existing value if value is an object.\n          if (typeof (existingValue) === 'object') {\n            remove(existingValue)\n          }\n\n          // Add proxy if value is an object.\n          if (value && typeof (value) === 'object') {\n            value = add(value)\n          }\n          target[key] = value\n\n          // Dispatch set event. If the target is an array and a new item has been pushed then the length has also changed, therefore a more generalizable path will be dispatched.\n          onChange()\n        }\n        return true\n      },\n    })\n\n    map.set(revocable, target)\n\n    return revocable.proxy\n  }\n\n  return add(root)\n}\n", "import {\n  arrayify,\n} from '@doars/staark-common/src/array.js'\nimport {\n  equalRecursive,\n} from '@doars/staark-common/src/compare.js'\nimport {\n  childrenToNodes,\n} from '@doars/staark-common/src/element.js'\nimport {\n  MemoAbstract,\n  MemoFunction,\n} from '@doars/staark-common/src/memo.js'\nimport {\n  NodeAbstract,\n  NodeAttributes,\n  NodeAttributeListener,\n  NodeContent,\n} from '@doars/staark-common/src/node.js'\nimport {\n  TextAbstract,\n} from '@doars/staark-common/src/text.js'\nimport {\n  proxify,\n} from '../utilities/proxy.js'\n\nexport type GenericFunction<DataType, ReturnType> = (\n  argument: DataType\n) => ReturnType\n\nexport type GenericFunctionUnknown = (\n) => unknown\n\ntype MemoData = {\n  c: NodeContent[],\n  m: any,\n  r: MemoFunction,\n}\n\nexport type ViewFunction = (\n  state: Record<string, any>,\n) => NodeContent[] | NodeContent\n\nconst MATCH_CAPITALS = /[A-Z]+(?![a-z])|[A-Z]/g\nconst HYPHENATE = (\n  part: string,\n  offset: number,\n) => (offset ? '-' : '') + part\n\nexport const mount = (\n  rootElement: HTMLElement | Element | string,\n  renderView: ViewFunction,\n  initialState?: Record<string, any> | string,\n  oldAbstractTree?: NodeContent[] | string,\n): undefined | [GenericFunction<string[], void>, GenericFunctionUnknown, Record<string, any>] => {\n  // Track amount of listeners running.\n  let listenerCount = 0\n\n  const updateAttributes = (\n    element: Element,\n    newAttributes?: NodeAttributes,\n    oldAttributes?: NodeAttributes,\n  ): void => {\n    if (newAttributes) {\n      for (const name in newAttributes) {\n        let value = newAttributes[name]\n        if (value) {\n          const type = typeof (value)\n          if (type === 'function') {\n            // Wrap the listener so we can prevent re-renders during handling.\n            const listener = newAttributes[name] = (\n              event: Event,\n            ): void => {\n              listenerCount++;\n              try {\n                (value as NodeAttributeListener)(event)\n              } catch (error) {\n                console.error('listener error', error)\n              }\n              listenerCount--\n              updateAbstracts()\n            }\n            element.addEventListener(name, listener)\n            continue\n          } else {\n            if (name === 'class') {\n              if (typeof (value) === 'object') {\n                if (Array.isArray(value)) {\n                  value = value.join(' ')\n                } else {\n                  let classNames: string = ''\n                  for (const className in value) {\n                    if (value[className]) {\n                      classNames += ' ' + className\n                    }\n                  }\n                  value = classNames\n                }\n              }\n            } else if (name === 'style') {\n              if (typeof (value) === 'object') {\n                if (Array.isArray(value)) {\n                  value = value.join(';')\n                } else {\n                  let styles: string = ''\n                  for (let styleProperty in value) {\n                    let styleValue: boolean | string | number | (boolean | string | number)[] = value[styleProperty]\n\n                    // Convert to kebab case.\n                    styleProperty = styleProperty\n                      .replace(MATCH_CAPITALS, HYPHENATE)\n                      .toLowerCase()\n\n                    if (Array.isArray(styleValue)) {\n                      styles += ';' + styleProperty + ':' + styleValue.join(' ')\n                    } else if (styleValue) {\n                      styles += ';' + styleProperty + ':' + styleValue\n                    }\n                  }\n                  value = styles\n                }\n              }\n            } else {\n              // Ensure it is of type string.\n              if (type === 'boolean') {\n                if (!value) {\n                  element.removeAttribute(name)\n                  continue\n                }\n                value = 'true'\n              } else if (type !== 'string') {\n                value = value.toString()\n              }\n\n              if (\n                name === 'value'\n                && (element as HTMLInputElement).value !== value\n              ) {\n                // Update value separately as well.\n                (element as HTMLInputElement).value = value as string\n                // Don't dispatch a change event, the re-rendering should update everything: element.dispatchEvent(new Event('change'))\n              } else if (name === 'checked') {\n                (element as HTMLInputElement).checked = newAttributes[name] as boolean\n                // Don't dispatch a change event, the re-rendering should update everything: element.dispatchEvent(new Event('change'))\n              }\n            }\n\n            element.setAttribute(name, (value as string))\n          }\n        }\n      }\n    }\n\n    // Cleanup old attributes.\n    if (oldAttributes) {\n      for (const name in oldAttributes) {\n        if (typeof (oldAttributes[name]) === 'function') {\n          element.removeEventListener(\n            name,\n            oldAttributes[name] as NodeAttributeListener,\n          )\n        } else if (\n          !newAttributes\n          || !(name in newAttributes)\n          || !newAttributes[name]\n        ) {\n          if (name === 'value') {\n            // Reset value separately.\n            (element as HTMLInputElement).value = ''\n            // Don't dispatch the input change event, the rerendering should update everything: element.dispatchEvent(new Event('change'))\n          } else if (name === 'checked') {\n            (element as HTMLInputElement).checked = false\n          }\n          element.removeAttribute(name)\n        }\n      }\n    }\n  }\n\n  let oldMemoList: MemoData[] = []\n  let newMemoList: MemoData[] = []\n  const resolveMemoization = (\n    memoAbstract: MemoAbstract,\n  ): NodeContent[] => {\n    // Try and get the data from memory.\n    let match: MemoData | undefined = oldMemoList.find((oldMemo) => (\n      oldMemo.r === memoAbstract.r\n      && equalRecursive(oldMemo.m, memoAbstract.m)\n    ))\n    // If not found create it.\n    if (!match) {\n      match = {\n        c: arrayify(\n          memoAbstract.r(\n            state,\n            memoAbstract.m,\n          )\n        ),\n        m: memoAbstract.m,\n        r: memoAbstract.r,\n      }\n    }\n    // Store it in the list.\n    if (!newMemoList.includes(match)) {\n      newMemoList.push(match)\n    }\n    // Return the resulting nodes.\n    return structuredClone(\n      match.c,\n    )\n  }\n\n  const updateElementTree = (\n    element: Element,\n    newChildAbstracts?: NodeContent[],\n    oldChildAbstracts?: NodeContent[],\n    elementAbstract?: NodeContent,\n  ): void => {\n    let newIndex = 0\n    let newCount = 0\n    if (newChildAbstracts) {\n      for (; newIndex < newChildAbstracts.length; newIndex++) {\n        const newAbstract = newChildAbstracts[newIndex]\n\n        // Handle memoization.\n        if ((newAbstract as MemoAbstract).r) {\n          const memoAbstracts = resolveMemoization(\n            (newAbstract as MemoAbstract)\n          )\n          // Splice nodes into the tree and re-run the loop again.\n          newChildAbstracts.splice(\n            newIndex,\n            1,\n            ...memoAbstracts,\n          )\n          // NOTE: Preferably we would skip re-rendering when the nodes were memoized, but because those nodes might have morphed we'll have to check. So we re-process the node again that was just inserted in.\n          // We could have the resolve memoization return whether it was re-rendered, but this also means the nodes are not allowed to be re-used when morphing the DOM and this needs to be prevented by marking them as such.\n          newIndex--\n          continue\n        }\n\n        // Try to find the matching old abstract.\n        let matched = false\n        if (oldChildAbstracts) {\n          for (let oldIndex = newIndex - newCount; oldIndex < oldChildAbstracts.length; oldIndex++) {\n            const oldAbstract = oldChildAbstracts[oldIndex]\n            if (\n              (\n                (oldAbstract as NodeAbstract).t\n                && (newAbstract as NodeAbstract).t === (oldAbstract as NodeAbstract).t\n              )\n              || (\n                !(oldAbstract as NodeAbstract).t\n                && !(newAbstract as NodeAbstract).t\n              )\n            ) {\n              matched = true\n\n              if (newIndex !== (oldIndex + newCount)) {\n                // Move node in dom.\n                element.insertBefore(\n                  element.childNodes[oldIndex + newCount],\n                  element.childNodes[newIndex],\n                )\n                // Move node in abstract tree.\n                oldChildAbstracts.splice(\n                  newIndex - newCount,\n                  0,\n                  ...oldChildAbstracts.splice(\n                    oldIndex,\n                    1,\n                  )\n                )\n              }\n\n              if ((newAbstract as NodeAbstract).t) {\n                updateAttributes(\n                  (element.childNodes[newIndex] as Element),\n                  (newAbstract as NodeAbstract).a,\n                  (oldAbstract as NodeAbstract).a,\n                )\n                updateElementTree(\n                  (element.childNodes[newIndex] as Element),\n                  (newAbstract as NodeAbstract).c,\n                  (oldAbstract as NodeAbstract).c,\n                  oldAbstract,\n                )\n              } else {\n                element.childNodes[newIndex].textContent = (\n                  typeof (newAbstract) === 'string'\n                    ? newAbstract\n                    : (newAbstract as TextAbstract).c\n                )\n              }\n              break\n            }\n          }\n        }\n\n        if (!matched) {\n          let childElement: Element | string\n          if ((newAbstract as NodeAbstract).t) {\n            childElement = document.createElement(\n              (newAbstract as NodeAbstract).t\n            )\n\n            if ((newAbstract as NodeAbstract).a) {\n              updateAttributes(\n                childElement,\n                (newAbstract as NodeAbstract).a,\n              )\n            }\n            if ((newAbstract as NodeAbstract).c) {\n              updateElementTree(\n                childElement,\n                (newAbstract as NodeAbstract).c,\n              )\n            }\n\n            const insertAdjacentElement = (\n              element: Node,\n              elementAbstract?: NodeContent | null,\n              position?: InsertPosition,\n            ) => {\n              if (\n                position &&\n                (\n                  !elementAbstract\n                  || (elementAbstract as NodeAbstract).t\n                )\n              ) {\n                (element as Element)\n                  .insertAdjacentElement(\n                    position,\n                    childElement as Element,\n                  )\n              } else {\n                // Otherwise the position is always 'beforebegin'.\n                (element.parentNode as Element)\n                  .insertBefore(\n                    childElement as Element,\n                    element,\n                  )\n              }\n            }\n            if (newIndex === 0) {\n              insertAdjacentElement(\n                element,\n                elementAbstract,\n                'afterbegin',\n              )\n            } else if ((oldChildAbstracts?.length ?? 0) + newCount > newIndex) {\n              insertAdjacentElement(\n                (element.childNodes[newIndex] as Node),\n                // (oldChildAbstracts as NodeContent[])[newIndex + newCount],\n                // 'beforebegin',\n              )\n            } else {\n              insertAdjacentElement(\n                element,\n                elementAbstract,\n                'beforeend',\n              )\n            }\n          } else {\n            childElement = (\n              typeof (newAbstract) === 'string'\n                ? newAbstract\n                : (newAbstract as TextAbstract).c\n            )\n\n            const insertAdjacentText = (\n              element: Node,\n              elementAbstract?: NodeContent | null,\n              position?: InsertPosition,\n            ) => {\n              if (\n                position &&\n                (\n                  !elementAbstract\n                  || (elementAbstract as NodeAbstract).t\n                )\n              ) {\n                (element as Element)\n                  .insertAdjacentText(\n                    position,\n                    childElement as string,\n                  )\n              } else {\n                // Otherwise the position is always 'beforebegin'.\n                (element.parentNode as Element)\n                  .insertBefore(\n                    document.createTextNode(childElement as string),\n                    element.nextSibling,\n                  )\n              }\n            }\n            if (newIndex === 0) {\n              insertAdjacentText(\n                element,\n                elementAbstract,\n                'afterbegin',\n              )\n            } else if ((oldChildAbstracts?.length ?? 0) + newCount > newIndex) {\n              insertAdjacentText(\n                element.childNodes[newIndex] as Node,\n                // (oldChildAbstracts as NodeContent[])[newIndex + newCount],\n                // 'beforebegin',\n              )\n            } else {\n              insertAdjacentText(\n                element,\n                elementAbstract,\n                'beforeend',\n              )\n            }\n          }\n          newCount++\n        }\n      }\n    }\n\n    // Remove old elements.\n    const elementLength = (oldChildAbstracts?.length ?? 0) + newCount\n    if (elementLength >= newIndex) {\n      for (let i = elementLength - 1; i >= newIndex; i--) {\n        element.childNodes[i].remove()\n      }\n    }\n  }\n\n  if (typeof (initialState) === 'string') {\n    initialState = JSON.parse(initialState) as Record<string, any>\n  }\n  initialState ??= {}\n  let proxyChanged = true\n  const triggerUpdate = (\n  ): void => {\n    if (!proxyChanged) {\n      proxyChanged = true\n      Promise.resolve()\n        .then(updateAbstracts)\n    }\n  }\n  let state = (\n    Object.getPrototypeOf(initialState) === Proxy.prototype\n      ? initialState\n      : proxify(\n        initialState,\n        triggerUpdate,\n      )\n  )\n\n  const _rootElement = (\n    typeof (rootElement) === 'string'\n      ? (\n        document.querySelector(rootElement)\n        || document.body.appendChild(\n          document.createElement('div')\n        )\n      )\n      : rootElement\n  )\n\n  if (typeof (oldAbstractTree) === 'string') {\n    try {\n      oldAbstractTree = JSON.parse(oldAbstractTree) as NodeContent[]\n    } catch (error) {\n      oldAbstractTree = undefined\n    }\n  }\n  oldAbstractTree ??= childrenToNodes(_rootElement)\n\n  let active: boolean = true,\n    updating: boolean = false\n  const updateAbstracts = (\n  ): void => {\n    if (\n      active &&\n      !updating &&\n      // Only update if changes to the state have been made.\n      proxyChanged &&\n      // Don't update while handling listeners.\n      listenerCount <= 0\n    ) {\n      updating = true\n      proxyChanged = false\n\n      let newAbstractTree = arrayify(\n        renderView(state),\n      )\n      updateElementTree(\n        _rootElement,\n        newAbstractTree,\n        oldAbstractTree as NodeContent[],\n      )\n      // Store tree for next update\n      oldAbstractTree = newAbstractTree\n      oldMemoList = newMemoList\n      newMemoList = []\n\n      updating = false\n      if (proxyChanged) {\n        throw new Error('update during render')\n      }\n    }\n  }\n  updateAbstracts()\n\n  return [\n    triggerUpdate,\n    (): void => {\n      if (active) {\n        active = false\n\n        for (let i = _rootElement.childNodes.length - 1; i >= 0; i--) {\n          _rootElement.childNodes[i].remove()\n        }\n      }\n    },\n    state,\n  ]\n}\n"],
  "mappings": "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",
  "names": ["arrayify", "data", "conditional", "condition", "onTruth", "onFalse", "arrayify", "marker", "node", "type", "attributesOrContents", "contents", "marker", "factory", "target", "type", "typeConverted", "capital", "attributesOrContents", "contents", "node", "BRACKET_CLOSE", "BRACKET_OPEN", "DOT", "EQUAL", "HASH", "QUOTE_SINGLE", "QUOTE_DOUBLE", "selectorToTokenizer", "selector", "length", "i", "type", "attributes", "tokenA", "tokenB", "tokenType", "storeToken", "character", "attributeBracketCount", "parseAttribute", "EQUAL", "endOnDoubleQuote", "QUOTE_DOUBLE", "endOnSingleQuote", "QUOTE_SINGLE", "BRACKET_CLOSE", "BRACKET_OPEN", "HASH", "DOT", "fctory", "target", "type", "typeConverted", "capital", "selector", "contents", "attributes", "_", "_attributes", "selectorToTokenizer", "node", "match", "pattern", "lookup", "arrayify", "memo", "render", "memory", "marker", "nde", "selector", "contents", "type", "attributes", "selectorToTokenizer", "marker", "text", "contents", "marker", "equalRecursive", "valueA", "valueB", "keys", "key", "childrenToNodes", "element", "abstractChildNodes", "i", "childNode", "attributes", "attribute", "node", "proxify", "root", "onChange", "map", "remove", "target", "revocable", "property", "add", "key", "deleted", "value", "existingValue", "MATCH_CAPITALS", "HYPHENATE", "part", "offset", "mount", "rootElement", "renderView", "initialState", "oldAbstractTree", "listenerCount", "updateAttributes", "element", "newAttributes", "oldAttributes", "name", "value", "type", "listener", "event", "updateAbstracts", "classNames", "className", "styles", "styleProperty", "styleValue", "oldMemoList", "newMemoList", "resolveMemoization", "memoAbstract", "match", "oldMemo", "equalRecursive", "arrayify", "state", "updateElementTree", "newChildAbstracts", "oldChildAbstracts", "elementAbstract", "newIndex", "newCount", "newAbstract", "memoAbstracts", "matched", "oldIndex", "oldAbstract", "childElement", "insertAdjacentElement", "position", "insertAdjacentText", "elementLength", "i", "proxyChanged", "triggerUpdate", "proxify", "_rootElement", "childrenToNodes", "active", "updating", "newAbstractTree"]
}
