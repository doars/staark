{
  "version": 3,
  "sources": ["../../staark-common/src/marker.js", "../../staark-common/src/memo.js", "../../staark-common/src/array.js", "../../staark-common/src/node.js", "../../staark-common/src/clone.js", "../../staark-common/src/compare.js", "../../staark-common/src/element.js", "../src/library/proxy.js", "../src/library/mount.js"],
  "sourcesContent": ["/**\n * @type {string} Marker that can be used as a node discriminator.\n */\nexport const marker = 'n'\n", "import { marker } from './marker.js'\n\n/**\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * @typedef {Object<string, any>} State State of the application.\n */\n\n/**\n * @typedef {function(State, any): NodeContent[] | NodeContent} MemoFunction Render function to generated abstract tree.\n */\n\n/**\n * @typedef {Object} MemoAbstract\n * @property {string} _ Discriminator to differentiate from other objects.\n * @property {any} m Remembered data to compare with.\n * @property {MemoFunction} r Render function to generated abstract tree.\n */\n\n/**\n * Creates a MemoAbstract object.\n *\n * @param {MemoFunction} render Render function to generated abstract tree.\n * @param {any} memory Remembered data to compare with.\n * @returns {MemoAbstract} Memo abstract object.\n */\nexport const memo = (\n  render,\n  memory,\n) => ({\n  _: marker,\n  r: render,\n  m: memory,\n})\n", "/**\n * Ensure the data is an array if it isn't already. Non-truthy values are converted to empty arrays.\n *\n * @template T\n * @param {T|T[]} data Data to \"arrify\".\n * @returns {T[]} An array containing the data.\n */\nexport const arrayify = (\n  data,\n) => arrayifyOrUndefined(data) || []\n\n/**\n * Ensure the data is an array if it isn't already. Non-truthy values are converted to undefined.\n *\n * @template T\n * @param {T|T[]} data Data to arrify.\n * @returns {(T[]|undefined)} An array containing the data or undefined.\n */\nexport const arrayifyOrUndefined = (\n  data,\n) => data ? (\n  Array.isArray(data)\n    ? data\n    : [data]\n) : undefined\n", "import { arrayifyOrUndefined } from './array.js'\nimport { marker } from './marker.js'\n\n/**\n * @typedef {import('./memo.js').MemoAbstract} MemoAbstract\n */\n\n/**\n * @typedef {function(Event, Record<string, any>): unknown} NodeAttributeListener Listener for node attribute.\n * @property {function(Event, Record<string, any>): unknown} [f] Function that was written to the DOM tree before being wrapped so it can be compared to.\n */\n\n/**\n * @typedef {Object.<string, boolean | null | number | string | (number | string)[] | NodeAttributeListener | Record<string, boolean | number | string>>} NodeAttributes Attributes of a node.\n */\n\n/**\n * @typedef {string | MemoAbstract | NodeAbstract} NodeContent Content of a node.\n */\n\n/**\n * @typedef {Object} NodeAbstract Node abstract.\n * @property {string} _ Discriminator to differentiate from other objects.\n * @property {NodeAttributes} [a] Attributes of the node.\n * @property {NodeContent[]} [c] Abstracts of children.\n * @property {string} t Node type of the node.\n */\n\n/**\n * Creates a NodeAbstract object.\n *\n * @param {string} type Type of the node.\n * @param {NodeAttributes | NodeContent[] | NodeContent} [attributesOrContents] Attributes of node or contents.\n * @param {NodeContent[] | NodeContent} [contents] Abstracts of children.\n * @returns {NodeAbstract} Node abstract representing the given data.\n */\nexport const node = (\n  type,\n  attributesOrContents,\n  contents,\n) => {\n  if (\n    attributesOrContents\n    && (\n      typeof (attributesOrContents) !== 'object'\n      || attributesOrContents._ === marker\n      || Array.isArray(attributesOrContents)\n    )\n  ) {\n    contents = attributesOrContents\n    attributesOrContents = undefined\n  }\n\n  return {\n    _: marker,\n    a: attributesOrContents,\n    c: arrayifyOrUndefined(contents),\n    t: type,\n  }\n}\n", "/**\n * Creates a deep clone of a JavaScript value.\n *\n * @param {any} value Data to clone.\n * @returns {any} Clone of the data.\n */\nexport const cloneRecursive = (\n  value,\n) => {\n  if (typeof (value) === 'object') {\n    const clone = (\n      Array.isArray(value)\n        ? []\n        : {}\n    )\n    for (const key in value) {\n      clone[key] = cloneRecursive(value[key])\n    }\n    return clone\n  }\n  return value\n}\n", "/**\n * Recursively checks if two values are equal.\n *\n * @param {*} valueA The first value to compare.\n * @param {*} valueB The second value to compare.\n * @returns {boolean} Returns true if the values are equal, otherwise false.\n */\nexport const equalRecursive = (\n  valueA,\n  valueB,\n) => {\n  if (valueA === valueB) {\n    return true\n  }\n\n  if (\n    !valueA\n    || !valueB\n    || typeof valueA !== 'object'\n    || typeof valueB !== 'object'\n  ) {\n    return valueA === valueB\n  }\n\n  if (valueA instanceof Date) {\n    return (\n      valueB instanceof Date\n      && valueA.getTime() === valueB.getTime()\n    )\n  }\n\n  // if (valueA.prototype !== valueB.prototype) {\n  //   return false\n  // }\n\n  const keys = Object.keys(valueA)\n  return (\n    keys.length === Object.keys(valueB).length\n    && keys.every(k => equalRecursive(valueA[k], valueB[k]))\n  )\n}\n", "import {\n  node,\n} from './node.js'\n\n/**\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * @typedef {Object} Attribute An attribute of an element.\n * @property {string} name The name of the attribute.\n * @property {string} value The value of the attribute.\n */\n\n/**\n * Converts child nodes of an element to an array of abstract nodes.\n * @param {Element | ChildNode} element The element to convert.\n * @returns {NodeContent[]} The abstract nodes that are equivalent to the given element's child nodes.\n */\nexport const childrenToNodes = (\n  element,\n) => {\n  const abstractChildNodes = []\n  for (const childNode of element.childNodes) {\n    if (childNode instanceof Text) {\n      abstractChildNodes.push(\n        childNode.textContent ?? '',\n      )\n    } else {\n      const attributes = {}\n      for (const attribute of childNode.attributes) {\n        attributes[attribute.name] = attribute.value\n      }\n\n      abstractChildNodes.push(\n        node(\n          childNode.nodeName,\n          attributes,\n          childrenToNodes(childNode),\n        ),\n      )\n    }\n  }\n  return abstractChildNodes\n}\n", "/**\n * Creates a proxy for the given root object to track changes and invoke the onChange callback.\n *\n * @param {Record<string, any>} root - The root object to be proxified.\n * @param {() => void} onChange - The callback function to be invoked on changes.\n * @returns {Record<string, any>} - The proxified root object.\n */\nexport const proxify = (\n  root,\n  onChange,\n) => {\n  const handler = {\n    /**\n     * Deletes a property from the target object and invokes the onChange callback if the property existed.\n     *\n     * @param {Record<string, any>} target - The target object from which the property will be deleted.\n     * @param {string} key - The key of the property to be deleted.\n     * @returns {boolean} - True if the property was deleted, otherwise false.\n     */\n    deleteProperty: (\n      target,\n      key,\n    ) => {\n      if (Reflect.has(target, key)) {\n        const deleted = Reflect.deleteProperty(target, key)\n\n        if (deleted) {\n          onChange()\n        }\n\n        return deleted\n      }\n      return true\n    },\n\n    /**\n     * Sets a property on the target object and invokes the onChange callback if the value has changed.\n     *\n     * @param {Record<string, any>} target - The target object on which the property will be set.\n     * @param {string} key - The key of the property to be set.\n     * @param {any} value - The value to be set.\n     * @returns {boolean} - True if the property was set, otherwise false.\n     */\n    set: (\n      target,\n      key,\n      value,\n    ) => {\n      const existingValue = target[key]\n      if (existingValue !== value) {\n        // Add proxy if value is an object.\n        if (\n          value\n          && typeof value === 'object'\n        ) {\n          value = add(value)\n        }\n        target[key] = value\n\n        // Dispatch set event. If the target is an array and a new item has been pushed then the length has also changed, therefore a more generalizable path will be dispatched.\n        onChange()\n      }\n      return true\n    },\n  }\n\n  /**\n   * Recursively creates proxies for each property of the target object to track changes.\n   *\n   * @param {Record<string, any>} target - The object to be proxified.\n   * @returns {Record<string, any>} - The proxified object.\n   */\n  const add = (\n    target,\n  ) => {\n    // Recursively create proxies for each property.\n    for (const key in target) {\n      if (\n        target[key]\n        && typeof target[key] === 'object'\n      ) {\n        target[key] = add(target[key])\n      }\n    }\n\n    return new Proxy(target, handler)\n  }\n\n  return add(root)\n}\n", "import {\n    arrayifyOrUndefined,\n} from '@doars/staark-common/src/array.js'\nimport {\n    cloneRecursive,\n} from '@doars/staark-common/src/clone.js'\nimport {\n    equalRecursive,\n} from '@doars/staark-common/src/compare.js'\nimport {\n    childrenToNodes,\n} from '@doars/staark-common/src/element.js'\nimport {\n    proxify,\n} from './proxy.js'\n\n/**\n * @typedef {import('@doars/staark-common/src/node.js').NodeContent} NodeContent\n * @typedef {import('@doars/staark-common/src/node.js').NodeAttributes} NodeAttributes\n * @typedef {import('@doars/staark-common/src/node.js').NodeAttributeListener} NodeAttributeListener\n * @typedef {import('@doars/staark-common/src/memo.js').MemoFunction} MemoFunction\n * @typedef {import('@doars/staark-common/src/memo.js').MemoAbstract} MemoAbstract\n * @typedef {import('@doars/staark-common/src/node.js').NodeAbstract} NodeAbstract\n */\n\n/**\n * @typedef {Object} MemoData\n * @property {NodeContent[]} c Remembered abstract tree after rendering.\n * @property {any} m Remembered data to compare with.\n * @property {MemoFunction} r Render function to generated abstract tree.\n */\n\n/**\n * @param {HTMLElement | Element | string} rootElement Root element to mount the view on.\n * @param {function(Object<string, any>): (NodeContent[] | NodeContent)} renderView Function to render the view using the state.\n * @param {Object<string, any> | string} [initialState]  Initial state to use.\n * @param {NodeContent[] | string | null} [oldAbstractTree] Old abstract tree to compare with.\n * @returns {undefined | [function(string[]): void, function(): unknown, Object<string, any>]} Returns a trigger function to update the view, a function to unmount the view and the state object.\n */\nexport const mount = (\n  rootElement,\n  renderView,\n  initialState,\n  oldAbstractTree,\n) => {\n  if (typeof (initialState) === 'string') {\n    initialState = JSON.parse(initialState)\n  }\n  if (!initialState) {\n    initialState = {}\n  }\n  let updatePromise = null\n  const triggerUpdate = () => {\n    if (!updatePromise) {\n      updatePromise = Promise.resolve()\n        .then(updateAbstracts)\n    }\n    return updatePromise\n  }\n  let state = (\n    Object.getPrototypeOf(initialState) === Proxy.prototype\n      ? initialState\n      : proxify(\n        initialState,\n        triggerUpdate,\n      )\n  )\n\n  /**\n   * @param {Element} element Element to update.\n   * @param {NodeAttributes} newAttributes New attributes to set.\n   * @param {NodeAttributes} [oldAttributes] Old attributes to compare with.\n   */\n  const updateAttributes = (\n    element,\n    newAttributes,\n    oldAttributes,\n  ) => {\n    if (newAttributes) {\n      for (const name in newAttributes) {\n        let value = newAttributes[name]\n        if (value) {\n          const type = typeof (value)\n          if (type === 'function') {\n            const oldValue = oldAttributes?.[name]\n            if (oldValue?.f === value) {\n              newAttributes[name] = oldValue\n            } else {\n              if (oldValue) {\n                element.removeEventListener(\n                  name,\n                  oldValue,\n                )\n              }\n\n              const listener = newAttributes[name] =\n                (event) => {\n                  value(event, state)\n                }\n              element.addEventListener(\n                name,\n                listener,\n              )\n              listener.f = value\n            }\n          } else {\n            if (name === 'class') {\n              if (typeof (value) === 'object') {\n                if (Array.isArray(value)) {\n                  value = value.join(' ')\n                } else {\n                  let classNames = ''\n                  for (const className in value) {\n                    if (value[className]) {\n                      classNames += ' ' + className\n                    }\n                  }\n                  value = classNames\n                }\n              }\n              element.className = value\n            } else if (\n              name === 'style'\n              && typeof (value) === 'object'\n            ) {\n              for (let styleName in value) {\n                let styleValue = value[styleName]\n                if (styleName.includes('-', 1)) {\n                  element.style.setProperty(\n                    styleName,\n                    styleValue,\n                  )\n                } else {\n                  element.style[styleName] = styleValue\n                }\n              }\n\n              if (\n                oldAttributes\n                && oldAttributes[name]\n                && typeof (oldAttributes[name]) === 'object'\n                && !Array.isArray(oldAttributes[name])\n              ) {\n                for (let styleName in oldAttributes[name]) {\n                  if (!value[styleName]) {\n                    if (styleName.includes('-', 1)) {\n                      element.style.removeProperty(\n                        styleName,\n                      )\n                    } else {\n                      element.style[styleName] = null\n                    }\n                  }\n                }\n              }\n            } else {\n              if (value === true) {\n                value = 'true'\n              } else if (type !== 'string') {\n                value = value.toString()\n              }\n              element.setAttribute(name, value)\n              if (name === 'value') {\n                element.value = value\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (oldAttributes) {\n      for (const name in oldAttributes) {\n        const value = oldAttributes[name]\n        if (\n          !newAttributes\n          || !newAttributes[name]\n        ) {\n          if (typeof (value) === 'function') {\n            element.removeEventListener(\n              name,\n              oldAttributes[name],\n            )\n          } else if (name === 'class') {\n            element.className = ''\n          } else if (name === 'style') {\n            element.style.cssText = ''\n          } else if (name === 'value') {\n            element.value = ''\n          } else {\n            element.removeAttribute(name)\n          }\n        }\n      }\n    }\n  }\n\n  let oldMemoMap = new WeakMap()\n  let newMemoMap = new WeakMap()\n\n  /**\n   * @param {Element} element Element to update.\n   * @param {NodeContent[]} [newChildAbstracts] New children to set.\n   * @param {NodeContent[]} [oldChildAbstracts] Old children to compare with.\n   */\n  const updateChildren = (\n    element,\n    newChildAbstracts,\n    oldChildAbstracts,\n    inSvg,\n  ) => {\n    let newIndex = 0\n    let newCount = 0\n    if (newChildAbstracts) {\n      for (; newIndex < newChildAbstracts.length; newIndex++) {\n        const newAbstract = newChildAbstracts[newIndex]\n\n        if (newAbstract.r) {\n          let match = oldMemoMap.get(\n            newAbstract.r,\n          )\n          console.log('checking for memo')\n          if (\n            !match\n            || !equalRecursive(match.m, newAbstract.m)\n          ) {\n            match = {\n              c: arrayifyOrUndefined(\n                newAbstract.r(\n                  state,\n                  newAbstract.m,\n                ),\n              ),\n              m: newAbstract.m,\n              r: newAbstract.r,\n            }\n          }\n\n          newMemoMap.set(newAbstract.r, match)\n\n          // Splice nodes into the tree and re-run the loop again.\n          newChildAbstracts.splice(\n            newIndex,\n            1,\n            // NOTE: Is a recursive clone required here? Yes as long as the old abstract tree is mutated.\n            ...cloneRecursive(\n              match.c,\n            ),\n          )\n          // NOTE: Preferably we would skip re-rendering when the nodes were memoized, but because those nodes might have morphed we'll have to check. So we re-process the node again that was just inserted in. We could have the resolve memoization return whether it was re-rendered, but this also means the nodes are not allowed to be re-used when morphing the DOM and this needs to be prevented by marking them as such.\n          newIndex--\n          continue\n        }\n\n        let matched = false\n        if (oldChildAbstracts) {\n          for (let oldIndex = newIndex - newCount; oldIndex < oldChildAbstracts.length; oldIndex++) {\n            const oldAbstract = oldChildAbstracts[oldIndex]\n            if (\n              (\n                oldAbstract.t\n                && newAbstract.t === oldAbstract.t\n              )\n              || (\n                !oldAbstract.t\n                && !newAbstract.t\n              )\n            ) {\n              matched = true\n\n              if (newIndex !== (oldIndex + newCount)) {\n                element.insertBefore(\n                  element.childNodes[oldIndex + newCount],\n                  element.childNodes[newIndex],\n                )\n                oldChildAbstracts.splice(\n                  newIndex - newCount,\n                  0,\n                  oldChildAbstracts.splice(\n                    oldIndex,\n                    1,\n                  )[0],\n                )\n              }\n\n              if (newAbstract.t) {\n                updateAttributes(\n                  element.childNodes[newIndex],\n                  newAbstract.a,\n                  oldAbstract.a,\n                )\n                updateChildren(\n                  element.childNodes[newIndex],\n                  newAbstract.c,\n                  oldAbstract.c,\n                  inSvg || newAbstract.t === 'SVG' || newAbstract.t === 'svg',\n                )\n              } else if (oldAbstract !== newAbstract) {\n                element.childNodes[newIndex].textContent = newAbstract\n              }\n              break\n            }\n          }\n        }\n\n        if (!matched) {\n          let newNode\n          if (newAbstract.t) {\n            const _inSvg = inSvg || newAbstract.t === 'SVG' || newAbstract.t === 'svg'\n            if (_inSvg) {\n              newNode = document.createElementNS(\n                'http://www.w3.org/2000/svg',\n                newAbstract.t\n              )\n            } else {\n              newNode = document.createElement(\n                newAbstract.t,\n              )\n            }\n            updateAttributes(\n              newNode,\n              newAbstract.a,\n              undefined,\n              _inSvg,\n            )\n            updateChildren(\n              newNode,\n              newAbstract.c,\n              undefined,\n              _inSvg,\n            )\n          } else {\n            newNode = document.createTextNode(\n              newAbstract,\n            )\n          }\n\n          element.insertBefore(\n            newNode,\n            element.childNodes[newIndex],\n          )\n          newCount++\n        }\n      }\n    }\n\n    if (oldChildAbstracts) {\n      const elementLength = oldChildAbstracts.length + newCount\n      if (elementLength >= newIndex) {\n        for (let i = elementLength - 1; i >= newIndex; i--) {\n          element.childNodes[i].remove()\n        }\n      }\n    }\n  }\n\n  const _rootElement = (\n    typeof (rootElement) === 'string'\n      ? (\n        document.querySelector(rootElement)\n        || document.body.appendChild(\n          document.createElement('div'),\n        )\n      )\n      : rootElement\n  )\n\n  if (typeof (oldAbstractTree) === 'string') {\n    try {\n      oldAbstractTree = JSON.parse(oldAbstractTree)\n    } catch (error) {\n      oldAbstractTree = null\n    }\n  }\n  if (!oldAbstractTree) {\n    oldAbstractTree = childrenToNodes(_rootElement)\n  }\n\n  let active = true,\n    updating = false\n  const updateAbstracts = () => {\n    if (\n      active\n      && !updating\n      && updatePromise\n    ) {\n      updating = true\n      updatePromise = null\n\n      let newAbstractTree = arrayifyOrUndefined(\n        renderView(state),\n      )\n      updateChildren(\n        _rootElement,\n        newAbstractTree,\n        oldAbstractTree,\n      )\n      oldAbstractTree = newAbstractTree\n      oldMemoMap = newMemoMap\n      newMemoMap = new WeakMap()\n\n      updating = false\n    }\n  }\n  triggerUpdate()\n  updateAbstracts()\n\n  return [\n    triggerUpdate,\n    () => {\n      if (active) {\n        active = false\n\n        for (let i = _rootElement.childNodes.length - 1; i >= 0; i--) {\n          _rootElement.childNodes[i].remove()\n        }\n      }\n    },\n    state,\n  ]\n}\n"],
  "mappings": "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",
  "names": []
}
