{
  "version": 3,
  "sources": ["../../staark-common/src/marker.ts", "../../staark-common/src/memo.ts", "../../staark-common/src/array.ts", "../../staark-common/src/node.ts", "../../staark-common/src/clone.ts", "../../staark-common/src/compare.ts", "../../staark-common/src/element.ts", "../src/library/proxy.ts", "../src/library/mount.ts"],
  "sourcesContent": ["export const marker = 'n'\n", "import {\n  marker,\n} from './marker.js'\nimport { NodeContent } from './node.js'\n\nexport type MemoFunction = (\n  state: Record<string, any>,\n  memory: any,\n) => NodeContent[] | NodeContent\n\nexport type MemoAbstract = {\n  _: Symbol,\n  // Compare data\n  m: any,\n  // Render function\n  r: MemoFunction,\n}\n\nexport const memo = (\n  render: MemoFunction,\n  memory: any,\n) => ({\n  _: marker,\n  r: render,\n  m: memory,\n})\n", "type NonNullable<T> = T extends null | undefined ? never : T\n\n/**\n * Ensure the data is an array of not already. Non-truthy values are converted to empty arrays.\n * @param data Data to arrify\n * @returns An array with the data.\n */\nexport const arrayify = <T>(\n  data: T[] | T,\n): NonNullable<T>[] => arrayifyOrUndefined(data) ?? []\n\n/**\n * Ensure the data is an array of not already. Non-truthy values are converted to undefined.\n * @param data Data to arrify\n * @returns An array with the data or undefined.\n */\nexport const arrayifyOrUndefined = <T>(\n  data: T[] | T,\n): NonNullable<T>[] | undefined => (\n  data\n    ? Array.isArray(data)\n      ? data :\n      [data,]\n    : undefined\n) as NonNullable<T>[] | undefined\n", "import {\n  arrayifyOrUndefined\n} from './array.js'\nimport {\n  marker,\n} from './marker.js'\nimport {\n  MemoAbstract,\n} from './memo.js'\n\ntype _NodeAttributeListener = {\n  (event: Event, state: Record<string, any>): unknown\n  (event: Event): unknown\n  (): unknown\n}\n\nexport interface NodeAttributeListener extends _NodeAttributeListener {\n  f?: _NodeAttributeListener\n}\n\nexport type NodeAttributes =\n  Record<string,\n    boolean |\n    null |\n    number |\n    string |\n    (number | string)[] |\n    NodeAttributeListener |\n    Record<string,\n      boolean | number | string\n    >\n  >\n\nexport type NodeContent =\n  string |\n  MemoAbstract |\n  NodeAbstract\n\nexport type NodeAbstract = {\n  // Discriminator\n  _: string,\n  // Attributes\n  a?: NodeAttributes\n  // Content\n  c?: NodeContent[]\n  // Node type\n  t: string\n}\n\nexport const node = (\n  type: string,\n  attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n  contents?: NodeContent[] | NodeContent,\n): NodeAbstract => {\n  if (\n    typeof (attributesOrContents) !== 'object'\n    || (attributesOrContents as NodeAbstract)._ === marker\n    || Array.isArray(attributesOrContents)\n  ) {\n    contents = attributesOrContents as NodeContent\n    attributesOrContents = undefined\n  }\n\n  return {\n    _: marker,\n    a: attributesOrContents as (NodeAttributes | undefined),\n    c: arrayifyOrUndefined(contents) as NodeContent[] | undefined,\n    t: type.toUpperCase(),\n  }\n}\n", "/**\n * Creates a deep clone of a javascript value.\n * @param value Data to clone.\n * @returns Clone of the data.\n */\nexport const cloneRecursive = (\n  value: any,\n) => {\n  if (typeof (value) === 'object') {\n    const clone: Record<any, any> = (\n      Array.isArray(value)\n        ? []\n        : {}\n    )\n    for (const key in value) {\n      clone[key] = cloneRecursive(value[key])\n    }\n    return clone\n  }\n  return value\n}\n", "export const equalRecursive = (\n  valueA: any,\n  valueB: any,\n): boolean => {\n  if (valueA === valueB) {\n    return true\n  }\n\n  if (\n    !valueA\n    || !valueB\n    || typeof valueA !== 'object'\n    || typeof valueB !== 'object'\n  ) {\n    return valueA === valueB\n  }\n\n  if (\n    valueA instanceof Date) {\n    return (\n      valueB instanceof Date\n      && valueA.getTime() === valueB.getTime()\n    )\n  }\n\n  // if (valueA.prototype !== valueB.prototype) {\n  //   return false\n  // }\n\n  const keys = Object.keys(valueA)\n  return (\n    keys.length === Object.keys(valueB).length\n    && keys.every(k => equalRecursive(valueA[k], valueB[k]))\n  )\n}\n", "import {\n  node,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\n\nexport const childrenToNodes = (\n  element: Element | ChildNode,\n) => {\n  const abstractChildNodes: NodeContent[] = []\n  for (const childNode of element.childNodes) {\n    if (childNode instanceof Text) {\n      abstractChildNodes.push(\n        childNode.textContent ?? ''\n      )\n    } else {\n      const elementChild = childNode as Element\n      const attributes: NodeAttributes = {}\n      for (const attribute of elementChild.attributes) {\n        attributes[attribute.name] = attribute.value\n      }\n\n      abstractChildNodes.push(\n        node(\n          childNode.nodeName,\n          attributes,\n          childrenToNodes(childNode),\n        )\n      )\n    }\n  }\n  return abstractChildNodes\n}\n", "export const proxify = (\n  root: Record<string, any>,\n  onChange: () => void,\n): Record<string, any> => {\n  const handler = {\n    deleteProperty: (\n      target: Record<string, any>,\n      key: string,\n    ): boolean => {\n      if (Reflect.has(target, key)) {\n        const deleted = Reflect.deleteProperty(target, key)\n\n        if (deleted) {\n          onChange()\n        }\n\n        return deleted\n      }\n      return true\n    },\n\n    set: (\n      target: Record<string, any>,\n      key: string,\n      value: any,\n    ): boolean => {\n      const existingValue = target[key]\n      if (existingValue !== value) {\n        // Add proxy if value is an object.\n        if (\n          value\n          && typeof (value) === 'object'\n        ) {\n          value = add(value)\n        }\n        target[key] = value\n\n        // Dispatch set event. If the target is an array and a new item has been pushed then the length has also changed, therefore a more generalizable path will be dispatched.\n        onChange()\n      }\n      return true\n    },\n  }\n\n  /**\n   * Add object to start keeping track of it.\n   * @param {Object} target Object that is being kept track of.\n   * @returns {Proxy} Object to access and mutate.\n   */\n  const add = (\n    target: Record<string, any>,\n  ): Record<string, any> => {\n    // Recursively create proxies for each property.\n    for (const key in target) {\n      if (\n        target[key]\n        && typeof (target[key]) === 'object'\n      ) {\n        target[key] = add(target[key])\n      }\n    }\n\n    return new Proxy(target, handler)\n  }\n\n  return add(root)\n}\n", "import {\n  arrayifyOrUndefined,\n} from '@doars/staark-common/src/array.js'\nimport {\n  cloneRecursive\n} from '@doars/staark-common/src/clone.js'\nimport {\n  equalRecursive,\n} from '@doars/staark-common/src/compare.js'\nimport {\n  childrenToNodes,\n} from '@doars/staark-common/src/element.js'\nimport {\n  MemoAbstract,\n  MemoFunction,\n} from '@doars/staark-common/src/memo.js'\nimport {\n  NodeAbstract,\n  NodeAttributes,\n  NodeAttributeListener,\n  NodeContent,\n} from '@doars/staark-common/src/node.js'\nimport {\n  proxify,\n} from './proxy.js'\n\nexport type GenericFunction<DataType, ReturnType> = (\n  argument: DataType\n) => ReturnType\n\nexport type GenericFunctionUnknown = (\n) => unknown\n\ntype MemoData = {\n  c: NodeContent[],\n  m: any,\n  r: MemoFunction,\n}\n\nexport type ViewFunction = (\n  state: Record<string, any>,\n) => NodeContent[] | NodeContent\n\nexport const mount = (\n  rootElement: HTMLElement | Element | string,\n  renderView: ViewFunction,\n  initialState?: Record<string, any> | string,\n  oldAbstractTree?: NodeContent[] | string | null,\n): undefined | [GenericFunction<string[], void>, GenericFunctionUnknown, Record<string, any>] => {\n  if (typeof (initialState) === 'string') {\n    initialState = JSON.parse(initialState) as Record<string, any>\n  }\n  if (!initialState) {\n    initialState = {}\n  }\n  let updatePromise: Promise<void> | null = null\n  const triggerUpdate = (\n  ): Promise<void> | null => {\n    if (!updatePromise) {\n      updatePromise = Promise.resolve()\n        .then(updateAbstracts)\n    }\n    return updatePromise\n  }\n  let state = (\n    Object.getPrototypeOf(initialState) === Proxy.prototype\n      ? initialState\n      : proxify(\n        initialState,\n        triggerUpdate,\n      )\n  )\n\n  const updateAttributes = (\n    element: Element,\n    newAttributes?: NodeAttributes,\n    oldAttributes?: NodeAttributes,\n  ): void => {\n    if (newAttributes) {\n      for (const name in newAttributes) {\n        let value = newAttributes[name]\n        if (value) {\n          const type = typeof (value)\n          if (type === 'function') {\n            // Wrap listeners so comparisons can be done between updates.\n            const oldValue = oldAttributes?.[name] as NodeAttributeListener | undefined\n            if (oldValue?.f !== (value as NodeAttributeListener)) {\n              if (oldValue) {\n                element.removeEventListener(\n                  name,\n                  oldValue as NodeAttributeListener,\n                )\n              }\n\n              const listener: NodeAttributeListener = newAttributes[name] = (\n                (event: Event) => {\n                  (value as NodeAttributeListener)(event, state)\n                }\n              ) as NodeAttributeListener\n              listener.f = (value as NodeAttributeListener)\n\n              element.addEventListener(\n                name,\n                listener,\n              )\n            }\n          } else {\n            if (name === 'class') {\n              if (typeof (value) === 'object') {\n                if (Array.isArray(value)) {\n                  value = value.join(' ')\n                } else {\n                  let classNames: string = ''\n                  for (const className in value) {\n                    if (value[className]) {\n                      classNames += ' ' + className\n                    }\n                  }\n                  value = classNames\n                }\n              }\n              element.className = value as string\n            } else if (\n              name === 'style'\n              && typeof (value) === 'object'\n            ) {\n              // Apply updated styles.\n              for (let styleName in value) {\n                let styleValue = (\n                  value as Record<string, boolean | string | null | undefined | number | (boolean | string | number)[]>\n                )[styleName]\n                if (styleName.includes('-', 1)) {\n                  (element as HTMLElement).style.setProperty(\n                    styleName,\n                    styleValue as string,\n                  )\n                } else {\n                  // @ts-ignore\n                  (element as HTMLElement).style[styleName] = styleValue as string\n                }\n              }\n\n              // Remove old styles.\n              if (\n                oldAttributes\n                && oldAttributes[name]\n                && typeof (oldAttributes[name]) === 'object'\n                && !Array.isArray(oldAttributes[name])\n              ) {\n                for (let styleName in oldAttributes[name]) {\n                  if (!(styleName in value)) {\n                    if (styleName.includes('-')) {\n                      (element as HTMLElement).style.removeProperty(\n                        styleName,\n                      )\n                    } else {\n                      // @ts-ignore\n                      delete (element as HTMLElement).style[styleName]\n                    }\n                  }\n                }\n              }\n            } else {\n              // Ensure it is of type string.\n              if (value === true) {\n                value = 'true'\n              } else if (type !== 'string') {\n                value = value.toString()\n              }\n\n              element.setAttribute(name, (value as string))\n            }\n          }\n        }\n      }\n    }\n\n    // Cleanup old attributes.\n    if (oldAttributes) {\n      for (const name in oldAttributes) {\n        const value = oldAttributes[name]\n        if (\n          !newAttributes\n          || !newAttributes[name]\n        ) {\n          if (typeof (value) === 'function') {\n            element.removeEventListener(\n              name,\n              oldAttributes[name] as NodeAttributeListener,\n            )\n          } else if (name === 'class') {\n            element.className = ''\n          } else if (name === 'style') {\n            (element as HTMLElement).style.cssText = ''\n          } else if (name === 'value') {\n            (element as HTMLInputElement).value = ''\n            // Don't dispatch the input change event, the rerendering should update everything: element.dispatchEvent(new Event('change'))\n          } else {\n            element.removeAttribute(name)\n          }\n        }\n      }\n    }\n  }\n\n  let oldMemoMap: WeakMap<MemoFunction, MemoData> = new WeakMap()\n  let newMemoMap: WeakMap<MemoFunction, MemoData> = new WeakMap()\n  const updateChildren = (\n    element: Element,\n    newChildAbstracts?: NodeContent[],\n    oldChildAbstracts?: NodeContent[],\n  ): void => {\n    let newIndex = 0\n    let newCount = 0\n    if (newChildAbstracts) {\n      for (; newIndex < newChildAbstracts.length; newIndex++) {\n        const newAbstract = newChildAbstracts[newIndex]\n\n        // Handle memoization.\n        if ((newAbstract as MemoAbstract).r) {\n          let match: MemoData | undefined = oldMemoMap.get(\n            (newAbstract as MemoAbstract).r,\n          )\n          if (\n            !match\n            || !equalRecursive(match.m, (newAbstract as MemoAbstract).m)\n          ) {\n            match = {\n              c: arrayifyOrUndefined(\n                (newAbstract as MemoAbstract).r(\n                  state,\n                  (newAbstract as MemoAbstract).m,\n                )\n              ),\n              m: (newAbstract as MemoAbstract).m,\n              r: (newAbstract as MemoAbstract).r,\n            } as MemoData\n          }\n\n          newMemoMap.set((newAbstract as MemoAbstract).r, match)\n\n          // Splice nodes into the tree and re-run the loop again.\n          newChildAbstracts.splice(\n            newIndex,\n            1,\n            // NOTE: Is a recursive clone required here? Yes as long as the old abstract tree is mutated.\n            ...cloneRecursive(\n              match.c,\n            ),\n          )\n          // NOTE: Preferably we would skip re-rendering when the nodes were memoized, but because those nodes might have morphed we'll have to check. So we re-process the node again that was just inserted in. We could have the resolve memoization return whether it was re-rendered, but this also means the nodes are not allowed to be re-used when morphing the DOM and this needs to be prevented by marking them as such.\n          newIndex--\n          continue\n        }\n\n        // Try to find the matching old abstract.\n        let matched = false\n        if (oldChildAbstracts) {\n          for (let oldIndex = newIndex - newCount; oldIndex < oldChildAbstracts.length; oldIndex++) {\n            const oldAbstract = oldChildAbstracts[oldIndex]\n            if (\n              (\n                (oldAbstract as NodeAbstract).t\n                && (newAbstract as NodeAbstract).t === (oldAbstract as NodeAbstract).t\n              )\n              || (\n                !(oldAbstract as NodeAbstract).t\n                && !(newAbstract as NodeAbstract).t\n              )\n            ) {\n              matched = true\n\n              if (newIndex !== (oldIndex + newCount)) {\n                // Move node in dom.\n                element.insertBefore(\n                  element.childNodes[oldIndex + newCount],\n                  element.childNodes[newIndex],\n                )\n                // Move node in abstract tree.\n                oldChildAbstracts.splice(\n                  newIndex - newCount,\n                  0,\n                  oldChildAbstracts.splice(\n                    oldIndex,\n                    1,\n                  )[0]\n                )\n              }\n\n              if ((newAbstract as NodeAbstract).t) {\n                updateAttributes(\n                  (element.childNodes[newIndex] as Element),\n                  (newAbstract as NodeAbstract).a,\n                  (oldAbstract as NodeAbstract).a,\n                )\n                updateChildren(\n                  (element.childNodes[newIndex] as Element),\n                  (newAbstract as NodeAbstract).c,\n                  (oldAbstract as NodeAbstract).c,\n                )\n              } else if (oldAbstract !== newAbstract) {\n                element.childNodes[newIndex].textContent = newAbstract as string\n              }\n              break\n            }\n          }\n        }\n\n        if (!matched) {\n          let newNode: Node\n          if ((newAbstract as NodeAbstract).t) {\n            newNode = document.createElement(\n              (newAbstract as NodeAbstract).t,\n            )\n            updateAttributes(\n              newNode as HTMLElement,\n              (newAbstract as NodeAbstract).a,\n            )\n            updateChildren(\n              newNode as HTMLElement,\n              (newAbstract as NodeAbstract).c,\n            )\n          } else {\n            newNode = document.createTextNode(\n              newAbstract as string,\n            )\n          }\n\n          element.insertBefore(\n            newNode,\n            element.childNodes[newIndex],\n          )\n          newCount++\n        }\n      }\n    }\n\n    if (oldChildAbstracts) {\n      const elementLength = oldChildAbstracts.length + newCount\n      if (elementLength >= newIndex) {\n        for (let i = elementLength - 1; i >= newIndex; i--) {\n          element.childNodes[i].remove()\n        }\n      }\n    }\n  }\n\n  const _rootElement = (\n    typeof (rootElement) === 'string'\n      ? (\n        document.querySelector(rootElement)\n        || document.body.appendChild(\n          document.createElement('div')\n        )\n      )\n      : rootElement\n  )\n\n  if (typeof (oldAbstractTree) === 'string') {\n    try {\n      oldAbstractTree = JSON.parse(oldAbstractTree) as NodeContent[]\n    } catch (error) {\n      oldAbstractTree = null\n    }\n  }\n  if (!oldAbstractTree) {\n    oldAbstractTree = childrenToNodes(_rootElement)\n  }\n\n  let active: boolean = true,\n    updating: boolean = false\n  const updateAbstracts = (\n  ): void => {\n    if (\n      active\n      && !updating\n      // Only update if changes to the state have been made.\n      && updatePromise\n    ) {\n      updating = true\n      updatePromise = null\n\n      let newAbstractTree = arrayifyOrUndefined(\n        renderView(state),\n      )\n      updateChildren(\n        _rootElement,\n        newAbstractTree,\n        oldAbstractTree as NodeContent[],\n      )\n      // Store tree for next update.\n      oldAbstractTree = newAbstractTree\n      oldMemoMap = newMemoMap\n      newMemoMap = new WeakMap()\n\n      updating = false\n    }\n  }\n  // Trigger update first so the promise that is checked gets set.\n  triggerUpdate()\n  // Now perform initial update.\n  updateAbstracts()\n\n  return [\n    triggerUpdate,\n    (): void => {\n      if (active) {\n        active = false\n\n        for (let i = _rootElement.childNodes.length - 1; i >= 0; i--) {\n          _rootElement.childNodes[i].remove()\n        }\n      }\n    },\n    state,\n  ]\n}\n"],
  "mappings": "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",
  "names": ["marker", "memo", "render", "memory", "marker", "arrayifyOrUndefined", "data", "node", "type", "attributesOrContents", "contents", "marker", "arrayifyOrUndefined", "cloneRecursive", "value", "clone", "key", "equalRecursive", "valueA", "valueB", "keys", "k", "childrenToNodes", "element", "_a", "abstractChildNodes", "childNode", "elementChild", "attributes", "attribute", "node", "proxify", "root", "onChange", "handler", "target", "key", "deleted", "value", "add", "mount", "rootElement", "renderView", "initialState", "oldAbstractTree", "updatePromise", "triggerUpdate", "updateAbstracts", "state", "proxify", "updateAttributes", "element", "newAttributes", "oldAttributes", "name", "value", "type", "oldValue", "listener", "event", "classNames", "className", "styleName", "styleValue", "oldMemoMap", "newMemoMap", "updateChildren", "newChildAbstracts", "oldChildAbstracts", "newIndex", "newCount", "newAbstract", "match", "equalRecursive", "arrayifyOrUndefined", "cloneRecursive", "matched", "oldIndex", "oldAbstract", "newNode", "elementLength", "i", "_rootElement", "error", "childrenToNodes", "active", "updating", "newAbstractTree"]
}
