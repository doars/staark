{
  "version": 3,
  "sources": ["../../../.scripts/iife.ts", "../src/utilities/clone.ts", "../src/utilities/delay.ts", "../src/utilities/type.ts", "../src/library/request.ts", "../src/index.base.iife.ts"],
  "sourcesContent": ["export const iife = function (\n  path: Array<string>,\n  data: any\n) {\n  let subject: Record<string, any> = window\n  for (let i = 0; i < path.length - 1; i++) {\n    if (typeof (subject[path[i]]) !== 'object' || !Array.isArray(subject[path[i]])) {\n      subject[path[i]] = {}\n    }\n    subject = subject[path[i]]\n  }\n  subject[path[path.length - 1]] = data\n}\n", "\nexport const cloneRecursive = (\n  value: any,\n) => {\n  if (typeof (value) === 'object') {\n    if (Array.isArray(value)) {\n      const clone: any[] = []\n      for (let i = 0; i < value.length; i++) {\n        clone.push(cloneRecursive(value[i]))\n      }\n      value = clone\n    } else {\n      const clone: Record<string, any> = {}\n      for (const key in value) {\n        clone[key] = cloneRecursive(value[key])\n      }\n      value = clone\n    }\n  }\n  return value\n}\n", "export const delay = async (\n  time: number,\n): Promise<null> => {\n  if (time > 0) {\n    return new Promise(\n      (resolve) => setTimeout(resolve, time)\n    )\n  }\n  return null\n}\n", "const normalizeContentType = (\n  contentType: string,\n): string => contentType.split(';')[0].trim().toLowerCase()\n\nconst getFileExtension = (\n  url: string,\n): string | null => {\n  const match = url.match(/\\.([^./?]+)(?:[?#]|$)/)\n  return match ? match[1].toLowerCase() : null\n}\n\nexport const getType = function (\n  url: string,\n  responseHeaders: Headers,\n  requestHeaders?: Record<string, string>,\n): string {\n  // Check Content-Type in response headers.\n  const contentType = responseHeaders.get('Content-Type')\n  if (contentType) {\n    return normalizeContentType(contentType)\n  }\n\n  // Check Accept in request headers.\n  if (requestHeaders) {\n    if (requestHeaders['Accept']) {\n      const acceptTypes = requestHeaders['Accept'].split(',')\n      for (const type of acceptTypes) {\n        if (type.trim() !== '*/*') {\n          return normalizeContentType(type)\n        }\n      }\n    }\n  }\n\n  // Check URL extension.\n  const extension = getFileExtension(url)\n  if (extension) {\n    return extension\n  }\n\n  return ''\n}\n", "import {\n  cloneRecursive,\n} from '../utilities/clone.js'\nimport {\n  delay,\n} from '../utilities/delay.js'\nimport { getType } from '../utilities/type.js'\n\nexport interface ResponseParser {\n  types: string[],\n  parser: (\n    response: Response,\n    options: RequestOptions,\n  ) => any,\n}\n\nexport interface SendOptions {\n  body?: any\n  credentials?: RequestCredentials\n  domain?: string\n  headers?: Record<string, string>\n  method?: 'get' | 'post' | 'put' | 'delete' | 'patch' | 'head'\n  mode?: RequestMode\n  path?: string\n  priority?: 'high' | 'normal' | 'low'\n  queryParams?: Record<string, string>\n  redirect?: RequestRedirect,\n  responseParsers?: ResponseParser[],\n  type?: string,\n\n  abort?: AbortController\n  cache?: RequestCache\n\n  debounce?: number\n  delay?: number\n  throttle?: number\n  timeout?: number\n  retryAttempts?: number\n  retryCodes?: number[]\n  retryDelay?: number\n}\n\nexport interface RequestOptions extends SendOptions {\n  maxConcurrency?: number\n  maxRequests?: number\n}\n\nconst DEFAULT_VALUES: RequestOptions = {\n  method: 'get',\n  retryCodes: [429, 503, 504,],\n  retryDelay: 500,\n}\n\n// TODO: If the response is \"429 Too Many Requests\" or \"503 Service unavailable\" and retry after is later than the retry delay than use that moment instead. https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n\nexport const create = (\n  initialOptions: RequestOptions,\n) => {\n  initialOptions = {\n    ...DEFAULT_VALUES,\n    ...cloneRecursive(initialOptions),\n  }\n\n  let lastExecutionTime = 0\n  let activeRequests = 0\n  let totalRequests = 0 // TODO: Add support for max requests options.\n  let debounceTimeout: number | null = null\n\n  const throttle = async (\n    throttleValue: number,\n  ) => {\n    const now = Date.now()\n    const waitTime = throttleValue - (now - lastExecutionTime)\n    lastExecutionTime = now + (\n      waitTime > 0\n        ? waitTime\n        : 0\n    )\n    await delay(waitTime)\n  }\n\n  const debounce = (\n    debounceValue: number,\n  ): Promise<void> => {\n    return new Promise((resolve) => {\n      if (debounceTimeout) {\n        clearTimeout(debounceTimeout)\n      }\n      debounceTimeout = setTimeout(\n        resolve,\n        debounceValue,\n      )\n    })\n  }\n\n  const sendRequest = async (\n    options: RequestOptions,\n  ): Promise<[Response, any]> => {\n    const config: RequestInit = {\n      cache: options.cache,\n      credentials: options.credentials,\n      headers: options.headers,\n      method: options.method,\n      mode: options.mode,\n      redirect: options.redirect,\n\n      body: (\n        options.body\n          ? JSON.stringify(options.body)\n          : undefined\n      ),\n    }\n\n    let url = (options.domain || '') + (options.path || '')\n    if (options.queryParams) {\n      url += '?' + new URLSearchParams(\n        options.queryParams,\n      ).toString()\n    }\n\n    if (options.timeout) {\n      const controller = (\n        options.abort\n        || new AbortController()\n      )\n      config.signal = controller.signal\n      setTimeout(\n        () => controller.abort(),\n        options.timeout,\n      );\n    }\n\n    const executeFetch = async (\n    ): Promise<[Response, any]> => {\n      const response = await fetch(\n        url,\n        config,\n      )\n\n      let result\n      let foundParser = false\n      const type = options.type || getType(url, response.headers, options.headers)\n      if (options.responseParsers) {\n        for (const parser of options.responseParsers) {\n          foundParser = parser.types.includes(type)\n          if (foundParser) {\n            result = await parser.parser(\n              response,\n              options,\n            )\n            break\n          }\n        }\n      }\n      if (!foundParser) {\n        switch (type.toLowerCase()) {\n          case 'arraybuffer':\n            result = await response.arrayBuffer()\n            break\n\n          case 'blob':\n            result = await response.blob()\n            break\n\n          case 'formdata':\n            result = await response.formData()\n            break\n\n          case 'text/plain':\n          case 'text':\n          case 'txt':\n            result = await response.text()\n            break\n\n          case 'text/html-partial':\n          case 'html-partial':\n            result = await response.text()\n            const template = document.createElement('template')\n            template.innerHTML = result\n            result = template.content.childNodes[0]\n            break\n\n          case 'text/html':\n          case 'html':\n            result = await response.text()\n            result = (new DOMParser()).parseFromString(result, 'text/html')\n            break\n\n          case 'application/json':\n          case 'text/json':\n          case 'json':\n            result = await response.json()\n            break\n\n          case 'image/svg+xml':\n          case 'svg':\n            result = await response.text()\n            result = (new DOMParser()).parseFromString(result, 'image/svg+xml')\n            break\n\n          case 'application/xml':\n          case 'text/xml':\n          case 'xml':\n            result = await response.text()\n            result = (new DOMParser()).parseFromString(result, 'application/xml')\n            break\n        }\n      }\n\n      return [response, result]\n    }\n\n    const retryRequest = async (\n    ): Promise<[Response, any]> => {\n      let attempt = 0\n      const retryAttempts = options.retryAttempts || 0\n      const retryDelay = options.retryDelay || 0\n\n      while (attempt < retryAttempts) {\n        try {\n          return await executeFetch()\n        } catch (error) {\n          // TODO: Only do on certain responses: retryCodes.\n\n          attempt++\n          if (attempt >= retryAttempts) {\n            throw error\n          }\n\n          // Exponentially increase the retry delay.\n          await delay(retryDelay * Math.pow(2, attempt - 1))\n        }\n      }\n      return executeFetch()\n    }\n\n    try {\n      const [response, result] = await retryRequest()\n      if (!response.ok) {\n        throw new Error(response.statusText)\n      }\n      return [response, result]\n    } catch (error) {\n      throw error\n    }\n  }\n\n  return async (\n    sendOptions: SendOptions,\n  ): Promise<[Response, any]> => {\n    const options = {\n      ...initialOptions,\n      ...cloneRecursive(sendOptions),\n    }\n    if (initialOptions.headers) {\n      options.headers = {\n        ...initialOptions.headers,\n        ...options.headers,\n      }\n    }\n\n    if (options.debounce) {\n      await debounce(options.debounce)\n    }\n\n    if (options.delay) {\n      await delay(options.delay)\n    }\n\n    if (options.throttle) {\n      await throttle(options.throttle)\n    }\n\n    if (\n      options.maxConcurrency\n      && activeRequests >= options.maxConcurrency\n    ) {\n      await new Promise((resolve) => {\n        let interval: number | null = null\n        const wait = () => {\n          if (activeRequests >= options.maxConcurrency!) {\n            interval = requestAnimationFrame(wait)\n          } else {\n            if (interval) {\n              clearInterval(interval)\n            }\n            resolve(null)\n          }\n        }\n        interval = requestAnimationFrame(wait)\n      })\n    }\n\n    activeRequests++\n    try {\n      return await sendRequest(\n        options,\n      )\n    } finally {\n      activeRequests--\n    }\n  }\n}\n", "import { iife } from '../../../.scripts/iife.js'\n\nimport { create } from './library/request.js'\n\niife([\n  'vroagn',\n], {\n  create,\n})\n"],
  "mappings": "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",
  "names": ["iife", "path", "data", "subject", "i", "cloneRecursive", "value", "clone", "i", "key", "delay", "time", "__async", "resolve", "normalizeContentType", "contentType", "getFileExtension", "url", "match", "getType", "responseHeaders", "requestHeaders", "acceptTypes", "type", "extension", "DEFAULT_VALUES", "create", "initialOptions", "__spreadValues", "cloneRecursive", "lastExecutionTime", "activeRequests", "totalRequests", "debounceTimeout", "throttle", "throttleValue", "__async", "now", "waitTime", "delay", "debounce", "debounceValue", "resolve", "sendRequest", "options", "config", "url", "controller", "executeFetch", "response", "result", "foundParser", "type", "getType", "parser", "template", "retryRequest", "attempt", "retryAttempts", "retryDelay", "error", "sendOptions", "interval", "wait", "iife", "create"]
}
