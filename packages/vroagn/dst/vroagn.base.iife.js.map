{
  "version": 3,
  "sources": ["../../../.scripts/iife.ts", "../src/utilities/clone.ts", "../src/utilities/delay.ts", "../src/utilities/type.ts", "../src/library/request.ts", "../src/index.base.iife.ts"],
  "sourcesContent": ["export const iife = function (\n  path: Array<string>,\n  data: any\n) {\n  let subject: Record<string, any> = window\n  for (let i = 0; i < path.length - 1; i++) {\n    if (typeof (subject[path[i]]) !== 'object' || !Array.isArray(subject[path[i]])) {\n      subject[path[i]] = {}\n    }\n    subject = subject[path[i]]\n  }\n  subject[path[path.length - 1]] = data\n}\n", "\nexport const cloneRecursive = (\n  value: any,\n) => {\n  if (typeof (value) === 'object') {\n    if (Array.isArray(value)) {\n      const clone: any[] = []\n      for (let i = 0; i < value.length; i++) {\n        clone.push(cloneRecursive(value[i]))\n      }\n      value = clone\n    } else {\n      const clone: Record<string, any> = {}\n      for (const key in value) {\n        clone[key] = cloneRecursive(value[key])\n      }\n      value = clone\n    }\n  }\n  return value\n}\n", "export const delay = async (\n  time: number,\n): Promise<null> => {\n  if (time > 0) {\n    return new Promise(\n      (resolve) => setTimeout(resolve, time)\n    )\n  }\n  return null\n}\n", "const normalizeContentType = (\n  contentType: string,\n): string => contentType.split(';')[0].trim().toLowerCase()\n\nconst getFileExtension = (\n  url: string,\n): string | null => {\n  const match = url.match(/\\.([^./?]+)(?:[?#]|$)/)\n  return match ? match[1].toLowerCase() : null\n}\n\nexport const getType = function (\n  url: string,\n  responseHeaders: Headers,\n  requestHeaders?: Record<string, string>,\n): string {\n  // Check Content-Type in response headers.\n  const contentType = responseHeaders.get('Content-Type')\n  if (contentType) {\n    return normalizeContentType(contentType)\n  }\n\n  // Check Accept in request headers.\n  if (requestHeaders) {\n    if (requestHeaders['Accept']) {\n      const acceptTypes = requestHeaders['Accept'].split(',')\n      for (const type of acceptTypes) {\n        if (type.trim() !== '*/*') {\n          return normalizeContentType(type)\n        }\n      }\n    }\n  }\n\n  // Check URL extension.\n  const extension = getFileExtension(url)\n  if (extension) {\n    return extension\n  }\n\n  return ''\n}\n", "import {\n  cloneRecursive,\n} from '../utilities/clone.js'\nimport {\n  delay,\n} from '../utilities/delay.js'\nimport { getType } from '../utilities/type.js'\n\nexport interface ResponseParser {\n  types: string[],\n  parser: (\n    response: Response,\n    options: RequestOptions,\n  ) => any,\n}\n\nexport interface SendOptions {\n  body?: any\n  credentials?: RequestCredentials\n  domain?: string\n  headers?: Record<string, string>\n  method?: 'get' | 'post' | 'put' | 'delete' | 'patch' | 'head'\n  mode?: RequestMode\n  path?: string\n  priority?: 'high' | 'normal' | 'low'\n  queryParams?: Record<string, string>\n  redirect?: RequestRedirect,\n  responseParsers?: ResponseParser[],\n  type?: string,\n\n  abort?: AbortController\n  cache?: RequestCache\n\n  debounce?: number\n  delay?: number\n  throttle?: number\n  timeout?: number\n  retryAttempts?: number\n  retryCodes?: number[]\n  retryDelay?: number\n}\n\nexport interface RequestOptions extends SendOptions {\n  maxConcurrency?: number\n  maxRequests?: number\n}\n\nconst DEFAULT_VALUES: RequestOptions = {\n  method: 'get',\n  retryCodes: [429, 503, 504,],\n  retryDelay: 500,\n}\n\nexport const create = (\n  initialOptions: RequestOptions,\n) => {\n  initialOptions = {\n    ...DEFAULT_VALUES,\n    ...cloneRecursive(initialOptions),\n  }\n\n  let lastExecutionTime = 0\n  let activeRequests = 0\n  let totalRequests = 0\n  let debounceTimeout: number | null = null\n\n  const throttle = async (\n    throttleValue: number,\n  ) => {\n    const now = Date.now()\n    const waitTime = throttleValue - (now - lastExecutionTime)\n    lastExecutionTime = now + (\n      waitTime > 0\n        ? waitTime\n        : 0\n    )\n    await delay(waitTime)\n  }\n\n  const debounce = (\n    debounceValue: number,\n  ): Promise<void> => {\n    return new Promise((resolve) => {\n      if (debounceTimeout) {\n        clearTimeout(debounceTimeout)\n      }\n      debounceTimeout = setTimeout(\n        resolve,\n        debounceValue,\n      )\n    })\n  }\n\n  const sendRequest = async (\n    options: RequestOptions,\n  ): Promise<[Error | null, Response | null, any]> => {\n    if (\n      options.maxRequests !== undefined\n      && totalRequests >= options.maxRequests\n    ) {\n      return [new Error('Maximum request limit reached'), null, null]\n    }\n\n    totalRequests++\n\n    const config: RequestInit = {\n      cache: options.cache,\n      credentials: options.credentials,\n      headers: options.headers,\n      method: options.method,\n      mode: options.mode,\n      redirect: options.redirect,\n\n      body: (\n        options.body\n          ? JSON.stringify(options.body)\n          : undefined\n      ),\n    }\n\n    let url = (options.domain || '') + (options.path || '')\n    if (options.queryParams) {\n      url += '?' + new URLSearchParams(\n        options.queryParams,\n      ).toString()\n    }\n\n    if (options.timeout) {\n      const controller = (\n        options.abort\n        || new AbortController()\n      )\n      config.signal = controller.signal\n      setTimeout(\n        () => controller.abort(),\n        options.timeout,\n      );\n    }\n\n    const executeFetch = async (\n    ): Promise<[Error | null, Response, any]> => {\n      // let response = null\n      // try {\n      //   response = await fetch(url, config)\n      // } catch (error) {\n      //   return [(error as Error) || new Error('Thrown fetching error is falsely'), response, null]\n      // }\n      const response = await fetch(url, config)\n      if (!response.ok) {\n        return [new Error('Invalid response'), response, null]\n      }\n\n      try {\n        let result\n        let foundParser = false\n        const type = options.type || getType(url, response.headers, options.headers)\n        if (options.responseParsers) {\n          for (const parser of options.responseParsers) {\n            foundParser = parser.types.includes(type)\n            if (foundParser) {\n              result = await parser.parser(\n                response,\n                options,\n              )\n              break\n            }\n          }\n        }\n        if (!foundParser) {\n          switch (type.toLowerCase()) {\n            case 'arraybuffer':\n              result = await response.arrayBuffer()\n              break\n\n            case 'blob':\n              result = await response.blob()\n              break\n\n            case 'formdata':\n              result = await response.formData()\n              break\n\n            case 'text/plain':\n            case 'text':\n            case 'txt':\n              result = await response.text()\n              break\n\n            case 'text/html-partial':\n            case 'html-partial':\n              result = await response.text()\n              const template = document.createElement('template')\n              template.innerHTML = result\n              result = template.content.childNodes[0]\n              break\n\n            case 'text/html':\n            case 'html':\n              result = await response.text()\n              result = (new DOMParser()).parseFromString(result, 'text/html')\n              break\n\n            case 'application/json':\n            case 'text/json':\n            case 'json':\n              result = await response.json()\n              break\n\n            case 'image/svg+xml':\n            case 'svg':\n              result = await response.text()\n              result = (new DOMParser()).parseFromString(result, 'image/svg+xml')\n              break\n\n            case 'application/xml':\n            case 'text/xml':\n            case 'xml':\n              result = await response.text()\n              result = (new DOMParser()).parseFromString(result, 'application/xml')\n              break\n          }\n        }\n\n        return [null, response, result]\n      } catch (error) {\n        return [(error as Error) || new Error('Thrown parsing error is falsy'), response, null]\n      }\n    }\n\n    const retryRequest = async (\n    ): Promise<[Error | null, Response, any]> => {\n      let attempt = 0\n      const retryAttempts = options.retryAttempts || 0\n      const retryDelay = options.retryDelay || 0\n\n      while (attempt < retryAttempts) {\n        const [error, response, result] = await executeFetch()\n        if (!error) {\n          return [error, response, result]\n        }\n        if (!options.retryCodes?.includes(response.status || 200)) {\n          return [new Error('Invalid status code'), response, result]\n        }\n\n        attempt++\n        if (attempt >= retryAttempts) {\n          return [new Error('Too many retry attempts'), response, result]\n        }\n\n        // Exponentially increase the retry delay.\n        let delayTime = retryDelay * Math.pow(2, attempt - 1)\n\n        // Try and respect the Retry-After header.\n        const retryAfter = response.headers.get('Retry-After')\n        if (retryAfter) {\n          const retryAfterSeconds = parseInt(retryAfter, 10)\n          if (!isNaN(retryAfterSeconds)) {\n            delayTime = Math.max(delayTime, retryAfterSeconds * 1000)\n          } else {\n            const retryAfterDate = new Date(retryAfter).getTime()\n            if (!isNaN(retryAfterDate)) {\n              const currentTime = Date.now()\n              delayTime = Math.max(delayTime, retryAfterDate - currentTime)\n            }\n          }\n        }\n\n        await delay(delayTime)\n      }\n      return executeFetch()\n    }\n\n    const [error, response, result] = await retryRequest()\n    if (!response.ok) {\n      return [new Error(response.statusText), response, result]\n    }\n    return [error, response, result]\n  }\n\n  return async (\n    sendOptions: SendOptions,\n  ): Promise<[Error | null, Response | null, any]> => {\n    const options = {\n      ...initialOptions,\n      ...cloneRecursive(sendOptions),\n    }\n    if (initialOptions.headers) {\n      options.headers = {\n        ...initialOptions.headers,\n        ...options.headers,\n      }\n    }\n\n    if (options.debounce) {\n      await debounce(options.debounce)\n    }\n\n    if (options.delay) {\n      await delay(options.delay)\n    }\n\n    if (options.throttle) {\n      await throttle(options.throttle)\n    }\n\n    if (\n      options.maxConcurrency\n      && activeRequests >= options.maxConcurrency\n    ) {\n      await new Promise((resolve) => {\n        let interval: number | null = null\n        const wait = () => {\n          if (activeRequests >= options.maxConcurrency!) {\n            interval = requestAnimationFrame(wait)\n          } else {\n            if (interval) {\n              clearInterval(interval)\n            }\n            resolve(null)\n          }\n        }\n        interval = requestAnimationFrame(wait)\n      })\n    }\n\n    activeRequests++\n    const results = await sendRequest(\n      options,\n    )\n    activeRequests--\n    return results\n  }\n}\n", "import { iife } from '../../../.scripts/iife.js'\n\nimport { create } from './library/request.js'\n\niife([\n  'vroagn',\n], {\n  create,\n})\n"],
  "mappings": "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",
  "names": ["response", "result", "error"]
}
