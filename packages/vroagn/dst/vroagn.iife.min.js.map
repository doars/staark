{
  "version": 3,
  "sources": ["../../../.scripts/iife.ts", "../src/utilities/clone.js", "../src/utilities/delay.ts", "../src/utilities/type.ts", "../src/library/request.js", "../src/library/parsers/csv.js", "../src/library/parsers/ini.js", "../src/library/parsers/toml.js", "../src/library/parsers/yaml.js", "../src/index.iife.js"],
  "sourcesContent": ["export const iife = function (\n  path: Array<string>,\n  data: any\n) {\n  let subject: Record<string, any> = window\n  for (let i = 0; i < path.length - 1; i++) {\n    if (\n      typeof (subject[path[i]]) !== 'object'\n      || !Array.isArray(subject[path[i]])\n    ) {\n      subject[path[i]] = {}\n    }\n    subject = subject[path[i]]\n  }\n  subject[path[path.length - 1]] = data\n}\n", "/**\n * Creates a deep clone of a javascript value.\n * @param {any} value Data to clone.\n * @returns {any} Clone of the data.\n */\nexport const cloneRecursive = (\n  value,\n) => {\n  if (typeof (value) === 'object') {\n    const clone = (\n      Array.isArray(value)\n        ? []\n        : {}\n    )\n    for (const key in value) {\n      clone[key] = cloneRecursive(value[key])\n    }\n    return clone\n  }\n  return value\n}\n", "export const delay = async (\n  time: number,\n): Promise<null> => {\n  if (time > 0) {\n    return new Promise(\n      (resolve) => setTimeout(resolve, time)\n    )\n  }\n  return null\n}\n", "const normalizeContentType = (\n  contentType: string,\n): string => contentType.split(';')[0].trim().toLowerCase()\n\nconst getFileExtension = (\n  url: string,\n): string | null => {\n  const match = url.match(/\\.([^./?]+)(?:[?#]|$)/)\n  return match ? match[1].toLowerCase() : null\n}\n\nexport const getType = function (\n  url: string,\n  responseHeaders: Headers,\n  requestHeaders?: Record<string, string>,\n): string {\n  // Check Content-Type in response headers.\n  const contentType = responseHeaders.get('Content-Type')\n  if (contentType) {\n    return normalizeContentType(contentType)\n  }\n\n  // Check Accept in request headers.\n  if (requestHeaders) {\n    if (requestHeaders['Accept']) {\n      const acceptTypes = requestHeaders['Accept'].split(',')\n      for (const type of acceptTypes) {\n        if (type.trim() !== '*/*') {\n          return normalizeContentType(type)\n        }\n      }\n    }\n  }\n\n  // Check URL extension.\n  const extension = getFileExtension(url)\n  if (extension) {\n    return extension\n  }\n\n  return ''\n}\n", "import { cloneRecursive } from '../utilities/clone.js'\nimport { delay } from '../utilities/delay.js'\nimport { getType } from '../utilities/type.js'\n\n/**\n * @typedef {Object} ResponseParser\n * @property {string[]} types\n * @property {(response: Response, options: RequestOptions, type: string) => any} parser\n */\n\n/**\n * @typedef {Object} SendOptions\n * @property {any} [body]\n * @property {RequestCredentials} [credentials]\n * @property {string} [domain]\n * @property {Record<string, string>} [headers]\n * @property {'get' | 'post' | 'put' | 'delete' | 'patch' | 'head'} [method]\n * @property {RequestMode} [mode]\n * @property {string} [path]\n * @property {'high' | 'normal' | 'low'} [priority]\n * @property {Record<string, string>} [queryParams]\n * @property {RequestRedirect} [redirect]\n * @property {ResponseParser[]} [parsers]\n * @property {string} [type]\n * @property {AbortController} [abort]\n * @property {RequestCache} [cache]\n * @property {(request: Request | string, requestOptions?: RequestInit) => Promise<Response>} [fetch]\n * @property {number} [debounce]\n * @property {number} [delay]\n * @property {number} [throttle]\n * @property {number} [timeout]\n * @property {number} [retryAttempts]\n * @property {number[]} [retryCodes]\n * @property {number} [retryDelay]\n */\n\n/**\n * @typedef {SendOptions & { maxConcurrency?: number, maxRequests?: number }} RequestOptions\n */\n\nconst DEFAULT_VALUES = {\n  method: 'get',\n  retryCodes: [429, 503, 504],\n  retryDelay: 500,\n}\n\n/**\n * @param {RequestOptions} initialOptions\n */\nexport const create = (\n  initialOptions,\n) => {\n  initialOptions = {\n    ...DEFAULT_VALUES,\n    ...cloneRecursive(initialOptions),\n  }\n\n  let lastExecutionTime = 0\n  let activeRequests = 0\n  let totalRequests = 0\n  let debounceTimeout = null\n\n  /**\n   * @param {number} throttleValue\n   */\n  const throttle = async (\n    throttleValue,\n  ) => {\n    const now = Date.now()\n    const waitTime = throttleValue - (now - lastExecutionTime)\n    lastExecutionTime = now + (waitTime > 0 ? waitTime : 0)\n    await delay(waitTime)\n  }\n\n  /**\n   * @param {number} debounceValue\n   * @returns {Promise<void>}\n   */\n  const debounce = (\n    debounceValue,\n  ) => {\n    return new Promise((resolve) => {\n      if (debounceTimeout) {\n        clearTimeout(debounceTimeout)\n      }\n      debounceTimeout = setTimeout(resolve, debounceValue)\n    })\n  }\n\n  /**\n   * @param {RequestOptions} options\n   * @returns {Promise<[Error | null, Response | null, any]>}\n   */\n  const sendRequest = async (\n    options,\n  ) => {\n    if (\n      options.maxRequests !== undefined\n      && totalRequests >= options.maxRequests\n    ) {\n      return [new Error('Maximum request limit reached'), null, null]\n    }\n\n    totalRequests++\n\n    const config = {\n      cache: options.cache,\n      credentials: options.credentials,\n      headers: options.headers,\n      method: options.method,\n      mode: options.mode,\n      redirect: options.redirect,\n      body: options.body ? JSON.stringify(options.body) : undefined,\n    }\n\n    let url = (options.domain || '') + (options.path || '')\n    if (options.queryParams) {\n      url += '?' + new URLSearchParams(options.queryParams).toString()\n    }\n\n    if (options.timeout) {\n      const controller = options.abort || new AbortController()\n      config.signal = controller.signal\n      setTimeout(() => controller.abort(), options.timeout)\n    }\n\n    /**\n     * @returns {Promise<[Error | null, Response, any]>}\n     */\n    const executeFetch = async () => {\n      const response = await (options.fetch ?? fetch)(url, config)\n      if (!response.ok) {\n        return [new Error('Invalid response'), response, null]\n      }\n\n      try {\n        let result\n        let foundParser = false\n        const type = options.type || getType(url, response.headers, options.headers)\n        if (options.parsers) {\n          for (const parser of options.parsers) {\n            foundParser = parser.types.includes(type)\n            if (foundParser) {\n              result = await parser.parser(response, options, type)\n              break\n            }\n          }\n        }\n        if (!foundParser) {\n          switch (type.toLowerCase()) {\n            case 'arraybuffer':\n              result = await response.arrayBuffer()\n              break\n            case 'blob':\n              result = await response.blob()\n              break\n            case 'formdata':\n              result = await response.formData()\n              break\n            case 'text/plain':\n            case 'text':\n            case 'txt':\n              result = await response.text()\n              break\n            case 'text/html-partial':\n            case 'html-partial':\n              result = await response.text()\n              const template = document.createElement('template')\n              template.innerHTML = result\n              result = template.content.childNodes\n              break\n            case 'text/html':\n            case 'html':\n              result = await response.text()\n              result = new DOMParser().parseFromString(result, 'text/html')\n              break\n            case 'application/json':\n            case 'text/json':\n            case 'json':\n              result = await response.json()\n              break\n            case 'image/svg+xml':\n            case 'svg':\n              result = await response.text()\n              result = new DOMParser().parseFromString(result, 'image/svg+xml')\n              break\n            case 'application/xml':\n            case 'text/xml':\n            case 'xml':\n              result = await response.text()\n              result = new DOMParser().parseFromString(result, 'application/xml')\n              break\n          }\n        }\n\n        return [null, response, result]\n      } catch (error) {\n        return [error || new Error('Thrown parsing error is falsy'), response, null]\n      }\n    }\n\n    /**\n     * @returns {Promise<[Error | null, Response, any]>}\n     */\n    const retryRequest = async () => {\n      let attempt = 0\n      const retryAttempts = options.retryAttempts || 0\n      const retryDelay = options.retryDelay || 0\n\n      while (attempt < retryAttempts) {\n        const [error, response, result] = await executeFetch()\n        if (!error) {\n          return [error, response, result]\n        }\n        if (!options.retryCodes?.includes(response.status || 200)) {\n          return [new Error('Invalid status code'), response, result]\n        }\n\n        attempt++\n        if (attempt >= retryAttempts) {\n          return [new Error('Too many retry attempts'), response, result]\n        }\n\n        let delayTime = retryDelay * Math.pow(2, attempt - 1)\n\n        const retryAfter = response.headers.get('Retry-After')\n        if (retryAfter) {\n          const retryAfterSeconds = parseInt(retryAfter, 10)\n          if (!isNaN(retryAfterSeconds)) {\n            delayTime = Math.max(delayTime, retryAfterSeconds * 1000)\n          } else {\n            const retryAfterDate = new Date(retryAfter).getTime()\n            if (!isNaN(retryAfterDate)) {\n              const currentTime = Date.now()\n              delayTime = Math.max(delayTime, retryAfterDate - currentTime)\n            }\n          }\n        }\n\n        await delay(delayTime)\n      }\n      return executeFetch()\n    }\n\n    const [error, response, result] = await retryRequest()\n    if (!response.ok) {\n      return [new Error(response.statusText), response, result]\n    }\n    return [error, response, result]\n  }\n\n  /**\n   * @param {SendOptions} sendOptions\n   * @returns {Promise<[Error | null, Response | null, any]>}\n   */\n  return async (\n    sendOptions,\n  ) => {\n    const options = {\n      ...initialOptions,\n      ...cloneRecursive(sendOptions),\n    }\n    if (initialOptions.headers) {\n      options.headers = {\n        ...initialOptions.headers,\n        ...options.headers,\n      }\n    }\n\n    if (options.debounce) {\n      await debounce(options.debounce)\n    }\n\n    if (options.delay) {\n      await delay(options.delay)\n    }\n\n    if (options.throttle) {\n      await throttle(options.throttle)\n    }\n\n    if (\n      options.maxConcurrency\n      && activeRequests >= options.maxConcurrency\n    ) {\n      await new Promise(resolve => {\n        let interval = null\n        const wait = () => {\n          if (activeRequests >= options.maxConcurrency) {\n            interval = requestAnimationFrame(wait)\n          } else {\n            if (interval) {\n              clearInterval(interval)\n            }\n            resolve(null)\n          }\n        }\n        interval = requestAnimationFrame(wait)\n      })\n    }\n\n    activeRequests++\n    const results = await sendRequest(options)\n    activeRequests--\n    return results\n  }\n}\n", "/**\n * @typedef {import('../request.js').RequestOptions} RequestOptions\n * @typedef {import('../request.js').ResponseParser} ResponseParser\n */\n\n/**\n * @typedef {Object} CsvOptions\n * @property {string[]} [types]\n * @property {boolean} [hasHeaders]\n * @property {string} [columnDelimiter]\n * @property {string} [rowDelimiter]\n * @property {string} [escapeCharacter]\n */\n\nconst tsvTypes = [\n  'tsv',\n  'text/tab-separated-values',\n]\n\n/**\n * @param {CsvOptions} options\n * @returns {ResponseParser}\n */\nexport const csvParser = (options) => {\n  return {\n    types: options?.types || [\n      'csv', 'text/csv',\n      ...tsvTypes,\n    ],\n\n    /**\n     * @param {Response} response\n     * @param {RequestOptions} requestOptions\n     * @param {string} type\n     * @returns {Promise<any>}\n     */\n    parser: async (\n      response,\n      requestOptions,\n      type,\n    ) => {\n      const optionsTemp = {\n        columnDelimiter: (\n          tsvTypes.includes(type)\n            ? '\t'\n            : ','\n        ),\n        rowDelimiter: '\\n',\n        escapeCharacter: '\"',\n\n        ...options,\n      }\n\n      const string = await response.text()\n\n      const rows = []\n      let currentRow = []\n      let currentField = ''\n      let insideQuotes = false\n\n      for (let i = 0; i < string.length; i++) {\n        const character = string[i]\n        const nextCharacter = string[i + 1]\n\n        if (character === optionsTemp.escapeCharacter) {\n          if (\n            nextCharacter === optionsTemp.escapeCharacter\n            && insideQuotes\n          ) {\n            // Double quotes inside quotes.\n            currentField += optionsTemp.escapeCharacter\n            i++ // Skip next quote.\n          } else {\n            // Toggle insideQuotes.\n            insideQuotes = !insideQuotes\n          }\n        } else if (\n          character === optionsTemp.columnDelimiter\n          && !insideQuotes\n        ) {\n          currentRow.push(\n            currentField,\n          )\n          currentField = ''\n        } else if (\n          character === optionsTemp.rowDelimiter\n          && !insideQuotes\n        ) {\n          currentRow.push(\n            currentField,\n          )\n          currentField = ''\n\n          rows.push(currentRow)\n          currentRow = []\n        } else {\n          currentField += character\n        }\n      }\n\n      // Push the last field and row if there's any.\n      if (currentField) {\n        currentRow.push(\n          currentField,\n        )\n        currentField = ''\n      }\n      if (currentRow.length > 0) {\n        rows.push(currentRow)\n      }\n\n      if (optionsTemp.hasHeaders) {\n        // Extract headers and create objects.\n        const headers = rows[0]\n        return rows.slice(1).map(row => {\n          return headers.reduce((\n            object,\n            header,\n            index,\n          ) => {\n            object[header] = row[index] || ''\n            return object\n          }, {})\n        })\n      }\n\n      return rows\n    }\n  }\n}\n", "/**\n * @typedef {import('../request.js').RequestOptions} RequestOptions\n * @typedef {import('../request.js').ResponseParser} ResponseParser\n */\n\n/**\n * @typedef {Object} IniOptions\n * @property {string[]} [types]\n */\n\n/**\n * @typedef {Object} IniObject\n * @property {Object.<string, Object.<string, string>>} IniObject\n */\n\n/**\n * @param {IniOptions} [options={}]\n * @returns {ResponseParser}\n */\nexport const iniParser = (\n  options = {},\n) => {\n  return {\n    types: options.types || ['ini'],\n\n    /**\n     * @param {Response} response\n     * @param {RequestOptions} requestOptions\n     * @returns {Promise<IniObject>}\n     */\n    parser: async (\n      response,\n      requestOptions,\n      type,\n    ) => {\n      const text = await response.text()\n\n      const result = {}\n      const lines = text\n        .split(/\\r?\\n/)\n        .map(line => line.trim())\n\n      let currentSection = ''\n      for (const line of lines) {\n        if (\n          line === ''\n          || line.startsWith(';')\n          || line.startsWith('#')\n        ) {\n          // Skip empty lines and comments.\n          continue\n        }\n\n        if (\n          line.startsWith('[')\n          && line.endsWith(']')\n        ) {\n          // New section.\n          currentSection = line.slice(1, -1).trim()\n          if (!result[currentSection]) {\n            result[currentSection] = {}\n          }\n        } else {\n          // Key-value pair.\n          const [key, ...valueParts] = line.split('=')\n          const value = valueParts.join('=').trim()\n\n          if (currentSection === '') {\n            // Global section (outside any named section).\n            if (!result['global']) {\n              result['global'] = {}\n            }\n            result['global'][key.trim()] = value\n          } else {\n            result[currentSection][key.trim()] = value\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n", "/**\n * @typedef {import('../request.js').RequestOptions} RequestOptions\n * @typedef {import('../request.js').ResponseParser} ResponseParser\n */\n\n/**\n * @typedef {Object} TomlOptions\n * @property {string[]} [types]\n */\n\n/**\n * @typedef {string | number | boolean | Date | TomlObject | TomlValue[]} TomlValue\n */\n\n/**\n * @typedef {Object.<string, TomlValue>} TomlObject\n */\n\n/**\n * @param {string} value\n * @returns {TomlValue}\n */\nconst parseTomlValue = (value) => {\n  if (value.startsWith('\"') && value.endsWith('\"')) {\n    return value.slice(1, -1)\n  }\n  if (value.startsWith(\"'\") && value.endsWith(\"'\")) {\n    return value.slice(1, -1)\n  }\n  if (value === 'true' || value === 'false') {\n    return value === 'true'\n  }\n  if (!isNaN(Number(value))) {\n    return Number(value)\n  }\n  if (value.match(/^\\d{4}-\\d{2}-\\d{2}(T\\d{2}:\\d{2}:\\d{2}(.\\d+)?(Z|[+-]\\d{2}:\\d{2})?)?$/)) {\n    return new Date(value)\n  }\n  return value\n}\n\n/**\n * @param {string} tableString\n * @returns {TomlObject}\n */\nconst parseInlineTable = (tableString) => {\n  const result = {}\n  let key = ''\n  let value = ''\n  let inQuotes = false\n  let quoteChar = ''\n  let inValue = false\n\n  for (let i = 1; i < tableString.length - 1; i++) {\n    const character = tableString[i]\n    if (!inQuotes && (character === '\"' || character === \"'\")) {\n      inQuotes = true\n      quoteChar = character\n    } else if (inQuotes && character === quoteChar) {\n      inQuotes = false\n    } else if (!inQuotes && character === '=') {\n      inValue = true\n    } else if (!inQuotes && character === ',') {\n      result[key.trim()] = parseTomlValue(value.trim())\n      key = ''\n      value = ''\n      inValue = false\n    } else {\n      if (inValue) {\n        value += character\n      } else {\n        key += character\n      }\n    }\n  }\n\n  if (key) {\n    result[key.trim()] = parseTomlValue(value.trim())\n  }\n\n  return result\n}\n\n/**\n * @param {TomlOptions} [options={}]\n * @returns {ResponseParser}\n */\nexport const tomlParser = (\n  options = {},\n) => {\n  return {\n    types: options.types || [\n      'toml',\n      'application/toml',\n    ],\n\n    /**\n     * @param {Response} response\n     * @param {RequestOptions} requestOptions\n     * @param {string} type\n     * @returns {Promise<TomlObject>}\n     */\n    parser: async (\n      response,\n      requestOptions,\n      type,\n    ) => {\n      const text = await response.text()\n\n      const result = {}\n      let currentTable = result\n      let currentArray = null\n      let multilineString = null\n      let multilineStringDelimiter = null\n\n      const lines = text.split(/\\r?\\n/)\n      for (let i = 0; i < lines.length; i++) {\n        let line = lines[i].trim()\n\n        if (line === '' || line.startsWith('#')) {\n          continue // Skip empty lines and comments\n        }\n\n        if (multilineString !== null) {\n          if (line.endsWith(multilineStringDelimiter)) {\n            multilineString += line.slice(0, -multilineStringDelimiter.length)\n            currentTable[Object.keys(currentTable).pop()] = multilineString\n            multilineString = null\n            multilineStringDelimiter = null\n          } else {\n            multilineString += line + '\\n'\n          }\n          continue\n        }\n\n        if (line.startsWith('[') && line.endsWith(']')) {\n          // Table\n          const tableName = line.slice(1, -1).trim()\n          currentTable = result\n          const parts = tableName.split('.')\n          for (const part of parts) {\n            if (!currentTable[part]) currentTable[part] = {}\n            currentTable = currentTable[part]\n          }\n          currentArray = null\n        } else if (line.startsWith('[[') && line.endsWith(']]')) {\n          // Array of Tables\n          const arrayName = line.slice(2, -2).trim()\n          const parts = arrayName.split('.')\n          let parent = result\n          for (let i = 0; i < parts.length - 1; i++) {\n            if (!parent[parts[i]]) parent[parts[i]] = {}\n            parent = parent[parts[i]]\n          }\n          const lastPart = parts[parts.length - 1]\n          if (!parent[lastPart]) parent[lastPart] = []\n          const newTable = {}\n          parent[lastPart].push(newTable)\n          currentTable = newTable\n          currentArray = null\n        } else {\n          // Key-value pair\n          const [key, ...valueParts] = line.split('=')\n          let value = valueParts.join('=').trim()\n\n          if (value.startsWith('\"\"\"') || value.startsWith(\"'''\")) {\n            // Multi-line string\n            multilineStringDelimiter = value.slice(0, 3)\n            multilineString = value.slice(3)\n            if (value.endsWith(multilineStringDelimiter)) {\n              currentTable[key.trim()] = multilineString.slice(0, -3)\n              multilineString = null\n              multilineStringDelimiter = null\n            }\n          } else if (value.startsWith('{') && value.endsWith('}')) {\n            // Inline table\n            currentTable[key.trim()] = parseInlineTable(value)\n          } else if (value.startsWith('[') && !value.endsWith(']')) {\n            // Multi-line array\n            currentArray = []\n            value = value.slice(1).trim()\n          } else {\n            if (currentArray !== null) {\n              if (value.endsWith(']')) {\n                currentArray.push(parseTomlValue(value.slice(0, -1).trim()))\n                currentTable[key.trim()] = currentArray\n                currentArray = null\n              } else {\n                currentArray.push(parseTomlValue(value))\n              }\n            } else {\n              currentTable[key.trim()] = parseTomlValue(value)\n            }\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n", "/**\n * @typedef {import('../request.js').RequestOptions} RequestOptions\n * @typedef {import('../request.js').ResponseParser} ResponseParser\n */\n\n/**\n * @typedef {Object} YamlOptions\n * @property {string[]} [types]\n * @property {number} [indentSize]\n */\n\n/**\n * @typedef {string | number | boolean | null | YamlObject | YamlValue[]} YamlValue\n */\n\n/**\n * @typedef {Object.<string, YamlValue>} YamlObject\n */\n\n/**\n * Parses a YAML value.\n * @param {string} value\n * @param {Record<string, YamlValue>} anchors\n * @returns {YamlValue}\n */\nconst parseValue = (value, anchors) => {\n  if (value === 'null' || value === '~') {\n    return null\n  }\n  if (value === 'true') {\n    return true\n  }\n  if (value === 'false') {\n    return false\n  }\n  if (value.startsWith('\"') && value.endsWith('\"')) {\n    return value.slice(1, -1)\n  }\n  if (value.startsWith(\"'\") && value.endsWith(\"'\")) {\n    return value.slice(1, -1)\n  }\n  if (!isNaN(Number(value))) {\n    return Number(value)\n  }\n  if (value.startsWith('[') && value.endsWith(']')) {\n    return value.slice(1, -1).split(',').map(item => parseValue(item.trim(), anchors))\n  }\n  if (value.startsWith('*')) {\n    const anchorName = value.slice(1).trim()\n    return anchors[anchorName]\n  }\n  if (value.includes('!!')) {\n    const [tag, tagValue] = value.split(' ')\n    switch (tag) {\n      case '!!int':\n        return parseInt(tagValue)\n      case '!!float':\n        return parseFloat(tagValue)\n      case '!!str':\n        return tagValue\n      case '!!bool':\n        return tagValue.toLowerCase() === 'true'\n      default:\n        return tagValue\n    }\n  }\n  return value\n}\n\n/**\n * YAML parser.\n * @param {YamlOptions} [options={}]\n * @returns {ResponseParser}\n */\nexport const yamlParser = (\n  options = {},\n) => {\n  return {\n    types: options.types || [\n      'yaml',\n      'application/yaml',\n      'text/yaml',\n    ],\n\n    parser: async (\n      response,\n      requestOptions,\n      type,\n    ) => {\n      const lines = (await response.text()).split('\\n')\n      const result = {}\n      let currentObject = result\n      let indentStack = [result]\n      let currentIndent = 0\n      let multilineKey = null\n      let multilineValue = []\n      const anchors = {}\n\n      for (let i = 0; i < lines.length; i++) {\n        let line = lines[i].trimEnd()\n        if (line.trim().startsWith('#')) {\n          continue\n        }\n\n        const indent = line.search(/\\S/)\n\n        if (multilineKey !== null) {\n          if (indent > currentIndent) {\n            multilineValue.push(line.trim())\n            continue\n          } else {\n            currentObject[multilineKey] = multilineValue.join('\\n')\n            multilineKey = null\n            multilineValue = []\n          }\n        }\n\n        if (indent > currentIndent) {\n          indentStack.push(currentObject)\n          currentObject = currentObject[Object.keys(currentObject).pop()]\n        } else if (indent < currentIndent) {\n          while (indent < currentIndent) {\n            indentStack.pop()\n            currentObject = indentStack[indentStack.length - 1]\n            currentIndent -= options.indentSize || 2\n          }\n        }\n\n        currentIndent = indent\n\n        if (line.trim() === '-') {\n          if (!Array.isArray(currentObject)) {\n            const lastKey = Object.keys(currentObject).pop()\n            currentObject[lastKey] = []\n            currentObject = currentObject[lastKey]\n          }\n          currentObject.push({})\n          currentObject = currentObject[currentObject.length - 1]\n          continue\n        }\n\n        const colonIndex = line.indexOf(':')\n        if (colonIndex === -1) {\n          continue\n        }\n\n        const key = line.slice(0, colonIndex).trim()\n        let value = line.slice(colonIndex + 1).trim()\n\n        if (value.startsWith('&')) {\n          const anchorName = value.slice(1).split(' ')[0]\n          value = value.slice(anchorName.length + 2).trim()\n          const parsedValue = parseValue(value, anchors)\n          anchors[anchorName] = parsedValue\n          currentObject[key] = parsedValue\n        } else if (value.startsWith('*')) {\n          const anchorName = value.slice(1).trim()\n          currentObject[key] = anchors[anchorName]\n        } else if (value === '|' || value === '>') {\n          multilineKey = key\n          currentIndent += options.indentSize || 2\n        } else if (value) {\n          currentObject[key] = parseValue(value, anchors)\n        } else {\n          currentObject[key] = {}\n        }\n      }\n\n      return result\n    }\n  }\n}\n", "import { iife } from '../../../.scripts/iife.js'\n\nimport { create } from './library/request.js'\n\nimport { csvParser } from './library/parsers/csv.js'\nimport { iniParser } from './library/parsers/ini.js'\nimport { tomlParser } from './library/parsers/toml.js'\nimport { yamlParser } from './library/parsers/yaml.js'\n\niife([\n  'vroagn',\n], {\n  create,\n\n  csvParser,\n  iniParser,\n  tomlParser,\n  yamlParser,\n})\n"],
  "mappings": "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",
  "names": ["iife", "path", "data", "subject", "i", "cloneRecursive", "value", "clone", "key", "delay", "time", "__async", "resolve", "normalizeContentType", "contentType", "getFileExtension", "url", "match", "getType", "responseHeaders", "requestHeaders", "acceptTypes", "type", "extension", "DEFAULT_VALUES", "create", "initialOptions", "__spreadValues", "cloneRecursive", "lastExecutionTime", "activeRequests", "totalRequests", "debounceTimeout", "throttle", "throttleValue", "__async", "now", "waitTime", "delay", "debounce", "debounceValue", "resolve", "sendRequest", "options", "config", "url", "controller", "executeFetch", "_a", "response", "result", "foundParser", "type", "getType", "parser", "template", "error", "retryRequest", "attempt", "retryAttempts", "retryDelay", "delayTime", "retryAfter", "retryAfterSeconds", "retryAfterDate", "currentTime", "sendOptions", "interval", "wait", "results", "tsvTypes", "csvParser", "options", "response", "requestOptions", "type", "__async", "optionsTemp", "__spreadValues", "string", "rows", "currentRow", "currentField", "insideQuotes", "i", "character", "nextCharacter", "headers", "row", "object", "header", "index", "iniParser", "options", "response", "requestOptions", "type", "__async", "text", "result", "lines", "line", "currentSection", "key", "valueParts", "value", "parseTomlValue", "value", "parseInlineTable", "tableString", "result", "key", "inQuotes", "quoteChar", "inValue", "i", "character", "tomlParser", "options", "response", "requestOptions", "type", "__async", "text", "currentTable", "currentArray", "multilineString", "multilineStringDelimiter", "lines", "line", "tableName", "parts", "part", "parent", "lastPart", "newTable", "valueParts", "parseValue", "value", "anchors", "item", "anchorName", "tag", "tagValue", "yamlParser", "options", "response", "requestOptions", "type", "__async", "lines", "result", "currentObject", "indentStack", "currentIndent", "multilineKey", "multilineValue", "i", "line", "indent", "lastKey", "colonIndex", "key", "parsedValue", "iife", "create", "csvParser", "iniParser", "tomlParser", "yamlParser"]
}
