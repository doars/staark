{
  "version": 3,
  "sources": ["../src/utilities/clone.js", "../src/utilities/delay.js", "../src/utilities/type.js", "../src/library/request.js"],
  "sourcesContent": ["/**\n * Creates a deep clone of a javascript value.\n *\n * @param {any} value Data to clone.\n * @returns {any} Clone of the data.\n */\nexport const cloneRecursive = (\n  value,\n) => {\n  if (typeof (value) === 'object') {\n    const clone = (\n      Array.isArray(value)\n        ? []\n        : {}\n    )\n    for (const key in value) {\n      clone[key] = cloneRecursive(value[key])\n    }\n    return clone\n  }\n  return value\n}\n", "/**\n * Delays the execution for a specified amount of time.\n *\n * @param {number} time The amount of time to delay in milliseconds.\n * @returns {Promise<null>} A promise that resolves after the delay.\n */\nexport const delay = async (\n  time,\n) => {\n  if (time > 0) {\n    return new Promise(\n      (resolve) => setTimeout(resolve, time),\n    )\n  }\n  return null\n}\n", "/**\n * Normalize the content type by removing any parameters and converting to lowercase.\n *\n * @param {string} contentType The content type to normalize.\n * @returns {string} The normalized content type.\n */\nconst normalizeContentType = (contentType) => contentType.split(';')[0].trim().toLowerCase()\n\n/**\n * Extract the file extension from a URL.\n *\n * @param {string} url The URL to extract the file extension from.\n * @returns {string|null} The file extension or null if not found.\n */\nconst getFileExtension = (\n  url,\n) => {\n  const match = url.match(/\\.([^./?]+)(?:[?#]|$)/)\n  return match ? match[1].toLowerCase() : null\n}\n\n/**\n * Get the type of the resource based on the URL, response headers, and request headers.\n *\n * @param {string} url The URL of the resource.\n * @param {Headers} responseHeaders The response headers.\n * @param {Record<string, string>} [requestHeaders] The request headers.\n * @returns {string} The type of the resource.\n */\nexport const getType = (\n  url,\n  responseHeaders,\n  requestHeaders,\n) => {\n  // Check Content-Type in response headers.\n  const contentType = responseHeaders.get('Content-Type')\n  if (contentType) {\n    return normalizeContentType(contentType)\n  }\n\n  // Check Accept in request headers.\n  if (requestHeaders) {\n    if (requestHeaders['Accept']) {\n      const acceptTypes = requestHeaders['Accept'].split(',')\n      for (const type of acceptTypes) {\n        if (type.trim() !== '*/*') {\n          return normalizeContentType(type)\n        }\n      }\n    }\n  }\n\n  // Check URL extension.\n  const extension = getFileExtension(url)\n  if (extension) {\n    return extension\n  }\n\n  return ''\n}\n", "import { cloneRecursive } from '../utilities/clone.js'\nimport { delay } from '../utilities/delay.js'\nimport { getType } from '../utilities/type.js'\n\n/**\n * @typedef {Object} ResponseParser Defines a response parser.\n * @property {string[]} types The types of responses the parser can handle.\n * @property {(response: Response, options: RequestOptions, type: string) => any} parser The function to parse the response.\n **/\n\n/**\n * @typedef {Object} SendOptions Defines the options for sending a request.\n * @property {any} [body] The body of the request.\n * @property {RequestCredentials} [credentials] The credentials for the request.\n * @property {string} [domain] The domain for the request.\n * @property {Record<string, string>} [headers] The headers for the request.\n * @property {'get' | 'post' | 'put' | 'delete' | 'patch' | 'head'} [method] The HTTP method for the request.\n * @property {RequestMode} [mode] The mode for the request.\n * @property {string} [path] The path for the request.\n * @property {'high' | 'normal' | 'low'} [priority] The priority of the request.\n * @property {Record<string, string>} [queryParams] The query parameters for the request.\n * @property {RequestRedirect} [redirect] The redirect mode for the request.\n * @property {ResponseParser[]} [parsers] The parsers for the response.\n * @property {string} [type] The expected response type.\n * @property {AbortController} [abort] The abort controller for the request.\n * @property {RequestCache} [cache] The cache mode for the request.\n * @property {(request: Request | string, requestOptions?: RequestInit) => Promise<Response>} [fetch] The fetch function to use for the request.\n * @property {number} [debounce] The debounce time for the request.\n * @property {number} [delay] The delay time for the request.\n * @property {number} [throttle] The throttle time for the request.\n * @property {number} [timeout] The timeout for the request.\n * @property {number} [retryAttempts] The number of retry attempts for the request.\n * @property {number[]} [retryCodes] The HTTP status codes that should trigger a retry.\n * @property {number} [retryDelay] The delay between retry attempts.\n **/\n\n/**\n * @typedef {SendOptions & { maxConcurrency?: number, maxRequests?: number }} RequestOptions Defines the options for creating a request handler.\n */\n\n// Default values for the request handler.\nconst DEFAULT_VALUES = {\n  method: 'get',\n  retryCodes: [429, 503, 504],\n  retryDelay: 500,\n}\n\n/**\n * Creates a request handler.\n *\n * @param {RequestOptions} initialOptions The initial options for the request handler.\n * @returns {(sendOptions: SendOptions) => Promise<[Error | null, Response | null, any]>} The request handler.\n */\nexport const create = (\n  initialOptions,\n) => {\n  initialOptions = {\n    ...DEFAULT_VALUES,\n    ...cloneRecursive(initialOptions),\n  }\n\n  let lastExecutionTime = 0\n  let activeRequests = 0\n  let totalRequests = 0\n  let debounceTimeout = null\n\n  /**\n   * @param {number} throttleValue\n   */\n  const throttle = async (\n    throttleValue,\n  ) => {\n    const now = Date.now()\n    const waitTime = throttleValue - (now - lastExecutionTime)\n    lastExecutionTime = now + (waitTime > 0 ? waitTime : 0)\n    await delay(waitTime)\n  }\n\n  /**\n   * Debounces the request handler.\n   *\n   * @param {number} debounceValue The debounce time in milliseconds.\n   * @returns {Promise<void>} A promise that resolves after the debounce time.\n   */\n  const debounce = (\n    debounceValue,\n  ) => {\n    return new Promise((resolve) => {\n      if (debounceTimeout) {\n        clearTimeout(debounceTimeout)\n      }\n      debounceTimeout = setTimeout(resolve, debounceValue)\n    })\n  }\n\n  /**\n   * Sends a request.\n   *\n   * @param {RequestOptions} options The options for the request.\n   * @returns {Promise<[Error | null, Response | null, any]>} The error, response and result of the request.\n   */\n  const sendRequest = async (\n    options,\n  ) => {\n    if (\n      options.maxRequests !== undefined\n      && totalRequests >= options.maxRequests\n    ) {\n      return [new Error('Maximum request limit reached'), null, null]\n    }\n\n    totalRequests++\n\n    const config = {\n      cache: options.cache,\n      credentials: options.credentials,\n      headers: options.headers,\n      method: options.method,\n      mode: options.mode,\n      redirect: options.redirect,\n      body: options.body ? JSON.stringify(options.body) : undefined,\n    }\n\n    let url = (options.domain || '') + (options.path || '')\n    if (options.queryParams) {\n      url += '?' + new URLSearchParams(options.queryParams).toString()\n    }\n\n    if (options.timeout) {\n      const controller = options.abort || new AbortController()\n      config.signal = controller.signal\n      setTimeout(() => controller.abort(), options.timeout)\n    }\n\n    /**\n     * @returns {Promise<[Error | null, Response, any]>}\n     */\n    const executeFetch = async () => {\n      const response = await (options.fetch ?? fetch)(url, config)\n      if (!response.ok) {\n        return [new Error('Invalid response'), response, null]\n      }\n\n      try {\n        let result\n        let foundParser = false\n        const type = options.type || getType(url, response.headers, options.headers)\n        if (options.parsers) {\n          for (const parser of options.parsers) {\n            foundParser = parser.types.includes(type)\n            if (foundParser) {\n              result = await parser.parser(response, options, type)\n              break\n            }\n          }\n        }\n        if (!foundParser) {\n          switch (type.toLowerCase()) {\n            case 'arraybuffer':\n              result = await response.arrayBuffer()\n              break\n            case 'blob':\n              result = await response.blob()\n              break\n            case 'formdata':\n              result = await response.formData()\n              break\n            case 'text/plain':\n            case 'text':\n            case 'txt':\n              result = await response.text()\n              break\n            case 'text/html-partial':\n            case 'html-partial':\n              result = await response.text()\n              const template = document.createElement('template')\n              template.innerHTML = result\n              result = template.content.childNodes\n              break\n            case 'text/html':\n            case 'html':\n              result = await response.text()\n              result = new DOMParser().parseFromString(result, 'text/html')\n              break\n            case 'application/json':\n            case 'text/json':\n            case 'json':\n              result = await response.json()\n              break\n            case 'image/svg+xml':\n            case 'svg':\n              result = await response.text()\n              result = new DOMParser().parseFromString(result, 'image/svg+xml')\n              break\n            case 'application/xml':\n            case 'text/xml':\n            case 'xml':\n              result = await response.text()\n              result = new DOMParser().parseFromString(result, 'application/xml')\n              break\n          }\n        }\n\n        return [null, response, result]\n      } catch (error) {\n        return [error || new Error('Thrown parsing error is falsy'), response, null]\n      }\n    }\n\n    /**\n     * Retries the request.\n     *\n     * @returns {Promise<[Error | null, Response, any]>} The error, response and result of the request.\n     */\n    const retryRequest = async () => {\n      let attempt = 0\n      const retryAttempts = options.retryAttempts || 0\n      const retryDelay = options.retryDelay || 0\n\n      while (attempt < retryAttempts) {\n        const [error, response, result] = await executeFetch()\n        if (!error) {\n          return [error, response, result]\n        }\n        if (!options.retryCodes?.includes(response.status || 200)) {\n          return [new Error('Invalid status code'), response, result]\n        }\n\n        attempt++\n        if (attempt >= retryAttempts) {\n          return [new Error('Too many retry attempts'), response, result]\n        }\n\n        let delayTime = retryDelay * Math.pow(2, attempt - 1)\n\n        const retryAfter = response.headers.get('Retry-After')\n        if (retryAfter) {\n          const retryAfterSeconds = parseInt(retryAfter, 10)\n          if (!isNaN(retryAfterSeconds)) {\n            delayTime = Math.max(delayTime, retryAfterSeconds * 1000)\n          } else {\n            const retryAfterDate = new Date(retryAfter).getTime()\n            if (!isNaN(retryAfterDate)) {\n              const currentTime = Date.now()\n              delayTime = Math.max(delayTime, retryAfterDate - currentTime)\n            }\n          }\n        }\n\n        await delay(delayTime)\n      }\n      return executeFetch()\n    }\n\n    const [error, response, result] = await retryRequest()\n    if (!response.ok) {\n      return [new Error(response.statusText), response, result]\n    }\n    return [error, response, result]\n  }\n\n  /**\n   * Sends a request.\n   *\n   * @param {SendOptions} sendOptions The options for sending the request.\n   * @returns {Promise<[Error | null, Response | null, any]>} The error, response and result of the request.\n   */\n  return async (\n    sendOptions,\n  ) => {\n    const options = {\n      ...initialOptions,\n      ...cloneRecursive(sendOptions),\n    }\n    if (initialOptions.headers) {\n      options.headers = {\n        ...initialOptions.headers,\n        ...options.headers,\n      }\n    }\n\n    if (options.debounce) {\n      await debounce(options.debounce)\n    }\n\n    if (options.delay) {\n      await delay(options.delay)\n    }\n\n    if (options.throttle) {\n      await throttle(options.throttle)\n    }\n\n    if (\n      options.maxConcurrency\n      && activeRequests >= options.maxConcurrency\n    ) {\n      await new Promise(resolve => {\n        let interval = null\n        const wait = () => {\n          if (activeRequests >= options.maxConcurrency) {\n            interval = requestAnimationFrame(wait)\n          } else {\n            if (interval) {\n              clearInterval(interval)\n            }\n            resolve(null)\n          }\n        }\n        interval = requestAnimationFrame(wait)\n      })\n    }\n\n    activeRequests++\n    const results = await sendRequest(options)\n    activeRequests--\n    return results\n  }\n}\n"],
  "mappings": ";AAMO,IAAM,iBAAiB,CAC5B,UACG;AACH,MAAI,OAAQ,UAAW,UAAU;AAC/B,UAAM,QACJ,MAAM,QAAQ,KAAK,IACf,CAAC,IACD,CAAC;AAEP,eAAW,OAAO,OAAO;AACvB,YAAM,GAAG,IAAI,eAAe,MAAM,GAAG,CAAC;AAAA,IACxC;AACA,WAAO;AAAA,EACT;AACA,SAAO;AACT;;;ACfO,IAAM,QAAQ,OACnB,SACG;AACH,MAAI,OAAO,GAAG;AACZ,WAAO,IAAI;AAAA,MACT,CAAC,YAAY,WAAW,SAAS,IAAI;AAAA,IACvC;AAAA,EACF;AACA,SAAO;AACT;;;ACTA,IAAM,uBAAuB,CAAC,gBAAgB,YAAY,MAAM,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,YAAY;AAQ3F,IAAM,mBAAmB,CACvB,QACG;AACH,QAAM,QAAQ,IAAI,MAAM,uBAAuB;AAC/C,SAAO,QAAQ,MAAM,CAAC,EAAE,YAAY,IAAI;AAC1C;AAUO,IAAM,UAAU,CACrB,KACA,iBACA,mBACG;AAEH,QAAM,cAAc,gBAAgB,IAAI,cAAc;AACtD,MAAI,aAAa;AACf,WAAO,qBAAqB,WAAW;AAAA,EACzC;AAGA,MAAI,gBAAgB;AAClB,QAAI,eAAe,QAAQ,GAAG;AAC5B,YAAM,cAAc,eAAe,QAAQ,EAAE,MAAM,GAAG;AACtD,iBAAW,QAAQ,aAAa;AAC9B,YAAI,KAAK,KAAK,MAAM,OAAO;AACzB,iBAAO,qBAAqB,IAAI;AAAA,QAClC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAGA,QAAM,YAAY,iBAAiB,GAAG;AACtC,MAAI,WAAW;AACb,WAAO;AAAA,EACT;AAEA,SAAO;AACT;;;AClBA,IAAM,iBAAiB;AAAA,EACrB,QAAQ;AAAA,EACR,YAAY,CAAC,KAAK,KAAK,GAAG;AAAA,EAC1B,YAAY;AACd;AAQO,IAAM,SAAS,CACpB,mBACG;AACH,mBAAiB;AAAA,IACf,GAAG;AAAA,IACH,GAAG,eAAe,cAAc;AAAA,EAClC;AAEA,MAAI,oBAAoB;AACxB,MAAI,iBAAiB;AACrB,MAAI,gBAAgB;AACpB,MAAI,kBAAkB;AAKtB,QAAM,WAAW,OACf,kBACG;AACH,UAAM,MAAM,KAAK,IAAI;AACrB,UAAM,WAAW,iBAAiB,MAAM;AACxC,wBAAoB,OAAO,WAAW,IAAI,WAAW;AACrD,UAAM,MAAM,QAAQ;AAAA,EACtB;AAQA,QAAM,WAAW,CACf,kBACG;AACH,WAAO,IAAI,QAAQ,CAAC,YAAY;AAC9B,UAAI,iBAAiB;AACnB,qBAAa,eAAe;AAAA,MAC9B;AACA,wBAAkB,WAAW,SAAS,aAAa;AAAA,IACrD,CAAC;AAAA,EACH;AAQA,QAAM,cAAc,OAClB,YACG;AACH,QACE,QAAQ,gBAAgB,UACrB,iBAAiB,QAAQ,aAC5B;AACA,aAAO,CAAC,IAAI,MAAM,+BAA+B,GAAG,MAAM,IAAI;AAAA,IAChE;AAEA;AAEA,UAAM,SAAS;AAAA,MACb,OAAO,QAAQ;AAAA,MACf,aAAa,QAAQ;AAAA,MACrB,SAAS,QAAQ;AAAA,MACjB,QAAQ,QAAQ;AAAA,MAChB,MAAM,QAAQ;AAAA,MACd,UAAU,QAAQ;AAAA,MAClB,MAAM,QAAQ,OAAO,KAAK,UAAU,QAAQ,IAAI,IAAI;AAAA,IACtD;AAEA,QAAI,OAAO,QAAQ,UAAU,OAAO,QAAQ,QAAQ;AACpD,QAAI,QAAQ,aAAa;AACvB,aAAO,MAAM,IAAI,gBAAgB,QAAQ,WAAW,EAAE,SAAS;AAAA,IACjE;AAEA,QAAI,QAAQ,SAAS;AACnB,YAAM,aAAa,QAAQ,SAAS,IAAI,gBAAgB;AACxD,aAAO,SAAS,WAAW;AAC3B,iBAAW,MAAM,WAAW,MAAM,GAAG,QAAQ,OAAO;AAAA,IACtD;AAKA,UAAM,eAAe,YAAY;AAC/B,YAAMA,YAAW,OAAO,QAAQ,SAAS,OAAO,KAAK,MAAM;AAC3D,UAAI,CAACA,UAAS,IAAI;AAChB,eAAO,CAAC,IAAI,MAAM,kBAAkB,GAAGA,WAAU,IAAI;AAAA,MACvD;AAEA,UAAI;AACF,YAAIC;AACJ,YAAI,cAAc;AAClB,cAAM,OAAO,QAAQ,QAAQ,QAAQ,KAAKD,UAAS,SAAS,QAAQ,OAAO;AAC3E,YAAI,QAAQ,SAAS;AACnB,qBAAW,UAAU,QAAQ,SAAS;AACpC,0BAAc,OAAO,MAAM,SAAS,IAAI;AACxC,gBAAI,aAAa;AACf,cAAAC,UAAS,MAAM,OAAO,OAAOD,WAAU,SAAS,IAAI;AACpD;AAAA,YACF;AAAA,UACF;AAAA,QACF;AACA,YAAI,CAAC,aAAa;AAChB,kBAAQ,KAAK,YAAY,GAAG;AAAA,YAC1B,KAAK;AACH,cAAAC,UAAS,MAAMD,UAAS,YAAY;AACpC;AAAA,YACF,KAAK;AACH,cAAAC,UAAS,MAAMD,UAAS,KAAK;AAC7B;AAAA,YACF,KAAK;AACH,cAAAC,UAAS,MAAMD,UAAS,SAAS;AACjC;AAAA,YACF,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AACH,cAAAC,UAAS,MAAMD,UAAS,KAAK;AAC7B;AAAA,YACF,KAAK;AAAA,YACL,KAAK;AACH,cAAAC,UAAS,MAAMD,UAAS,KAAK;AAC7B,oBAAM,WAAW,SAAS,cAAc,UAAU;AAClD,uBAAS,YAAYC;AACrB,cAAAA,UAAS,SAAS,QAAQ;AAC1B;AAAA,YACF,KAAK;AAAA,YACL,KAAK;AACH,cAAAA,UAAS,MAAMD,UAAS,KAAK;AAC7B,cAAAC,UAAS,IAAI,UAAU,EAAE,gBAAgBA,SAAQ,WAAW;AAC5D;AAAA,YACF,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AACH,cAAAA,UAAS,MAAMD,UAAS,KAAK;AAC7B;AAAA,YACF,KAAK;AAAA,YACL,KAAK;AACH,cAAAC,UAAS,MAAMD,UAAS,KAAK;AAC7B,cAAAC,UAAS,IAAI,UAAU,EAAE,gBAAgBA,SAAQ,eAAe;AAChE;AAAA,YACF,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AACH,cAAAA,UAAS,MAAMD,UAAS,KAAK;AAC7B,cAAAC,UAAS,IAAI,UAAU,EAAE,gBAAgBA,SAAQ,iBAAiB;AAClE;AAAA,UACJ;AAAA,QACF;AAEA,eAAO,CAAC,MAAMD,WAAUC,OAAM;AAAA,MAChC,SAASC,QAAO;AACd,eAAO,CAACA,UAAS,IAAI,MAAM,+BAA+B,GAAGF,WAAU,IAAI;AAAA,MAC7E;AAAA,IACF;AAOA,UAAM,eAAe,YAAY;AAC/B,UAAI,UAAU;AACd,YAAM,gBAAgB,QAAQ,iBAAiB;AAC/C,YAAM,aAAa,QAAQ,cAAc;AAEzC,aAAO,UAAU,eAAe;AAC9B,cAAM,CAACE,QAAOF,WAAUC,OAAM,IAAI,MAAM,aAAa;AACrD,YAAI,CAACC,QAAO;AACV,iBAAO,CAACA,QAAOF,WAAUC,OAAM;AAAA,QACjC;AACA,YAAI,CAAC,QAAQ,YAAY,SAASD,UAAS,UAAU,GAAG,GAAG;AACzD,iBAAO,CAAC,IAAI,MAAM,qBAAqB,GAAGA,WAAUC,OAAM;AAAA,QAC5D;AAEA;AACA,YAAI,WAAW,eAAe;AAC5B,iBAAO,CAAC,IAAI,MAAM,yBAAyB,GAAGD,WAAUC,OAAM;AAAA,QAChE;AAEA,YAAI,YAAY,aAAa,KAAK,IAAI,GAAG,UAAU,CAAC;AAEpD,cAAM,aAAaD,UAAS,QAAQ,IAAI,aAAa;AACrD,YAAI,YAAY;AACd,gBAAM,oBAAoB,SAAS,YAAY,EAAE;AACjD,cAAI,CAAC,MAAM,iBAAiB,GAAG;AAC7B,wBAAY,KAAK,IAAI,WAAW,oBAAoB,GAAI;AAAA,UAC1D,OAAO;AACL,kBAAM,iBAAiB,IAAI,KAAK,UAAU,EAAE,QAAQ;AACpD,gBAAI,CAAC,MAAM,cAAc,GAAG;AAC1B,oBAAM,cAAc,KAAK,IAAI;AAC7B,0BAAY,KAAK,IAAI,WAAW,iBAAiB,WAAW;AAAA,YAC9D;AAAA,UACF;AAAA,QACF;AAEA,cAAM,MAAM,SAAS;AAAA,MACvB;AACA,aAAO,aAAa;AAAA,IACtB;AAEA,UAAM,CAAC,OAAO,UAAU,MAAM,IAAI,MAAM,aAAa;AACrD,QAAI,CAAC,SAAS,IAAI;AAChB,aAAO,CAAC,IAAI,MAAM,SAAS,UAAU,GAAG,UAAU,MAAM;AAAA,IAC1D;AACA,WAAO,CAAC,OAAO,UAAU,MAAM;AAAA,EACjC;AAQA,SAAO,OACL,gBACG;AACH,UAAM,UAAU;AAAA,MACd,GAAG;AAAA,MACH,GAAG,eAAe,WAAW;AAAA,IAC/B;AACA,QAAI,eAAe,SAAS;AAC1B,cAAQ,UAAU;AAAA,QAChB,GAAG,eAAe;AAAA,QAClB,GAAG,QAAQ;AAAA,MACb;AAAA,IACF;AAEA,QAAI,QAAQ,UAAU;AACpB,YAAM,SAAS,QAAQ,QAAQ;AAAA,IACjC;AAEA,QAAI,QAAQ,OAAO;AACjB,YAAM,MAAM,QAAQ,KAAK;AAAA,IAC3B;AAEA,QAAI,QAAQ,UAAU;AACpB,YAAM,SAAS,QAAQ,QAAQ;AAAA,IACjC;AAEA,QACE,QAAQ,kBACL,kBAAkB,QAAQ,gBAC7B;AACA,YAAM,IAAI,QAAQ,aAAW;AAC3B,YAAI,WAAW;AACf,cAAM,OAAO,MAAM;AACjB,cAAI,kBAAkB,QAAQ,gBAAgB;AAC5C,uBAAW,sBAAsB,IAAI;AAAA,UACvC,OAAO;AACL,gBAAI,UAAU;AACZ,4BAAc,QAAQ;AAAA,YACxB;AACA,oBAAQ,IAAI;AAAA,UACd;AAAA,QACF;AACA,mBAAW,sBAAsB,IAAI;AAAA,MACvC,CAAC;AAAA,IACH;AAEA;AACA,UAAM,UAAU,MAAM,YAAY,OAAO;AACzC;AACA,WAAO;AAAA,EACT;AACF;",
  "names": ["response", "result", "error"]
}
