{
  "version": 3,
  "sources": ["../src/array.ts", "../src/attribute.ts", "../src/clone.ts", "../src/compare.ts", "../src/conditional.ts", "../src/marker.ts", "../src/node.ts", "../src/element.ts", "../src/factory.ts", "../src/selector.ts", "../src/fctory.ts", "../src/identifier.ts", "../src/match.ts", "../src/memo.ts", "../src/nde.ts"],
  "sourcesContent": ["/**\n * Ensure the data is an array of not already. Non-truthy values are converted to empty arrays.\n * @param data Data to arrify\n * @returns An array with the data.\n */\nexport const arrayify = <T>(\n  data: T[] | T,\n): T[] => arrayifyOrUndefined(data) ?? []\n\n/**\n * Ensure the data is an array of not already. Non-truthy values are converted to undefined.\n * @param data Data to arrify\n * @returns An array with the data or undefined.\n */\nexport const arrayifyOrUndefined = <T>(\n  data: T[] | T,\n): T[] | undefined => (\n  data\n    ? Array.isArray(data)\n      ? data :\n      [data,]\n    : undefined\n)\n", "const SUFFIX_MULTIPLE: string = '[]'\n\nexport type MultipleAttributes = {\n  multiple?: boolean,\n  name?: string,\n}\n\nexport const suffixNameIfMultiple = (\n  attributes: MultipleAttributes,\n) => {\n  if (\n    attributes.multiple\n    && attributes.name\n    && !attributes.name.endsWith(SUFFIX_MULTIPLE)\n  ) {\n    attributes.name += SUFFIX_MULTIPLE\n  }\n}\n", "/**\n * Creates a deep clone of a javascript value.\n * @param value Data to clone.\n * @returns Clone of the data.\n */\nexport const cloneRecursive = (\n  value: any,\n) => {\n  if (typeof (value) === 'object') {\n    const clone: Record<any, any> = (\n      Array.isArray(value)\n        ? []\n        : {}\n    )\n    for (const key in value) {\n      clone[key] = cloneRecursive(value[key])\n    }\n    return clone\n  }\n  return value\n}\n", "export const equalRecursive = (\n  valueA: any,\n  valueB: any,\n): boolean => {\n  if (valueA === valueB) {\n    return true\n  }\n\n  if (\n    !valueA\n    || !valueB\n    || typeof valueA !== 'object'\n    || typeof valueB !== 'object'\n  ) {\n    return valueA === valueB\n  }\n\n  if (\n    valueA instanceof Date) {\n    return (\n      valueB instanceof Date\n      && valueA.getTime() === valueB.getTime()\n    )\n  }\n\n  // if (valueA.prototype !== valueB.prototype) {\n  //   return false\n  // }\n\n  const keys = Object.keys(valueA)\n  return (\n    keys.length === Object.keys(valueB).length\n    && keys.every(k => equalRecursive(valueA[k], valueB[k]))\n  )\n}\n", "import { arrayify } from './array.js'\nimport { NodeAbstract } from './node.js'\n\ntype ResolveFunction = () => NodeAbstract[] | NodeAbstract | null | undefined\n\nexport const conditional = (\n  condition: any,\n  onTruth: NodeAbstract[] | NodeAbstract | ResolveFunction,\n  onFalse?: NodeAbstract[] | NodeAbstract | ResolveFunction,\n): NodeAbstract[] => {\n  let result: NodeAbstract[] | NodeAbstract | ResolveFunction | null | undefined = (\n    condition\n      ? onTruth\n      : onFalse\n  )\n  if (typeof (result) === 'function') {\n    result = result()\n  }\n  return arrayify(result) as NodeAbstract[]\n}\n", "export const marker = 'n'\n", "import {\n  arrayifyOrUndefined\n} from './array.js'\nimport {\n  marker,\n} from './marker.js'\nimport {\n  MemoAbstract,\n} from './memo.js'\n\ntype _NodeAttributeListener = {\n  (event: Event, state: Record<string, any>): unknown\n  (event: Event): unknown\n  (): unknown\n}\n\nexport interface NodeAttributeListener extends _NodeAttributeListener {\n  f?: _NodeAttributeListener\n}\n\nexport type NodeAttributes =\n  Record<string,\n    boolean |\n    null |\n    number |\n    string |\n    (number | string)[] |\n    NodeAttributeListener |\n    Record<string,\n      boolean | number | string\n    >\n  >\n\nexport type NodeContent =\n  string |\n  MemoAbstract |\n  NodeAbstract\n\nexport type NodeAbstract = {\n  // Discriminator\n  _: string,\n  // Attributes\n  a?: NodeAttributes\n  // Content\n  c?: NodeContent[]\n  // Node type\n  t: string\n}\n\nexport const node = (\n  type: string,\n  attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n  contents?: NodeContent[] | NodeContent,\n): NodeAbstract => {\n  if (\n    typeof (attributesOrContents) !== 'object'\n    || (attributesOrContents as NodeAbstract)._ === marker\n    || Array.isArray(attributesOrContents)\n  ) {\n    contents = attributesOrContents as NodeContent\n    attributesOrContents = undefined\n  }\n\n  return {\n    _: marker,\n    a: attributesOrContents as (NodeAttributes | undefined),\n    c: arrayifyOrUndefined(contents) as NodeContent[] | undefined,\n    t: type.toUpperCase(),\n  }\n}\n", "import {\n  node,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\n\nexport const childrenToNodes = (\n  element: Element | ChildNode,\n) => {\n  const abstractChildNodes: NodeContent[] = []\n  for (const childNode of element.childNodes) {\n    if (childNode instanceof Text) {\n      abstractChildNodes.push(\n        childNode.textContent ?? ''\n      )\n    } else {\n      const elementChild = childNode as Element\n      const attributes: NodeAttributes = {}\n      for (const attribute of elementChild.attributes) {\n        attributes[attribute.name] = attribute.value\n      }\n\n      abstractChildNodes.push(\n        node(\n          childNode.nodeName,\n          attributes,\n          childrenToNodes(childNode),\n        )\n      )\n    }\n  }\n  return abstractChildNodes\n}\n", "import {\n  node,\n  NodeAbstract,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\n\nexport type Factory = (\n  attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n  contents?: NodeContent[] | NodeContent,\n) => NodeAbstract\n\nexport type FactoryCache = {\n  [key: string]: Factory,\n}\n\nexport const factory = new Proxy({}, {\n  get: (\n    target: FactoryCache,\n    type: string,\n  ): Factory => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n      contents?: NodeContent[] | NodeContent,\n    ): NodeAbstract => node(\n      typeConverted,\n      attributesOrContents,\n      contents,\n    )\n  },\n})\n", "const BRACKET_CLOSE = ']'\nconst BRACKET_OPEN = '['\nconst DOT = '.'\nconst EQUAL = '='\nconst HASH = '#'\nconst QUOTE_SINGLE = '\\''\nconst QUOTE_DOUBLE = '\"'\n\nenum TokenTypes {\n  attribute = 0,\n  class = 1,\n  id = 2,\n  type = 3,\n}\n\nexport const selectorToTokenizer = (\n  selector: string,\n): [string, Record<string, any>] => {\n  const length: number = selector.length\n  let i: number = 0\n\n  let type: string = ''\n  const attributes: Record<string, any> = {}\n\n  let tokenA: string = ''\n  let tokenB: string | true = true\n  let tokenType: TokenTypes = TokenTypes.type\n  const storeToken = () => {\n    if (tokenA) {\n      switch (tokenType) {\n        case TokenTypes.attribute:\n          attributes[tokenA] = tokenB === true ? true : tokenB\n          tokenB = true\n          break\n\n        case TokenTypes.class:\n          if (!attributes.class) {\n            attributes.class = tokenA\n            break\n          }\n          attributes.class += ' ' + tokenA\n          break\n\n        case TokenTypes.id:\n          attributes.id = tokenA\n          break\n\n        case TokenTypes.type:\n          type = tokenA\n          break\n      }\n      tokenA = ''\n    }\n  }\n\n  let character: string\n\n  let attributeBracketCount: number\n  const parseAttribute = (\n  ): void => {\n    attributeBracketCount = 0\n\n    while (i < length) {\n      character = selector[i]\n      i++\n      if (character === EQUAL) {\n        // Parse attribute value.\n        tokenB = ''\n        character = selector[i]\n        const endOnDoubleQuote = character === QUOTE_DOUBLE\n        const endOnSingleQuote = character === QUOTE_SINGLE\n        if (endOnDoubleQuote || endOnSingleQuote) {\n          tokenB += character\n          i++\n        }\n\n        while (i < length) {\n          character = selector[i]\n          if (\n            (endOnDoubleQuote && character === QUOTE_DOUBLE) ||\n            (endOnSingleQuote && character === QUOTE_SINGLE)\n          ) {\n            tokenB += character\n            i++\n            break\n          } else if (\n            !endOnDoubleQuote &&\n            !endOnSingleQuote &&\n            character === BRACKET_CLOSE\n          ) {\n            break\n          }\n          tokenB += character\n          i++\n        }\n\n        if (\n          (\n            tokenB[0] === QUOTE_DOUBLE &&\n            tokenB[tokenB.length - 1] === QUOTE_DOUBLE\n          ) ||\n          (\n            tokenB[0] === QUOTE_SINGLE &&\n            tokenB[tokenB.length - 1] === QUOTE_SINGLE\n          )\n        ) {\n          tokenB = tokenB.substring(1, tokenB.length - 1)\n        }\n\n\n        // Consume until closing bracket, but don't store the tokes since these are invalid.\n        while (i < length) {\n          character = selector[i]\n          i++\n          if (character === BRACKET_CLOSE) {\n            break\n          }\n        }\n        break\n      } else if (character === BRACKET_OPEN) {\n        attributeBracketCount++\n        continue\n      } else if (character === BRACKET_CLOSE) {\n        attributeBracketCount--\n        if (attributeBracketCount < 0) {\n          break\n        }\n        continue\n      }\n\n      tokenA += character\n    }\n    storeToken()\n  }\n\n  while (i < length) {\n    character = selector[i]\n    i++\n\n    if (character === HASH) {\n      storeToken()\n      tokenType = TokenTypes.id\n      continue\n    } else if (character === DOT) {\n      storeToken()\n      tokenType = TokenTypes.class\n      continue\n    } else if (character === BRACKET_OPEN) {\n      storeToken()\n      tokenType = TokenTypes.attribute\n      parseAttribute()\n      continue\n    }\n\n    tokenA += character\n  }\n\n  return [type, attributes]\n}\n", "\nimport {\n  node,\n  NodeAbstract,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\nimport {\n  selectorToTokenizer,\n} from './selector.js'\n\nexport type Fctory = (\n  attributes?: string,\n  contents?: NodeContent[] | NodeContent,\n) => NodeAbstract\n\nexport type FctoryCache = {\n  [key: string]: Fctory,\n}\n\nexport const fctory = new Proxy({}, {\n  get: (\n    target: FctoryCache,\n    type: string,\n  ): Fctory => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      selector?: string,\n      contents?: NodeContent[] | NodeContent,\n    ): NodeAbstract => {\n      let attributes: NodeAttributes | undefined\n      if (selector) {\n        const [_, _attributes] = selectorToTokenizer(selector)\n        attributes = _attributes\n      }\n      return node(\n        typeConverted,\n        attributes,\n        contents,\n      )\n    }\n  },\n})\n", "let identifierCount = 0\nexport const identifier = (\n  prefix: string,\n): string => prefix + '-' + (identifierCount++)\n", "import { arrayify } from './array.js'\nimport { NodeAbstract } from './node.js'\n\ntype ResolveFunction = () => NodeAbstract[] | NodeAbstract | null | undefined\n\nexport const match = (\n  pattern: any,\n  lookup: Record<any, NodeAbstract[] | NodeAbstract | ResolveFunction | null | undefined>,\n  fallback: NodeAbstract[] | NodeAbstract | ResolveFunction | null | undefined,\n): NodeAbstract[] => {\n  let result: NodeAbstract[] | NodeAbstract | ResolveFunction | null | undefined\n  if (\n    lookup\n    && (pattern in lookup)\n    && lookup[pattern]\n  ) {\n    result = lookup[pattern]\n    if (typeof (result) === 'function') {\n      result = result()\n    }\n  } else {\n    result = fallback\n  }\n  return arrayify(result) as NodeAbstract[]\n}\n", "import {\n  marker,\n} from './marker.js'\nimport { NodeContent } from './node.js'\n\nexport type MemoFunction = (\n  state: Record<string, any>,\n  memory: any,\n) => NodeContent[] | NodeContent\n\nexport type MemoAbstract = {\n  _: Symbol,\n  // Compare data\n  m: any,\n  // Render function\n  r: MemoFunction,\n}\n\nexport const memo = (\n  render: MemoFunction,\n  memory: any,\n) => ({\n  _: marker,\n  r: render,\n  m: memory,\n})\n", "import { arrayify, arrayifyOrUndefined } from './array.js'\nimport {\n  marker,\n} from './marker.js'\nimport {\n  NodeAbstract,\n  NodeContent,\n} from './node.js'\nimport {\n  selectorToTokenizer,\n} from './selector.js'\n\nexport const nde = (\n  selector: string,\n  contents?: NodeContent[] | NodeContent,\n): NodeAbstract => {\n  const [type, attributes] = selectorToTokenizer(selector)\n\n  return {\n    _: marker,\n    a: attributes,\n    c: arrayifyOrUndefined(contents) as NodeContent[] | undefined,\n    t: type.toUpperCase(),\n  }\n}\n"],
  "mappings": "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",
  "names": ["arrayify", "data", "_a", "arrayifyOrUndefined", "SUFFIX_MULTIPLE", "suffixNameIfMultiple", "attributes", "cloneRecursive", "value", "clone", "key", "equalRecursive", "valueA", "valueB", "keys", "k", "conditional", "condition", "onTruth", "onFalse", "result", "arrayify", "marker", "node", "type", "attributesOrContents", "contents", "marker", "arrayifyOrUndefined", "childrenToNodes", "element", "_a", "abstractChildNodes", "childNode", "elementChild", "attributes", "attribute", "node", "factory", "target", "type", "typeConverted", "capital", "attributesOrContents", "contents", "node", "BRACKET_CLOSE", "BRACKET_OPEN", "DOT", "EQUAL", "HASH", "QUOTE_SINGLE", "QUOTE_DOUBLE", "selectorToTokenizer", "selector", "length", "i", "type", "attributes", "tokenA", "tokenB", "tokenType", "storeToken", "character", "attributeBracketCount", "parseAttribute", "EQUAL", "endOnDoubleQuote", "QUOTE_DOUBLE", "endOnSingleQuote", "QUOTE_SINGLE", "BRACKET_CLOSE", "BRACKET_OPEN", "HASH", "DOT", "fctory", "target", "type", "typeConverted", "capital", "selector", "contents", "attributes", "_", "_attributes", "selectorToTokenizer", "node", "identifierCount", "identifier", "prefix", "match", "pattern", "lookup", "fallback", "result", "arrayify", "memo", "render", "memory", "marker", "nde", "selector", "contents", "type", "attributes", "selectorToTokenizer", "marker", "arrayifyOrUndefined"]
}
