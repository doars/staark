{
  "version": 3,
  "sources": ["../src/array.js", "../src/attribute.js", "../src/clone.js", "../src/compare.js", "../src/conditional.js", "../src/marker.js", "../src/node.js", "../src/element.js", "../src/factory.js", "../src/selector.js", "../src/fctory.js", "../src/identifier.ts", "../src/match.js", "../src/memo.js", "../src/nde.js"],
  "sourcesContent": ["/**\n * Ensure the data is an array if it isn't already. Non-truthy values are converted to empty arrays.\n *\n * @template T\n * @param {T|T[]} data - Data to \"arrify\".\n * @returns {T[]} An array containing the data.\n */\nexport const arrayify = (\n  data,\n) => arrayifyOrUndefined(data) || []\n\n/**\n * Ensure the data is an array if it isn't already. Non-truthy values are converted to undefined.\n *\n * @template T\n * @param {T|T[]} data - Data to \"arrify\".\n * @returns {(T[]|undefined)} An array containing the data or undefined.\n */\nexport const arrayifyOrUndefined = (\n  data,\n) => data ? (\n  Array.isArray(data)\n    ? data\n    : [data]\n) : undefined\n", "const SUFFIX_MULTIPLE = '[]'\n\n/**\n * @typedef {Object} MultipleAttributes\n * @property {boolean} [multiple]\n * @property {string} [name]\n */\n\n/**\n * Suffixes the name with '[]' if the multiple attribute is true and the name does not already end with '[]'.\n * @param {MultipleAttributes} attributes\n */\nexport const suffixNameIfMultiple = (attributes) => {\n  if (\n    attributes.multiple\n    && attributes.name\n    && !attributes.name.endsWith(SUFFIX_MULTIPLE)\n  ) {\n    attributes.name += SUFFIX_MULTIPLE\n  }\n}\n", "/**\n * Creates a deep clone of a javascript value.\n * @param {any} value Data to clone.\n * @returns {any} Clone of the data.\n */\nexport const cloneRecursive = (\n  value,\n) => {\n  if (typeof (value) === 'object') {\n    const clone = (\n      Array.isArray(value)\n        ? []\n        : {}\n    )\n    for (const key in value) {\n      clone[key] = cloneRecursive(value[key])\n    }\n    return clone\n  }\n  return value\n}\n", "/**\n * Recursively checks if two values are equal.\n *\n * @param {*} valueA - The first value to compare.\n * @param {*} valueB - The second value to compare.\n * @returns {boolean} - Returns true if the values are equal, otherwise false.\n */\nexport const equalRecursive = (valueA, valueB) => {\n  if (valueA === valueB) {\n    return true\n  }\n\n  if (\n    !valueA\n    || !valueB\n    || typeof valueA !== 'object'\n    || typeof valueB !== 'object'\n  ) {\n    return valueA === valueB\n  }\n\n  if (valueA instanceof Date) {\n    return (\n      valueB instanceof Date\n      && valueA.getTime() === valueB.getTime()\n    )\n  }\n\n  // if (valueA.prototype !== valueB.prototype) {\n  //   return false\n  // }\n\n  const keys = Object.keys(valueA)\n  return (\n    keys.length === Object.keys(valueB).length\n    && keys.every(k => equalRecursive(valueA[k], valueB[k]))\n  )\n}\n", "import { arrayify } from './array.js'\n\n/**\n * @typedef {import('./node.js').NodeContent} NodeContent\n * @typedef {import('./types.js').ResolveFunction} ResolveFunction\n */\n\n/**\n * @param {any} condition - The condition to evaluate.\n * @param {NodeContent[] | NodeContent | ResolveFunction} onTruth - The content to return if the condition is true.\n * @param {NodeContent[] | NodeContent | ResolveFunction} [onFalse] - The content to return if the condition is false.\n * @returns {NodeContent[]} - The resulting content as an array.\n */\nexport const conditional = (\n  condition,\n  onTruth,\n  onFalse,\n) => {\n  let result = (\n    condition\n      ? onTruth\n      : onFalse\n  )\n  if (typeof (result) === 'function') {\n    result = result()\n  }\n  return arrayify(result)\n}\n", "export const marker = 'n'\n", "import { arrayifyOrUndefined } from './array.js'\nimport { marker } from './marker.js'\n\n/**\n * @typedef {import('./memo.js').MemoAbstract} MemoAbstract\n */\n\n/**\n * @typedef {function(Event, Record<string, any>): unknown} NodeAttributeListener\n * @property {function(Event, Record<string, any>): unknown} [f]\n */\n\n/**\n * @typedef {Object.<string, boolean | null | number | string | (number | string)[] | NodeAttributeListener | Record<string, boolean | number | string>>} NodeAttributes\n */\n\n/**\n * @typedef {string | MemoAbstract | NodeAbstract} NodeContent\n */\n\n/**\n * @typedef {Object} NodeAbstract\n * @property {string} _ - Discriminator\n * @property {NodeAttributes} [a] - Attributes\n * @property {NodeContent[]} [c] - Content\n * @property {string} t - Node type\n */\n\n/**\n * @param {string} type\n * @param {NodeAttributes | NodeContent[] | NodeContent} [attributesOrContents]\n * @param {NodeContent[] | NodeContent} [contents]\n * @returns {NodeAbstract}\n */\nexport const node = (\n  type,\n  attributesOrContents,\n  contents,\n) => {\n  if (\n    typeof (attributesOrContents) !== 'object'\n    || attributesOrContents._ === marker\n    || Array.isArray(attributesOrContents)\n  ) {\n    contents = attributesOrContents\n    attributesOrContents = undefined\n  }\n\n  return {\n    _: marker,\n    a: attributesOrContents,\n    c: arrayifyOrUndefined(contents),\n    t: type.toUpperCase(),\n  }\n}\n", "import {\n  node,\n} from './node.js'\n\n/**\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * @typedef {Object} Attribute\n * @property {string} name\n * @property {string} value\n */\n\n/**\n * Converts child nodes of an element to an array of abstract nodes.\n * @param {Element | ChildNode} element\n * @returns {NodeContent[]}\n */\nexport const childrenToNodes = (\n  element,\n) => {\n  const abstractChildNodes = []\n  for (const childNode of element.childNodes) {\n    if (childNode instanceof Text) {\n      abstractChildNodes.push(\n        childNode.textContent ?? '',\n      )\n    } else {\n      const attributes = {}\n      for (const attribute of childNode.attributes) {\n        attributes[attribute.name] = attribute.value\n      }\n\n      abstractChildNodes.push(\n        node(\n          childNode.nodeName,\n          attributes,\n          childrenToNodes(childNode),\n        ),\n      )\n    }\n  }\n  return abstractChildNodes\n}\n", "import {\n  node,\n} from './node.js'\n\n/**\n * @typedef {import('./node.js').NodeAbstract} NodeAbstract\n * @typedef {import('./node.js').NodeAttributes} NodeAttributes\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * @typedef {Function} Factory\n * @param {NodeAttributes | NodeContent[] | NodeContent} [attributesOrContents]\n * @param {NodeContent[] | NodeContent} [contents]\n * @returns {NodeAbstract}\n */\n\n/**\n * @typedef {Object} FactoryCache\n */\n\nexport const factory = new Proxy({}, {\n  /**\n   * @param {FactoryCache} target\n   * @param {string} type\n   * @returns {Factory}\n   */\n  get: (\n    target,\n    type,\n  ) => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      attributesOrContents,\n      contents,\n    ) => node(\n      typeConverted,\n      attributesOrContents,\n      contents,\n    )\n  },\n})\n", "const BRACKET_CLOSE = ']'\nconst BRACKET_OPEN = '['\nconst DOT = '.'\nconst EQUAL = '='\nconst HASH = '#'\nconst QUOTE_SINGLE = '\\''\nconst QUOTE_DOUBLE = '\"'\n\n/**\n * @enum {number}\n */\nconst TokenTypes = {\n  attribute: 0,\n  class: 1,\n  id: 2,\n  type: 3,\n}\n\n/**\n * @typedef {Object.<string, any>} Attributes\n */\n\n/**\n * @param {string} selector\n * @returns {[string, Attributes]}\n */\nexport const selectorToTokenizer = (\n  selector,\n) => {\n  const length = selector.length\n  let i = 0\n\n  let type = ''\n  /** @type {Attributes} */\n  const attributes = {}\n\n  let tokenA = ''\n  let tokenB = true\n  let tokenType = TokenTypes.type\n  const storeToken = () => {\n    if (tokenA) {\n      switch (tokenType) {\n        case TokenTypes.attribute:\n          attributes[tokenA] = (\n            tokenB === true\n              ? true\n              : tokenB\n          )\n          tokenB = true\n          break\n\n        case TokenTypes.class:\n          if (!attributes.class) {\n            attributes.class = tokenA\n            break\n          }\n          attributes.class += ' ' + tokenA\n          break\n\n        case TokenTypes.id:\n          attributes.id = tokenA\n          break\n\n        case TokenTypes.type:\n          type = tokenA\n          break\n      }\n      tokenA = ''\n    }\n  }\n\n  let character\n\n  let attributeBracketCount\n  const parseAttribute = () => {\n    attributeBracketCount = 0\n\n    while (i < length) {\n      character = selector[i]\n      i++\n      if (character === EQUAL) {\n        // Parse attribute value.\n        tokenB = ''\n        character = selector[i]\n        const endOnDoubleQuote = character === QUOTE_DOUBLE\n        const endOnSingleQuote = character === QUOTE_SINGLE\n        if (\n          endOnDoubleQuote\n          || endOnSingleQuote\n        ) {\n          tokenB += character\n          i++\n        }\n\n        while (i < length) {\n          character = selector[i]\n          if (\n            (\n              endOnDoubleQuote\n              && character === QUOTE_DOUBLE\n            )\n            || (\n              endOnSingleQuote\n              && character === QUOTE_SINGLE\n            )\n          ) {\n            tokenB += character\n            i++\n            break\n          } else if (\n            !endOnDoubleQuote\n            && !endOnSingleQuote\n            && character === BRACKET_CLOSE\n          ) {\n            break\n          }\n          tokenB += character\n          i++\n        }\n\n        if (\n          (\n            tokenB[0] === QUOTE_DOUBLE\n            && tokenB[tokenB.length - 1] === QUOTE_DOUBLE\n          ) ||\n          (\n            tokenB[0] === QUOTE_SINGLE\n            && tokenB[tokenB.length - 1] === QUOTE_SINGLE\n          )\n        ) {\n          tokenB = tokenB.substring(1, tokenB.length - 1)\n        }\n\n        // Consume until closing bracket, but don't store the tokens since these are invalid.\n        while (i < length) {\n          character = selector[i]\n          i++\n          if (character === BRACKET_CLOSE) {\n            break\n          }\n        }\n        break\n      } else if (character === BRACKET_OPEN) {\n        attributeBracketCount++\n        continue\n      } else if (character === BRACKET_CLOSE) {\n        attributeBracketCount--\n        if (attributeBracketCount < 0) {\n          break\n        }\n        continue\n      }\n\n      tokenA += character\n    }\n    storeToken()\n  }\n\n  while (i < length) {\n    character = selector[i]\n    i++\n\n    if (character === HASH) {\n      storeToken()\n      tokenType = TokenTypes.id\n      continue\n    } else if (character === DOT) {\n      storeToken()\n      tokenType = TokenTypes.class\n      continue\n    } else if (character === BRACKET_OPEN) {\n      storeToken()\n      tokenType = TokenTypes.attribute\n      parseAttribute()\n      continue\n    }\n\n    tokenA += character\n  }\n\n  return [type, attributes]\n}\n", "import {\n  node,\n} from './node.js'\nimport {\n  selectorToTokenizer,\n} from './selector.js'\n\n/**\n * @typedef {import('./node.js').NodeAbstract} NodeAbstract\n * @typedef {import('./node.js').NodeAttributes} NodeAttributes\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * @typedef {function(string=, NodeContent[]|NodeContent=): NodeAbstract} Fctory\n */\n\n/**\n * @typedef {Object<string, Fctory>} FctoryCache\n */\n\nexport const fctory = new Proxy({}, {\n  /**\n   * @param {FctoryCache} target\n   * @param {string} type\n   * @returns {Fctory}\n   */\n  get: (target, type) => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      selector,\n      contents,\n    ) => {\n      let attributes\n      if (selector) {\n        const [_, _attributes] = selectorToTokenizer(selector)\n        attributes = _attributes\n      }\n      return node(\n        typeConverted,\n        attributes,\n        contents,\n      )\n    }\n  },\n})\n", "let identifierCount = 0\n\n/**\n * Generates a unique identifier with a given prefix.\n * @param {string} prefix - The prefix for the identifier.\n * @returns {string} The generated identifier.\n */\nexport const identifier = (\n  prefix,\n) => prefix + '-' + (identifierCount++)\n", "import { arrayify } from './array.js'\n\n/**\n * @typedef {import('./node.js').NodeContent} NodeContent\n * @typedef {import('./types.js').ResolveFunction} ResolveFunction\n */\n\n/**\n * Matches a key to a value in a lookup table, with a fallback option.\n *\n * @param {any} key - The key to match.\n * @param {Record<any, NodeContent[] | NodeContent | ResolveFunction | null | undefined>} lookup - The lookup table.\n * @param {NodeContent[] | NodeContent | ResolveFunction | null} [fallback] - The fallback value.\n * @returns {NodeContent[]} - The matched or fallback value, arrayified.\n */\nexport const match = (\n  key,\n  lookup,\n  fallback,\n) => {\n  let result\n  if (\n    lookup\n    && (key in lookup)\n    && lookup[key]\n  ) {\n    result = lookup[key]\n  } else {\n    result = fallback\n  }\n  if (typeof result === 'function') {\n    result = result()\n  }\n  return arrayify(result)\n}\n", "import { marker } from './marker.js'\n\n/**\n * @typedef {Object<string, any>} State\n */\n\n/**\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * @typedef {function(State, any): NodeContent[] | NodeContent} MemoFunction\n */\n\n/**\n * @typedef {Object} MemoAbstract\n * @property {string} _ - Marker\n * @property {any} m - Memory\n * @property {MemoFunction} r - Render function\n */\n\n/**\n * @param {MemoFunction} render\n * @param {any} memory\n * @returns {MemoAbstract}\n */\nexport const memo = (\n  render,\n  memory,\n) => ({\n  _: marker,\n  r: render,\n  m: memory,\n})\n", "import { arrayifyOrUndefined } from './array.js'\nimport { marker } from './marker.js'\nimport { selectorToTokenizer } from './selector.js'\n\n/**\n * @typedef {import('./node.js').NodeAbstract} NodeAbstract\n * @typedef {import('./node.js').NodeContent} NodeContent\n */\n\n/**\n * Creates a NodeAbstract object from a selector and optional contents.\n *\n * @param {string} selector - The selector string.\n * @param {NodeContent[] | NodeContent} [contents] - The optional contents.\n * @returns {NodeAbstract} The created NodeAbstract object.\n */\nexport const nde = (\n  selector,\n  contents,\n) => {\n  const [type, attributes] = selectorToTokenizer(selector)\n\n  return {\n    _: marker,\n    a: attributes,\n    c: arrayifyOrUndefined(contents),\n    t: type.toUpperCase(),\n  }\n}\n"],
  "mappings": "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",
  "names": ["arrayify", "data", "arrayifyOrUndefined", "SUFFIX_MULTIPLE", "suffixNameIfMultiple", "attributes", "cloneRecursive", "value", "clone", "key", "equalRecursive", "valueA", "valueB", "keys", "k", "conditional", "condition", "onTruth", "onFalse", "result", "arrayify", "marker", "node", "type", "attributesOrContents", "contents", "marker", "arrayifyOrUndefined", "childrenToNodes", "element", "_a", "abstractChildNodes", "childNode", "attributes", "attribute", "node", "factory", "target", "type", "typeConverted", "capital", "attributesOrContents", "contents", "node", "BRACKET_CLOSE", "BRACKET_OPEN", "DOT", "EQUAL", "HASH", "QUOTE_SINGLE", "QUOTE_DOUBLE", "TokenTypes", "selectorToTokenizer", "selector", "length", "i", "type", "attributes", "tokenA", "tokenB", "tokenType", "storeToken", "character", "attributeBracketCount", "parseAttribute", "endOnDoubleQuote", "endOnSingleQuote", "fctory", "target", "type", "typeConverted", "capital", "selector", "contents", "attributes", "_", "_attributes", "selectorToTokenizer", "node", "identifierCount", "identifier", "prefix", "match", "key", "lookup", "fallback", "result", "arrayify", "memo", "render", "memory", "marker", "nde", "selector", "contents", "type", "attributes", "selectorToTokenizer", "marker", "arrayifyOrUndefined"]
}
