{
  "version": 3,
  "sources": ["../src/array.ts", "../src/clone.ts", "../src/compare.ts", "../src/element.ts", "../src/identifier.ts", "../src/node.ts"],
  "sourcesContent": ["export const arrayify = function <T>(\n  data: T[] | T,\n): T[] {\n  if (Array.isArray(data)) {\n    return data\n  }\n  return [\n    data,\n  ]\n}\n", "export const cloneRecursive = (\n  value: any,\n) => {\n  if (typeof (value) === 'object') {\n    if (Array.isArray(value)) {\n      const clone: any[] = []\n      for (let i = 0; i < value.length; i++) {\n        clone.push(cloneRecursive(value[i]))\n      }\n      value = clone\n    } else {\n      const clone: Record<string, any> = {}\n      for (const key in value) {\n        clone[key] = cloneRecursive(value[key])\n      }\n      value = clone\n    }\n  }\n  return value\n}\n", "export const equalRecursive = (\n  valueA: any,\n  valueB: any,\n): boolean => {\n  if (valueA === valueB) {\n    return true\n  }\n  if (\n    valueA instanceof Date\n    && valueB instanceof Date\n  ) {\n    return valueA.getTime() === valueB.getTime()\n  }\n  if (\n    !valueA\n    || !valueB\n    || (\n      typeof valueA !== 'object' && typeof valueB !== 'object'\n    )\n  ) {\n    return valueA === valueB\n  }\n  if (\n    valueA === null\n    || valueA === undefined\n    || valueB === null\n    || valueB === undefined\n  ) {\n    return false\n  }\n  if (valueA.prototype !== valueB.prototype) {\n    return false\n  }\n  let keys = Object.keys(valueA)\n  if (keys.length !== Object.keys(valueB).length) {\n    return false\n  }\n  return keys.every(\n    (key: string): boolean => equalRecursive(valueA[key], valueB[key]),\n  )\n}\n", "export const CREATED_EVENT = 'staark-created'\n\nexport type CustomEventListener = (\n  event: CustomEvent,\n) => unknown\n\nexport const onCreated = (\n  id: string,\n  callback: CustomEventListener,\n) => {\n  const handleEvent = (\n    event: Event,\n  ) => {\n    if ((event as CustomEvent).detail.target.getAttribute('id') === id) {\n      document.body.removeEventListener(\n        CREATED_EVENT,\n        handleEvent,\n      )\n\n      callback(event as CustomEvent)\n    }\n  }\n\n  document.body.addEventListener(\n    CREATED_EVENT,\n    handleEvent,\n  )\n}\n", "let identifierCount = 0\nexport const uniqueIdentifier = (\n): string => '-' + (identifierCount++)\n", "const SUFFIX_MULTIPLE: string = '[]'\n\nexport type MultipleAttributes = {\n  multiple?: boolean,\n  name?: string,\n}\n\nexport const suffixNameIfMultiple = (\n  attributes: MultipleAttributes,\n) => {\n  if (\n    attributes.multiple\n    && attributes.name\n    && !attributes.name.endsWith(SUFFIX_MULTIPLE)\n  ) {\n    attributes.name += SUFFIX_MULTIPLE\n  }\n}\n"],
  "mappings": "AAAO,IAAMA,EAAW,SACtBC,EACK,CACL,OAAI,MAAM,QAAQA,CAAI,EACbA,EAEF,CACLA,CACF,CACF,ECTO,IAAMC,EACXC,GACG,CACH,GAAI,OAAQA,GAAW,SACrB,GAAI,MAAM,QAAQA,CAAK,EAAG,CACxB,IAAMC,EAAe,CAAC,EACtB,QAASC,EAAI,EAAGA,EAAIF,EAAM,OAAQE,IAChCD,EAAM,KAAKF,EAAeC,EAAME,CAAC,CAAC,CAAC,EAErCF,EAAQC,CACV,KAAO,CACL,IAAMA,EAA6B,CAAC,EACpC,QAAWE,KAAOH,EAChBC,EAAME,CAAG,EAAIJ,EAAeC,EAAMG,CAAG,CAAC,EAExCH,EAAQC,CACV,CAEF,OAAOD,CACT,ECnBO,IAAMI,EAAiB,CAC5BC,EACAC,IACY,CACZ,GAAID,IAAWC,EACb,MAAO,GAET,GACED,aAAkB,MACfC,aAAkB,KAErB,OAAOD,EAAO,QAAQ,IAAMC,EAAO,QAAQ,EAE7C,GACE,CAACD,GACE,CAACC,GAEF,OAAOD,GAAW,UAAY,OAAOC,GAAW,SAGlD,OAAOD,IAAWC,EAUpB,GAPED,GAAW,MAERC,IAAW,MACXA,IAAW,QAIZD,EAAO,YAAcC,EAAO,UAC9B,MAAO,GAET,IAAIC,EAAO,OAAO,KAAKF,CAAM,EAC7B,OAAIE,EAAK,SAAW,OAAO,KAAKD,CAAM,EAAE,OAC/B,GAEFC,EAAK,MACTC,GAAyBJ,EAAeC,EAAOG,CAAG,EAAGF,EAAOE,CAAG,CAAC,CACnE,CACF,ECxCO,IAAMC,EAAgB,iBAMhBC,EAAY,CACvBC,EACAC,IACG,CACH,IAAMC,EACJC,GACG,CACEA,EAAsB,OAAO,OAAO,aAAa,IAAI,IAAMH,IAC9D,SAAS,KAAK,oBACZF,EACAI,CACF,EAEAD,EAASE,CAAoB,EAEjC,EAEA,SAAS,KAAK,iBACZL,EACAI,CACF,CACF,EC3BA,IAAIE,EAAkB,EACTC,EAAmB,IACnB,IAAOD,ICFpB,IAAME,EAA0B,KAOnBC,EACXC,GACG,CAEDA,EAAW,UACRA,EAAW,MACX,CAACA,EAAW,KAAK,SAASF,CAAe,IAE5CE,EAAW,MAAQF,EAEvB",
  "names": ["arrayify", "data", "cloneRecursive", "value", "clone", "i", "key", "equalRecursive", "valueA", "valueB", "keys", "key", "CREATED_EVENT", "onCreated", "id", "callback", "handleEvent", "event", "identifierCount", "uniqueIdentifier", "SUFFIX_MULTIPLE", "suffixNameIfMultiple", "attributes"]
}
