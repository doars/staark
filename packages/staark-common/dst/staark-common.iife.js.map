{
  "version": 3,
  "sources": ["../../../.scripts/iife.ts", "../src/array.ts", "../src/clone.ts", "../src/compare.ts", "../src/element.ts", "../src/identifier.ts", "../src/node.ts", "../src/index.iife.ts"],
  "sourcesContent": ["export const iife = function (\n  path: Array<string>,\n  data: any\n) {\n  let subject: Record<string, any> = window\n  for (let i = 0; i < path.length - 1; i++) {\n    if (typeof (subject[path[i]]) !== 'object' || !Array.isArray(subject[path[i]])) {\n      subject[path[i]] = {}\n    }\n    subject = subject[path[i]]\n  }\n  subject[path[path.length - 1]] = data\n}\n", "export const arrayify = function <T>(\n  data: T[] | T,\n): T[] {\n  if (Array.isArray(data)) {\n    return data\n  }\n  return [\n    data,\n  ]\n}\n", "export const cloneRecursive = (\n  value: any,\n) => {\n  if (typeof (value) === 'object') {\n    if (Array.isArray(value)) {\n      const clone: any[] = []\n      for (let i = 0; i < value.length; i++) {\n        clone.push(cloneRecursive(value[i]))\n      }\n      value = clone\n    } else {\n      const clone: Record<string, any> = {}\n      for (const key in value) {\n        clone[key] = cloneRecursive(value[key])\n      }\n      value = clone\n    }\n  }\n  return value\n}\n", "export const equalRecursive = (\n  valueA: any,\n  valueB: any,\n): boolean => {\n  if (valueA === valueB) {\n    return true\n  }\n  if (\n    valueA instanceof Date\n    && valueB instanceof Date\n  ) {\n    return valueA.getTime() === valueB.getTime()\n  }\n  if (\n    !valueA\n    || !valueB\n    || (\n      typeof valueA !== 'object' && typeof valueB !== 'object'\n    )\n  ) {\n    return valueA === valueB\n  }\n  if (\n    valueA === null\n    || valueA === undefined\n    || valueB === null\n    || valueB === undefined\n  ) {\n    return false\n  }\n  if (valueA.prototype !== valueB.prototype) {\n    return false\n  }\n  let keys = Object.keys(valueA)\n  if (keys.length !== Object.keys(valueB).length) {\n    return false\n  }\n  return keys.every(\n    (key: string): boolean => equalRecursive(valueA[key], valueB[key]),\n  )\n}\n", "export const CREATED_EVENT = 'staark-created'\n\nexport type CustomEventListener = (\n  event: CustomEvent,\n) => unknown\n\nexport const onCreated = (\n  id: string,\n  callback: CustomEventListener,\n) => {\n  const handleEvent = (\n    event: Event,\n  ) => {\n    if ((event as CustomEvent).detail.target.getAttribute('id') === id) {\n      document.body.removeEventListener(\n        CREATED_EVENT,\n        handleEvent,\n      )\n\n      callback(event as CustomEvent)\n    }\n  }\n\n  document.body.addEventListener(\n    CREATED_EVENT,\n    handleEvent,\n  )\n}\n", "let identifierCount = 0\nexport const uniqueIdentifier = (\n): string => '-' + (identifierCount++)\n", "const SUFFIX_MULTIPLE: string = '[]'\n\nexport type MultipleAttributes = {\n  multiple?: boolean,\n  name?: string,\n}\n\nexport const suffixNameIfMultiple = (\n  attributes: MultipleAttributes,\n) => {\n  if (\n    attributes.multiple\n    && attributes.name\n    && !attributes.name.endsWith(SUFFIX_MULTIPLE)\n  ) {\n    attributes.name += SUFFIX_MULTIPLE\n  }\n}\n", "import { iife } from '../../../.scripts/iife.js'\n\nimport * as array from './array.js'\nimport * as clone from './clone.js'\nimport * as compare from './compare.js'\nimport * as element from './element.js'\nimport * as identifier from './identifier.js'\nimport * as node from './node.js'\n\niife([\n  'staark',\n  'common',\n], {\n  array,\n  clone,\n  compare,\n  element,\n  identifier,\n  node,\n})\n"],
  "mappings": "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",
  "names": []
}
