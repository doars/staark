{
  "version": 3,
  "sources": ["../../../.scripts/iife.ts", "../src/array.ts", "../src/attribute.ts", "../src/clone.ts", "../src/compare.ts", "../src/conditional.ts", "../src/element.ts", "../src/node.ts", "../src/marker.ts", "../src/factory.ts", "../src/fctory.ts", "../src/selector.ts", "../src/identifier.ts", "../src/match.ts", "../src/memo.ts", "../src/nde.ts", "../src/index.iife.ts"],
  "sourcesContent": ["export const iife = function (\n  path: Array<string>,\n  data: any\n) {\n  let subject: Record<string, any> = window\n  for (let i = 0; i < path.length - 1; i++) {\n    if (\n      typeof (subject[path[i]]) !== 'object'\n      || !Array.isArray(subject[path[i]])\n    ) {\n      subject[path[i]] = {}\n    }\n    subject = subject[path[i]]\n  }\n  subject[path[path.length - 1]] = data\n}\n", "type NonNullable<T> = T extends null | undefined ? never : T\n\n/**\n * Ensure the data is an array of not already. Non-truthy values are converted to empty arrays.\n * @param data Data to arrify\n * @returns An array with the data.\n */\nexport const arrayify = <T>(\n  data: T[] | T,\n): NonNullable<T>[] => arrayifyOrUndefined(data) ?? []\n\n/**\n * Ensure the data is an array of not already. Non-truthy values are converted to undefined.\n * @param data Data to arrify\n * @returns An array with the data or undefined.\n */\nexport const arrayifyOrUndefined = <T>(\n  data: T[] | T,\n): NonNullable<T>[] | undefined => (\n  data\n    ? Array.isArray(data)\n      ? data :\n      [data,]\n    : undefined\n) as NonNullable<T>[] | undefined\n", "const SUFFIX_MULTIPLE: string = '[]'\n\nexport type MultipleAttributes = {\n  multiple?: boolean,\n  name?: string,\n}\n\nexport const suffixNameIfMultiple = (\n  attributes: MultipleAttributes,\n) => {\n  if (\n    attributes.multiple\n    && attributes.name\n    && !attributes.name.endsWith(SUFFIX_MULTIPLE)\n  ) {\n    attributes.name += SUFFIX_MULTIPLE\n  }\n}\n", "/**\n * Creates a deep clone of a javascript value.\n * @param value Data to clone.\n * @returns Clone of the data.\n */\nexport const cloneRecursive = (\n  value: any,\n) => {\n  if (typeof (value) === 'object') {\n    const clone: Record<any, any> = (\n      Array.isArray(value)\n        ? []\n        : {}\n    )\n    for (const key in value) {\n      clone[key] = cloneRecursive(value[key])\n    }\n    return clone\n  }\n  return value\n}\n", "export const equalRecursive = (\n  valueA: any,\n  valueB: any,\n): boolean => {\n  if (valueA === valueB) {\n    return true\n  }\n\n  if (\n    !valueA\n    || !valueB\n    || typeof valueA !== 'object'\n    || typeof valueB !== 'object'\n  ) {\n    return valueA === valueB\n  }\n\n  if (\n    valueA instanceof Date) {\n    return (\n      valueB instanceof Date\n      && valueA.getTime() === valueB.getTime()\n    )\n  }\n\n  // if (valueA.prototype !== valueB.prototype) {\n  //   return false\n  // }\n\n  const keys = Object.keys(valueA)\n  return (\n    keys.length === Object.keys(valueB).length\n    && keys.every(k => equalRecursive(valueA[k], valueB[k]))\n  )\n}\n", "import { arrayify } from './array.js'\nimport { NodeAbstract } from './node.js'\n\ntype ResolveFunction = () => NodeAbstract[] | NodeAbstract | null | undefined\n\nexport const conditional = (\n  condition: any,\n  onTruth: NodeAbstract[] | NodeAbstract | ResolveFunction,\n  onFalse?: NodeAbstract[] | NodeAbstract | ResolveFunction,\n): NodeAbstract[] => {\n  let result: NodeAbstract[] | NodeAbstract | ResolveFunction | null | undefined = (\n    condition\n      ? onTruth\n      : onFalse\n  )\n  if (typeof (result) === 'function') {\n    result = result()\n  }\n  return arrayify(result)\n}\n", "import {\n  node,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\n\nexport const childrenToNodes = (\n  element: Element | ChildNode,\n) => {\n  const abstractChildNodes: NodeContent[] = []\n  for (const childNode of element.childNodes) {\n    if (childNode instanceof Text) {\n      abstractChildNodes.push(\n        childNode.textContent ?? ''\n      )\n    } else {\n      const elementChild = childNode as Element\n      const attributes: NodeAttributes = {}\n      for (const attribute of elementChild.attributes) {\n        attributes[attribute.name] = attribute.value\n      }\n\n      abstractChildNodes.push(\n        node(\n          childNode.nodeName,\n          attributes,\n          childrenToNodes(childNode),\n        )\n      )\n    }\n  }\n  return abstractChildNodes\n}\n", "import {\n  arrayifyOrUndefined\n} from './array.js'\nimport {\n  marker,\n} from './marker.js'\nimport {\n  MemoAbstract,\n} from './memo.js'\n\ntype _NodeAttributeListener = {\n  (event: Event, state: Record<string, any>): unknown\n  (event: Event): unknown\n  (): unknown\n}\n\nexport interface NodeAttributeListener extends _NodeAttributeListener {\n  f?: _NodeAttributeListener\n}\n\nexport type NodeAttributes =\n  Record<string,\n    boolean |\n    null |\n    number |\n    string |\n    (number | string)[] |\n    NodeAttributeListener |\n    Record<string,\n      boolean | number | string\n    >\n  >\n\nexport type NodeContent =\n  string |\n  MemoAbstract |\n  NodeAbstract\n\nexport type NodeAbstract = {\n  // Discriminator\n  _: string,\n  // Attributes\n  a?: NodeAttributes\n  // Content\n  c?: NodeContent[]\n  // Node type\n  t: string\n}\n\nexport const node = (\n  type: string,\n  attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n  contents?: NodeContent[] | NodeContent,\n): NodeAbstract => {\n  if (\n    typeof (attributesOrContents) !== 'object'\n    || (attributesOrContents as NodeAbstract)._ === marker\n    || Array.isArray(attributesOrContents)\n  ) {\n    contents = attributesOrContents as NodeContent\n    attributesOrContents = undefined\n  }\n\n  return {\n    _: marker,\n    a: attributesOrContents as (NodeAttributes | undefined),\n    c: arrayifyOrUndefined(contents) as NodeContent[] | undefined,\n    t: type.toUpperCase(),\n  }\n}\n", "export const marker = 'n'\n", "import {\n  node,\n  NodeAbstract,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\n\nexport type Factory = (\n  attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n  contents?: NodeContent[] | NodeContent,\n) => NodeAbstract\n\nexport type FactoryCache = {\n  [key: string]: Factory,\n}\n\nexport const factory = new Proxy({}, {\n  get: (\n    target: FactoryCache,\n    type: string,\n  ): Factory => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      attributesOrContents?: NodeAttributes | NodeContent[] | NodeContent,\n      contents?: NodeContent[] | NodeContent,\n    ): NodeAbstract => node(\n      typeConverted,\n      attributesOrContents,\n      contents,\n    )\n  },\n})\n", "\nimport {\n  node,\n  NodeAbstract,\n  NodeAttributes,\n  NodeContent,\n} from './node.js'\nimport {\n  selectorToTokenizer,\n} from './selector.js'\n\nexport type Fctory = (\n  attributes?: string,\n  contents?: NodeContent[] | NodeContent,\n) => NodeAbstract\n\nexport type FctoryCache = {\n  [key: string]: Fctory,\n}\n\nexport const fctory = new Proxy({}, {\n  get: (\n    target: FctoryCache,\n    type: string,\n  ): Fctory => {\n    if (target[type]) {\n      return target[type]\n    }\n\n    const typeConverted = (\n      type[0] + type.substring(1)\n        .replace(\n          /([A-Z])/g,\n          capital => '-' + capital,\n        )\n    ).toUpperCase()\n\n    return target[type] = (\n      selector?: string,\n      contents?: NodeContent[] | NodeContent,\n    ): NodeAbstract => {\n      let attributes: NodeAttributes | undefined\n      if (selector) {\n        const [_, _attributes] = selectorToTokenizer(selector)\n        attributes = _attributes\n      }\n      return node(\n        typeConverted,\n        attributes,\n        contents,\n      )\n    }\n  },\n})\n", "const BRACKET_CLOSE = ']'\nconst BRACKET_OPEN = '['\nconst DOT = '.'\nconst EQUAL = '='\nconst HASH = '#'\nconst QUOTE_SINGLE = '\\''\nconst QUOTE_DOUBLE = '\"'\n\nenum TokenTypes {\n  attribute = 0,\n  class = 1,\n  id = 2,\n  type = 3,\n}\n\nexport const selectorToTokenizer = (\n  selector: string,\n): [string, Record<string, any>] => {\n  const length: number = selector.length\n  let i: number = 0\n\n  let type: string = ''\n  const attributes: Record<string, any> = {}\n\n  let tokenA: string = ''\n  let tokenB: string | true = true\n  let tokenType: TokenTypes = TokenTypes.type\n  const storeToken = () => {\n    if (tokenA) {\n      switch (tokenType) {\n        case TokenTypes.attribute:\n          attributes[tokenA] = tokenB === true ? true : tokenB\n          tokenB = true\n          break\n\n        case TokenTypes.class:\n          if (!attributes.class) {\n            attributes.class = tokenA\n            break\n          }\n          attributes.class += ' ' + tokenA\n          break\n\n        case TokenTypes.id:\n          attributes.id = tokenA\n          break\n\n        case TokenTypes.type:\n          type = tokenA\n          break\n      }\n      tokenA = ''\n    }\n  }\n\n  let character: string\n\n  let attributeBracketCount: number\n  const parseAttribute = (\n  ): void => {\n    attributeBracketCount = 0\n\n    while (i < length) {\n      character = selector[i]\n      i++\n      if (character === EQUAL) {\n        // Parse attribute value.\n        tokenB = ''\n        character = selector[i]\n        const endOnDoubleQuote = character === QUOTE_DOUBLE\n        const endOnSingleQuote = character === QUOTE_SINGLE\n        if (endOnDoubleQuote || endOnSingleQuote) {\n          tokenB += character\n          i++\n        }\n\n        while (i < length) {\n          character = selector[i]\n          if (\n            (endOnDoubleQuote && character === QUOTE_DOUBLE) ||\n            (endOnSingleQuote && character === QUOTE_SINGLE)\n          ) {\n            tokenB += character\n            i++\n            break\n          } else if (\n            !endOnDoubleQuote &&\n            !endOnSingleQuote &&\n            character === BRACKET_CLOSE\n          ) {\n            break\n          }\n          tokenB += character\n          i++\n        }\n\n        if (\n          (\n            tokenB[0] === QUOTE_DOUBLE &&\n            tokenB[tokenB.length - 1] === QUOTE_DOUBLE\n          ) ||\n          (\n            tokenB[0] === QUOTE_SINGLE &&\n            tokenB[tokenB.length - 1] === QUOTE_SINGLE\n          )\n        ) {\n          tokenB = tokenB.substring(1, tokenB.length - 1)\n        }\n\n\n        // Consume until closing bracket, but don't store the tokes since these are invalid.\n        while (i < length) {\n          character = selector[i]\n          i++\n          if (character === BRACKET_CLOSE) {\n            break\n          }\n        }\n        break\n      } else if (character === BRACKET_OPEN) {\n        attributeBracketCount++\n        continue\n      } else if (character === BRACKET_CLOSE) {\n        attributeBracketCount--\n        if (attributeBracketCount < 0) {\n          break\n        }\n        continue\n      }\n\n      tokenA += character\n    }\n    storeToken()\n  }\n\n  while (i < length) {\n    character = selector[i]\n    i++\n\n    if (character === HASH) {\n      storeToken()\n      tokenType = TokenTypes.id\n      continue\n    } else if (character === DOT) {\n      storeToken()\n      tokenType = TokenTypes.class\n      continue\n    } else if (character === BRACKET_OPEN) {\n      storeToken()\n      tokenType = TokenTypes.attribute\n      parseAttribute()\n      continue\n    }\n\n    tokenA += character\n  }\n\n  return [type, attributes]\n}\n", "let identifierCount = 0\nexport const identifier = (\n  prefix: string,\n): string => prefix + '-' + (identifierCount++)\n", "import { arrayify } from './array.js'\nimport { NodeAbstract } from './node.js'\n\ntype ResolveFunction = () => NodeAbstract[] | NodeAbstract | null | undefined\n\nexport const match = (\n  pattern: any,\n  lookup: Record<any, NodeAbstract[] | NodeAbstract | ResolveFunction | null | undefined>,\n  fallback: NodeAbstract[] | NodeAbstract | ResolveFunction | null | undefined,\n): NodeAbstract[] => {\n  let result: NodeAbstract[] | NodeAbstract | ResolveFunction | null | undefined\n  if (\n    lookup\n    && (pattern in lookup)\n    && lookup[pattern]\n  ) {\n    result = lookup[pattern]\n  } else {\n    result = fallback\n  }\n  if (typeof (result) === 'function') {\n    result = result()\n  }\n  return arrayify(result)\n}\n", "import {\n  marker,\n} from './marker.js'\nimport { NodeContent } from './node.js'\n\nexport type MemoFunction = (\n  state: Record<string, any>,\n  memory: any,\n) => NodeContent[] | NodeContent\n\nexport type MemoAbstract = {\n  _: Symbol,\n  // Compare data\n  m: any,\n  // Render function\n  r: MemoFunction,\n}\n\nexport const memo = (\n  render: MemoFunction,\n  memory: any,\n) => ({\n  _: marker,\n  r: render,\n  m: memory,\n})\n", "import { arrayify, arrayifyOrUndefined } from './array.js'\nimport {\n  marker,\n} from './marker.js'\nimport {\n  NodeAbstract,\n  NodeContent,\n} from './node.js'\nimport {\n  selectorToTokenizer,\n} from './selector.js'\n\nexport const nde = (\n  selector: string,\n  contents?: NodeContent[] | NodeContent,\n): NodeAbstract => {\n  const [type, attributes] = selectorToTokenizer(selector)\n\n  return {\n    _: marker,\n    a: attributes,\n    c: arrayifyOrUndefined(contents) as NodeContent[] | undefined,\n    t: type.toUpperCase(),\n  }\n}\n", "import { iife } from '../../../.scripts/iife.js'\n\nimport * as array from './array.js'\nimport * as attribute from './attribute.js'\nimport * as clone from './clone.js'\nimport * as compare from './compare.js'\nimport * as conditional from './conditional.js'\nimport * as element from './element.js'\nimport * as factory from './factory.js'\nimport * as fctory from './fctory.js'\nimport * as identifier from './identifier.js'\nimport * as marker from './marker.js'\nimport * as match from './match.js'\nimport * as memo from './memo.js'\nimport * as nde from './nde.js'\nimport * as node from './node.js'\n\niife([\n  'staark',\n  'common',\n], {\n  array,\n  attribute,\n  clone,\n  compare,\n  conditional,\n  element,\n  factory,\n  fctory,\n  identifier,\n  marker,\n  match,\n  memo,\n  nde,\n  node,\n})\n"],
  "mappings": "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",
  "names": []
}
